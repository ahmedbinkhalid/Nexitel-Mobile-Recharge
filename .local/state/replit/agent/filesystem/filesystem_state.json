{"file_contents":{"DEPLOYMENT_GUIDE.md":{"content":"# Production Deployment Guide for Nexitel POS System\n\n## VPS Production Environment Setup\n\n### 1. Environment Variables (.env for production)\n\nCreate a `.env` file on your VPS with these settings:\n\n```bash\n# Production Database (Use your own PostgreSQL)\nDATABASE_URL=\"postgresql://username:password@localhost:5432/nexitel_pos\"\n\n# Production Settings\nNODE_ENV=production\nPORT=5000\n\n# Session Security (IMPORTANT!)\nSESSION_SECRET=\"your-super-secure-random-32-character-string\"\n\n# Domain Settings\nDOMAIN=nexitel.org\n\n# Email (Optional)\nSENDGRID_API_KEY=your_sendgrid_api_key\nFROM_EMAIL=noreply@nexitel.org\n```\n\n### 2. Database Setup on VPS\n\nYou need to set up your own PostgreSQL database:\n\n```bash\n# Install PostgreSQL\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Create database and user\nsudo -u postgres psql\nCREATE DATABASE nexitel_pos;\nCREATE USER nexitel_user WITH PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE nexitel_pos TO nexitel_user;\n\\q\n```\n\n### 3. Required Production Changes\n\n#### A. Update server/index.ts for production:\n\n```javascript\n// Session configuration for production\napp.use(session({\n  store: new PgSession({\n    pool: pool,\n    tableName: 'session',\n    createTableIfMissing: true,\n  }),\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    secure: true, // HTTPS only in production\n    httpOnly: true,\n    sameSite: 'lax',\n    domain: process.env.NODE_ENV === 'production' ? '.nexitel.org' : undefined\n  },\n}));\n```\n\n#### B. HTTPS Configuration (Required for production)\n\nSet up SSL certificate with Let's Encrypt:\n\n```bash\n# Install Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Get SSL certificate\nsudo certbot --nginx -d nexitel.org -d www.nexitel.org\n```\n\n### 4. Build and Deploy Steps\n\n```bash\n# 1. Build the application\nnpm run build\n\n# 2. Install PM2 for production process management\nnpm install -g pm2\n\n# 3. Start the application\npm2 start dist/index.js --name \"nexitel-pos\"\n\n# 4. Setup PM2 to restart on reboot\npm2 startup\npm2 save\n```\n\n### 5. Nginx Configuration\n\nCreate `/etc/nginx/sites-available/nexitel.org`:\n\n```nginx\nserver {\n    listen 80;\n    server_name nexitel.org www.nexitel.org;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nexitel.org www.nexitel.org;\n\n    ssl_certificate /etc/letsencrypt/live/nexitel.org/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/nexitel.org/privkey.pem;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### 6. Database Migration\n\nRun these commands to set up your database schema:\n\n```bash\n# Push schema to your production database\nnpm run db:push\n\n# Or manually create tables if needed\n```\n\n### 7. Common Issues and Solutions\n\n#### Issue: Login not working\n**Solution**: \n- Ensure SESSION_SECRET is set in production\n- Check that HTTPS is properly configured\n- Verify database connection\n- Check that session table is created\n\n#### Issue: Database connection errors\n**Solution**:\n- Update DATABASE_URL to point to your VPS PostgreSQL\n- Ensure PostgreSQL is running: `sudo systemctl status postgresql`\n- Check firewall settings: `sudo ufw allow 5432`\n\n#### Issue: CORS errors\n**Solution**: Add proper headers in server/index.ts:\n\n```javascript\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'https://nexitel.org');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n```\n\n### 8. Default Admin User\n\nCreate the default admin user in your production database:\n\n```sql\nINSERT INTO users (username, email, password, role, balance, is_active) \nVALUES (\n  'admin', \n  'admin@nexitel.org', \n  '$2b$10$hash_of_your_password', \n  'admin', \n  '10000.00', \n  true\n);\n```\n\nUse bcrypt to hash your password first.\n\n## Quick Fix for Current Issue\n\nThe immediate issue is likely that your VPS is using the Replit database URL. Update your VPS `.env` file to use a local PostgreSQL database instead of the Neon database URL shown in the current `.env` file.","size_bytes":4579},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Phone Recharge/Top-up Point of Sale (POS) system built with a modern web architecture. The application provides role-based functionality for different user types (admin, employee, retailer, customer) to manage mobile phone recharging services. The system features a full-stack TypeScript implementation with a React frontend and Express backend, using PostgreSQL for data persistence through Drizzle ORM.\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```\n\n## Recent Changes\n\n```\nLatest Update: August 22, 2025 - Employee ID Verification Removed from Retailer Portals Successfully\n- EMPLOYEE ID REMOVED FROM RETAILERS: Removed Employee ID verification requirements from all retailer-accessible services\n- CONDITIONAL ADMIN CONTROLS: Employee ID verification now only appears for admin users to maintain oversight\n- NEXITEL ACTIVATION STREAMLINED: Retailers can now activate Nexitel services without employee verification steps\n- AT&T DATA ADDONS SIMPLIFIED: Removed Employee ID requirement from AT&T data addon forms for retailers\n- CLEAN RETAILER INTERFACE: No more red employee verification sections showing to retailer users\n- ADMIN OVERSIGHT MAINTAINED: Admin users still see Employee ID requirements for proper control and auditing\n- DIRECT FORM SUBMISSION: Retailers can submit activation and addon forms without verification dialogs\n- ROLE-BASED VALIDATION: Form schemas dynamically require Employee ID only for admin users\n\nPrevious Update: August 22, 2025 - Retailer Interface Simplification Completed Successfully\n- ROUTING ISSUES RESOLVED: Fixed critical routing problem where /att-port-in and /att-sim-swap were loading wrong components\n- DEDICATED CLEAN COMPONENTS: Created ATTPortInStatus and ATTSimSwap components to replace complex ATTServices interface\n- RETAILER-FOCUSED DESIGN: AT&T Port-In and SIM Swap pages now show simple, focused interfaces without admin service tabs\n- SIMPLE SIM SWAP FORM: Created clean 3-field form (Mobile Number, Old SIM ICCID, New SIM ICCID) as requested\n- CENTERED PROFESSIONAL LAYOUT: Improved form layout with proper spacing, larger input fields, and centered design\n- BROWSER CACHING RESOLVED: Component routing now works correctly after clearing browser cache issues\n- RETAILER DASHBOARD FUNCTIONAL: All retailer service links properly route to dedicated clean interfaces\n- NO MORE COMPLEX AT&T SERVICES: Eliminated unwanted service categories from retailer-accessible pages\n\nPrevious Update: August 21, 2025 - AT&T Bulk Activation Integration Successfully Completed\n- AT&T BULK ACTIVATION ADDED: Integrated bulk activation functionality into AT&T activation page with tabbed interface\n- DASHBOARD MENU UPDATED: Added \"Bulk Activation\" option to AT&T services card in admin dashboard\n- TABBED INTERFACE: AT&T activation page now features Individual and Bulk activation tabs\n- CSV UPLOAD FUNCTIONALITY: Bulk activation supports CSV file upload with employee verification\n- SERVICE TYPE SELECTION: Bulk activation includes AT&T Prepaid/Postpaid service type options\n- EMPLOYEE VERIFICATION: Mandatory employee ID verification for all bulk operations\n- FILE PROCESSING: Drag-and-drop CSV upload with format requirements and validation\n- API INTEGRATION: Connected to existing AT&T bulk activation backend endpoints\n- SIDEBAR OPTIMIZATION: Removed standalone bulk activation menu item for cleaner navigation\n- UNIFIED ACTIVATION: Both individual and bulk AT&T activations accessible from single page location\n\nPrevious Update: August 21, 2025 - Commission Pricing System Successfully Implemented and Verified\n- COMMISSION PRICING FULLY WORKING: All activation interfaces now display correct retailer commissions\n- AUTOMATIC PRICING CALCULATION: System automatically sets customer prices from plan denominations when creating commission pricing\n- VERIFIED BUSINESS MODEL: Our Cost ($7) → Retailer Cost ($9) → Customer Price ($10) = $1 retailer commission working perfectly\n```\n\n## System Architecture\n\nThe application follows a monorepo structure with clear separation between frontend, backend, and shared components:\n\n**Frontend Architecture:**\n- React with TypeScript for the user interface\n- Vite as the build tool and development server\n- TanStack Query for server state management\n- Wouter for client-side routing\n- Tailwind CSS with shadcn/ui components for styling\n- Role-based authentication and authorization\n\n**Backend Architecture:**\n- Express.js server with TypeScript\n- RESTful API design with route-based organization\n- Memory storage implementation with interface for future database integration\n- Middleware for logging, error handling, and request processing\n\n**Database Layer:**\n- Drizzle ORM for type-safe database operations\n- PostgreSQL as the target database (configured for Neon serverless)\n- Schema-first approach with Zod validation\n\n## Key Components\n\n### Subdomain Routing System\n- **Main Domain (staff.domain.com)**: Staff portal for admin, employee, and retailer access\n  - Nexitel Services: Complete wireless service management suite (admin/employee/retailer only)\n    - New Activation: Service setup with ICCID, SIM options, plans, customer details\n    - Recharge: Top-up with Nexitel Purple/Blue carrier options\n    - Activation Report: View and track activation records (admin/employee/retailer)\n    - Recharge Report: Monitor recharge transactions with analytics (admin/employee/retailer)\n    - SIM Swap: Replace damaged/lost SIM cards with service transfer\n    - Port-In Status: Track number porting requests and progress (admin/employee/retailer)\n  - Global Recharge: International mobile phone top-up services (staff login required)\n  - Authentication required for all service access\n  - Role-based permissions for staff functionality levels\n\n- **Customer Subdomain (customer.domain.com)**: Public customer portal\n  - International mobile recharge services (no login required)\n  - Country and carrier selection from comprehensive global database\n  - Amount presets and custom amount options\n  - Modern, user-friendly interface optimized for customer experience\n  - Separate from staff portal for security and user experience\n  \n- **Development Testing**: Use `?subdomain=customer` parameter to test customer portal functionality\n\n### Authentication System\n- Username/password-based login (staff only)\n- Role-based access control (admin, employee, retailer)\n- Local storage for session persistence\n- Protected routes based on user roles\n\n### User Management\n- Three staff user roles with different permissions (admin, employee, retailer)\n- Employee role sub-categorization (accountant, technical support)\n- User creation and management capabilities\n- Active/inactive user status tracking\n\n### Balance Management System\n- Admin main balance oversight: Controls total system balance and monitors retailer activity\n- Individual retailer portal balances: Each retailer has their own account balance\n- Dual deduction system: Both admin and retailer balances automatically reduce during transactions\n- Real-time balance tracking: Live balance updates on dashboards after each transaction\n- Insufficient balance protection: Prevents transactions when balance is too low\n- Balance display components: Clear balance visualization for admin and retailer interfaces\n\n### Transaction System\n- Mobile phone recharge processing\n- Comprehensive global coverage with 6 regions:\n  - North America (USA, Canada, Mexico, Caribbean)\n  - South America (Argentina, Brazil, Colombia, Chile, Peru, Venezuela, etc.)\n  - Europe (UK, Germany, France, Spain, Italy, Netherlands, Russia, etc.)\n  - Asia (China, India, Japan, South Korea, Indonesia, Philippines, etc.)\n  - Africa (South Africa, Nigeria, Egypt, Kenya, Morocco, Ghana, etc.)\n  - Oceania (Australia, New Zealand, Papua New Guinea, Pacific Islands)\n- Country-specific carrier support with authentic carrier names\n- Service fee calculation with role-based rates\n- Transaction status tracking (pending, completed, failed)\n- User-specific transaction history\n\n### Saved Numbers Feature\n- Users can save frequently used phone numbers\n- Labeled contacts for easy identification\n- Country and carrier association\n\n### Permissions System\n- Role-based permissions using a junction table\n- Granular permission controls\n- Admin override capabilities\n\n## Data Flow\n\n1. **Authentication Flow:**\n   - User submits credentials through login form\n   - Server validates against user database\n   - Successful authentication returns user object (without password)\n   - Client stores auth state in localStorage and React context\n\n2. **Transaction Flow:**\n   - User selects country, carrier, and recharge amount\n   - System calculates service fees and total amount\n   - Transaction is created with pending status\n   - Backend processes the recharge (implementation pending)\n   - Transaction status is updated upon completion\n\n3. **Role-Based Access:**\n   - Routes are protected based on user roles\n   - UI components adapt based on user permissions\n   - API endpoints validate user authorization\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components:** Radix UI primitives with shadcn/ui styling\n- **Form Handling:** React Hook Form with Zod validation\n- **State Management:** TanStack Query for server state\n- **Styling:** Tailwind CSS with custom CSS variables\n- **Icons:** Lucide React icon library\n\n### Backend Dependencies\n- **Database:** Neon serverless PostgreSQL\n- **ORM:** Drizzle with Zod schema validation\n- **Session Storage:** connect-pg-simple for PostgreSQL session store\n- **Development:** tsx for TypeScript execution\n\n### Build Tools\n- **Frontend:** Vite with React plugin\n- **Backend:** esbuild for production bundling\n- **Development:** Concurrent TypeScript compilation checking\n\n## Deployment Strategy\n\n**Development Environment:**\n- Vite dev server with HMR for frontend\n- tsx for backend TypeScript execution\n- Integrated development workflow with shared types\n\n**Production Build:**\n- Vite builds frontend to `dist/public`\n- esbuild bundles backend to `dist/index.js`\n- Single-server deployment serving both API and static files\n- Environment-based configuration\n\n**Database Management:**\n- Drizzle Kit for schema migrations\n- Database push capabilities for development\n- PostgreSQL connection via environment variables\n\n**Key Architectural Decisions:**\n\n1. **Monorepo Structure:** Chosen for shared TypeScript types and simplified development workflow\n2. **Memory Storage Interface:** Allows for easy database migration while maintaining development simplicity\n3. **Role-Based Architecture:** Enables scalable permission management and user segregation\n4. **Type-Safe Database Layer:** Drizzle ORM provides compile-time safety and runtime validation\n5. **Component-Based UI:** shadcn/ui provides consistent, accessible components with customization flexibility\n\nThe system is designed for scalability with clear interfaces, type safety throughout the stack, and a modular architecture that supports future enhancements and integrations.","size_bytes":11039},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test_phone_search.sh":{"content":"#!/bin/bash\n\n# Test phone number search functionality\n\n# 1. Login to get session cookie\necho \"=== Testing Phone Number Search ===\"\necho \"1. Logging in...\"\ncurl -X POST http://localhost:5000/api/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"admin123\"}' \\\n  -c /tmp/cookies.txt -b /tmp/cookies.txt \\\n  -s -o /tmp/login_response.html\n\necho \"2. Testing ICCID search for 8901260123456789012...\"\ncurl -X GET \"http://localhost:5000/api/activities/search/iccid/8901260123456789012\" \\\n  -b /tmp/cookies.txt -s | jq .\n\necho \"3. Testing mobile number search for 5551234567...\"\ncurl -X GET \"http://localhost:5000/api/activities/search/mobile/5551234567\" \\\n  -b /tmp/cookies.txt -s | jq .\n\necho \"4. Testing mobile number search for 5551234568...\"\ncurl -X GET \"http://localhost:5000/api/activities/search/mobile/5551234568\" \\\n  -b /tmp/cookies.txt -s | jq .\n\necho \"=== Test Complete ===\"","size_bytes":913},"test_search.js":{"content":"// Test script to add sample data and test search functionality\nconst fetch = require('node-fetch');\n\nconst baseUrl = 'http://localhost:5000';\nlet cookies = '';\n\nasync function login() {\n  const response = await fetch(`${baseUrl}/api/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      username: 'admin',\n      password: 'admin123'\n    })\n  });\n  \n  const setCookies = response.headers.get('set-cookie');\n  if (setCookies) {\n    cookies = setCookies.split(';')[0];\n  }\n  \n  console.log('Login response:', response.status);\n  return response.ok;\n}\n\nasync function testSearch() {\n  console.log('Testing phone number search...');\n  \n  const response = await fetch(`${baseUrl}/api/activities/search/mobile/5551234567`, {\n    headers: {\n      'Cookie': cookies\n    }\n  });\n  \n  const data = await response.json();\n  console.log('Search response status:', response.status);\n  console.log('Search data:', data);\n}\n\nasync function main() {\n  await login();\n  await testSearch();\n}\n\nmain().catch(console.error);","size_bytes":1077},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { pool } from \"./db\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst PgSession = connectPgSimple(session);\n\nconst app = express();\nconst server = createServer(app);\n\n// Trust proxy for Replit environment\napp.set('trust proxy', 1);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(session({\n  store: new PgSession({\n    pool: pool,\n    tableName: 'session',\n    createTableIfMissing: true,\n  }),\n  secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  name: 'connect.sid',\n  proxy: true, // Trust the proxy (Vite dev server)\n  cookie: {\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    secure: false, // Disable secure for now to test if this fixes the issue\n    httpOnly: false, // Allow JavaScript access for debugging\n    sameSite: 'lax', // Use lax instead of none for better compatibility\n    domain: undefined, // Don't set domain, let it default to current host\n    path: '/', // Ensure cookie is available for all paths\n  },\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const PORT = parseInt(process.env.PORT || '5050', 10);\n  app.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\n})();\n","size_bytes":3125},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"server/routes.ts":{"content":"import express, { type Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { \n  loginSchema, \n  insertUserSchema, \n  insertTransactionSchema,\n  insertSavedNumberSchema,\n  planManagementSchema,\n  commissionGroupSchema,\n  commissionPricingSchema,\n  rechargeSchema,\n  activitySearchSchema,\n  reportGenerationSchema,\n  insertActivationRecordSchema,\n  insertRechargeRecordSchema,\n  insertCommissionHistorySchema,\n  insertWalletTopupRecordSchema,\n  // AT&T Schemas\n  insertAttActivationSchema,\n  insertAttDataAddonSchema,\n  insertAttSimSwapSchema,\n  insertAttRechargeSchema,\n  insertAttBulkActivationSchema,\n  insertRetailerAttPermissionSchema,\n  type User \n} from \"@shared/schema\";\n\n// Session type extension\ndeclare module \"express-session\" {\n  interface SessionData {\n    user?: Omit<User, \"password\">;\n  }\n}\n\nexport function registerRoutes(app: express.Application) {\n  // Helper function to validate request body\n  function validateBody<T>(schema: z.ZodSchema<T>) {\n    return (req: Request, res: Response, next: Function) => {\n      try {\n        console.log(\"Validating request body:\", req.body);\n        req.body = schema.parse(req.body);\n        console.log(\"Validation successful\");\n        next();\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          console.log(\"Validation error:\", error.errors);\n          return res.status(400).json({ \n            message: \"Validation error\", \n            errors: error.errors \n          });\n        }\n        console.log(\"Other validation error:\", error);\n        return res.status(400).json({ message: \"Invalid request body\" });\n      }\n    };\n  }\n\n  // Authentication middleware\n  function requireAuth(req: Request, res: Response, next: Function) {\n    if (!req.session?.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  }\n\n  // Role-based authorization middleware\n  function requireRole(roles: string[]) {\n    return (req: Request, res: Response, next: Function) => {\n      if (!req.session?.user || !roles.includes(req.session.user.role)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n      next();\n    };\n  }\n\n  // ===== AUTHENTICATION ROUTES =====\n\n  // Employee ID verification endpoint\n  app.post(\"/api/auth/verify-employee-id\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { employeeId } = req.body;\n      const currentUser = req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      // Only employees need to verify their ID\n      if (currentUser.role !== \"employee\") {\n        return res.status(403).json({ message: \"Employee verification not required for your role\" });\n      }\n\n      // Get the full user record to check employee ID\n      const user = await storage.getUser(currentUser.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify employee ID matches\n      if (!user.employeeId) {\n        return res.status(400).json({ message: \"Employee ID not set for this user. Please contact admin.\" });\n      }\n\n      if (user.employeeId !== employeeId) {\n        return res.status(400).json({ message: \"Invalid Employee ID. Please check and try again.\" });\n      }\n\n      res.json({ message: \"Employee ID verified successfully\" });\n    } catch (error) {\n      console.error(\"Employee ID verification error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Check current session with enhanced debugging\n  app.get(\"/api/auth/me\", (req: Request, res: Response) => {\n    console.log('Session check:', {\n      sessionId: req.session?.id,\n      hasUser: !!req.session?.user,\n      userId: req.session?.user?.id,\n      cookies: req.headers.cookie,\n      host: req.headers.host,\n      origin: req.headers.origin,\n      referer: req.headers.referer\n    });\n    \n    if (!req.session?.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    res.json({ user: req.session.user });\n  });\n\n  // Login\n  app.post(\"/api/auth/login\", validateBody(loginSchema), async (req: Request, res: Response) => {\n    try {\n      const { username, password } = req.body;\n      console.log(\"Login attempt for username:\", username);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        console.log(\"User not found:\", username);\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Don't send password in response\n      const { password: _, ...userWithoutPassword } = user;\n      \n      // Initialize session if not exists\n      if (!req.session) {\n        return res.status(500).json({ message: \"Session not initialized\" });\n      }\n      \n      // Set user in session and force save\n      req.session.user = userWithoutPassword;\n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      // Log session\n      await storage.createAuditLog({\n        userId: user.id,\n        entityType: \"session\",\n        entityId: req.session.id || \"unknown\",\n        action: \"login\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n\n\n  // Logout\n  app.post(\"/api/auth/logout\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      if (req.session?.user) {\n        await storage.createAuditLog({\n          userId: req.session.user.id,\n          entityType: \"session\",\n          entityId: req.session.id || \"unknown\",\n          action: \"logout\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n        });\n      }\n\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Failed to logout\" });\n        }\n        res.json({ message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== USER MANAGEMENT ROUTES =====\n\n  // Get all users (admin only)\n  app.get(\"/api/users\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get employees only (admin only)\n  app.get(\"/api/users/employee\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const employees = await storage.getUsersByRole(\"employee\");\n      const employeesWithoutPasswords = employees.map(({ password, ...user }) => user);\n      res.json(employeesWithoutPasswords);\n    } catch (error) {\n      console.error(\"Get employees error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get retailers only (admin only)\n  app.get(\"/api/users/role/retailer\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const retailers = await storage.getUsersByRole(\"retailer\");\n      const retailersWithoutPasswords = retailers.map(({ password, ...user }) => user);\n      res.json(retailersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Get retailers error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create user (admin only)\n  app.post(\"/api/users\", requireAuth, requireRole([\"admin\"]), validateBody(insertUserSchema), async (req: Request, res: Response) => {\n    try {\n      console.log(\"Creating user with data:\", req.body);\n      \n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        console.log(\"Username already exists:\", req.body.username);\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(req.body.email);\n      if (existingEmail) {\n        console.log(\"Email already exists:\", req.body.email);\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser(req.body);\n      const { password, ...userWithoutPassword } = user;\n      console.log(\"User created successfully:\", userWithoutPassword);\n\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"user\",\n        entityId: user.id.toString(),\n        action: \"create\",\n        newValues: userWithoutPassword,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update user (admin only)\n  app.patch(\"/api/users/:id\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.id);\n      console.log(\"Updating user with ID:\", userId, \"Data:\", req.body);\n      \n      // Validate the incoming data against the user schema (excluding fund fields)\n      const updateUserSchema = insertUserSchema.partial().omit({\n        canAddFunds: true,\n        maxDailyFunding: true,\n        maxMonthlyFunding: true,\n      });\n      \n      const validatedData = updateUserSchema.parse(req.body);\n      \n      const user = await storage.updateUser(userId, validatedData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      console.log(\"User updated successfully:\", userWithoutPassword);\n\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"user\",\n        entityId: userId.toString(),\n        action: \"update\",\n        newValues: userWithoutPassword,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== TRANSACTION ROUTES =====\n\n  // Get all transactions (admin/employee) or user's transactions\n  app.get(\"/api/transactions\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      let transactions;\n\n      if (user.role === \"admin\" || user.role === \"employee\") {\n        transactions = await storage.getAllTransactions();\n      } else {\n        transactions = await storage.getTransactionsByUser(user.id);\n      }\n\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Get transactions error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create transaction (process recharge)\n  app.post(\"/api/transactions\", requireAuth, validateBody(rechargeSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const { phoneNumber, country, carrier, amount } = req.body;\n\n      // Calculate fees (this would normally come from plan management)\n      const serviceFee = (amount * 0.05).toFixed(2); // 5% service fee\n      const totalAmount = (amount + parseFloat(serviceFee)).toFixed(2);\n\n      const result = await storage.processRechargeTransaction({\n        userId: user.id,\n        phoneNumber,\n        country,\n        carrier,\n        amount: amount.toString(),\n        serviceFee,\n        totalAmount,\n        status: \"completed\",\n      });\n\n      await storage.createAuditLog({\n        userId: user.id,\n        entityType: \"transaction\",\n        entityId: result.transaction.id.toString(),\n        action: \"create\",\n        newValues: result.transaction,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(result);\n    } catch (error) {\n      console.error(\"Create transaction error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // ===== PLAN MANAGEMENT ROUTES =====\n\n  // Get all plans (admin/employee) or retailer-specific plans\n  app.get(\"/api/plans\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const { serviceType } = req.query;\n      let plans;\n\n      if (user.role === \"retailer\") {\n        // For all service types, use commission pricing if available, otherwise fall back to base pricing\n        if (serviceType && typeof serviceType === \"string\") {\n          // Try to get retailer-specific pricing first\n          const commissionPlans = await storage.getRetailerPlansByServiceType(user.id, serviceType);\n          if (commissionPlans.length > 0) {\n            plans = commissionPlans;\n          } else {\n            // Fall back to base pricing for recharge plans if no commission pricing exists\n            if (serviceType.includes(\"_recharge\") || serviceType === \"nexitel_recharge\" || serviceType === \"att_recharge\") {\n              plans = await storage.getPlansByServiceType(serviceType);\n            } else {\n              plans = [];\n            }\n          }\n        } else {\n          // Get all retailer plans (commission-based and recharge fallbacks)\n          const commissionPlans = await storage.getRetailerPlans(user.id);\n          const allPlans = await storage.getAllPlans();\n          const rechargePlans = allPlans.filter(plan => \n            plan.serviceType.includes(\"_recharge\") && \n            !commissionPlans.some(cp => cp.id === plan.id)\n          );\n          plans = [...commissionPlans, ...rechargePlans];\n        }\n      } else {\n        // For admin/employee, show commission pricing for activation services, base pricing for management\n        if (serviceType && typeof serviceType === \"string\") {\n          // For activation services (nexitel, att), show commission pricing from default commission group 3\n          if (serviceType === \"nexitel\" || serviceType === \"att\") {\n            // Try to get commission pricing from commission group 3 first\n            const demoCommissionPlans = await storage.getCommissionPlansByServiceType(3, serviceType);\n            if (demoCommissionPlans.length > 0) {\n              plans = demoCommissionPlans;\n            } else {\n              plans = await storage.getPlansByServiceType(serviceType);\n            }\n          } else {\n            // For other services, show base pricing\n            plans = await storage.getPlansByServiceType(serviceType);\n          }\n        } else {\n          plans = await storage.getAllPlans();\n        }\n      }\n\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Get plans error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create plan (admin only)\n  app.post(\"/api/plans\", requireAuth, requireRole([\"admin\"]), validateBody(planManagementSchema), async (req: Request, res: Response) => {\n    try {\n      // Since retailer pricing is handled in commission management,\n      // we set default values for backward compatibility\n      const denomination = typeof req.body.denomination === 'string' ? req.body.denomination : String(req.body.denomination);\n      const ourCost = typeof req.body.ourCost === 'string' ? req.body.ourCost : String(req.body.ourCost);\n      \n      const planData = {\n        ...req.body,\n        denomination,\n        retailerPrice: denomination, // For recharge plans, customer pays the denomination amount\n        ourCost,\n        profit: (parseFloat(denomination) - parseFloat(ourCost)).toString(), // Calculate basic profit\n      };\n\n      const plan = await storage.createPlan(planData);\n\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"plan\",\n        entityId: plan.id.toString(),\n        action: \"create\",\n        newValues: plan,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(plan);\n    } catch (error) {\n      console.error(\"Create plan error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update plan (admin only)\n  app.patch(\"/api/plans/:id\", requireAuth, requireRole([\"admin\"]), validateBody(planManagementSchema), async (req: Request, res: Response) => {\n    try {\n      const planId = parseInt(req.params.id);\n      console.log(\"Updating plan with ID:\", planId, \"Data:\", req.body);\n      \n      const planData = {\n        ...req.body,\n        retailerPrice: \"0\", // Will be overridden by commission pricing\n        ourCost: req.body.ourCost.toString(),\n        profit: \"0\", // Will be calculated in commission pricing\n      };\n\n      const plan = await storage.updatePlan(planId, planData);\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"plan\",\n        entityId: planId.toString(),\n        action: \"update\",\n        newValues: plan,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Update plan error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete plan (admin only)\n  app.delete(\"/api/plans/:id\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const planId = parseInt(req.params.id);\n      console.log(\"Deleting plan with ID:\", planId);\n      \n      const success = await storage.deletePlan(planId);\n      if (!success) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"plan\",\n        entityId: planId.toString(),\n        action: \"delete\",\n        newValues: {},\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({ message: \"Plan deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete plan error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== FUND MANAGEMENT ROUTES =====\n\n  // Transfer funds (admin only)\n  app.post(\"/api/fund-transfers\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const { toUserId, amount, description } = req.body;\n      const fromUserId = req.session.user!.id;\n\n      const success = await storage.transferFunds(fromUserId, toUserId, amount, description);\n      \n      if (!success) {\n        return res.status(400).json({ message: \"Transfer failed - insufficient funds or invalid user\" });\n      }\n\n      await storage.createAuditLog({\n        userId: fromUserId,\n        entityType: \"fund_transfer\",\n        entityId: `${fromUserId}-${toUserId}`,\n        action: \"create\",\n        newValues: { fromUserId, toUserId, amount, description },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({ message: \"Funds transferred successfully\" });\n    } catch (error) {\n      console.error(\"Fund transfer error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== SAVED NUMBERS ROUTES =====\n\n  // Get user's saved numbers\n  app.get(\"/api/saved-numbers\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const savedNumbers = await storage.getSavedNumbersByUser(req.session.user!.id);\n      res.json(savedNumbers);\n    } catch (error) {\n      console.error(\"Get saved numbers error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Save a number\n  app.post(\"/api/saved-numbers\", requireAuth, validateBody(insertSavedNumberSchema), async (req: Request, res: Response) => {\n    try {\n      const savedNumberData = {\n        ...req.body,\n        userId: req.session.user!.id,\n      };\n\n      const savedNumber = await storage.createSavedNumber(savedNumberData);\n      res.status(201).json(savedNumber);\n    } catch (error) {\n      console.error(\"Save number error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== PLAN PERFORMANCE ROUTES =====\n\n  // Get plan performance metrics with sparkline data\n  app.get(\"/api/plans/:id/performance\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const planId = parseInt(req.params.id);\n      const days = parseInt(req.query.days as string) || 30;\n      \n      const metrics = await storage.getPlanPerformanceMetrics(planId, days);\n      \n      // If no metrics exist, generate sample data\n      if (metrics.length === 0) {\n        await storage.updatePlanPerformanceMetrics(planId);\n        const newMetrics = await storage.getPlanPerformanceMetrics(planId, days);\n        return res.json(newMetrics);\n      }\n      \n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Get plan performance error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update plan performance metrics\n  app.post(\"/api/plans/:id/performance/update\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const planId = parseInt(req.params.id);\n      await storage.updatePlanPerformanceMetrics(planId);\n      res.json({ message: \"Performance metrics updated successfully\" });\n    } catch (error) {\n      console.error(\"Update plan performance error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ===== ANALYTICS ROUTES =====\n\n  // Analytics overview for admin dashboard\n  app.get(\"/api/analytics/overview\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const analytics = await storage.getAnalyticsOverview();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Get analytics overview error:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics overview\" });\n    }\n  });\n\n  // Daily activation analytics by carrier\n  app.get(\"/api/analytics/daily-activations\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const activations = await storage.getDailyActivationsByCarrier(days);\n      res.json(activations);\n    } catch (error) {\n      console.error(\"Get daily activations analytics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily activations analytics\" });\n    }\n  });\n\n  // Daily recharge analytics by carrier\n  app.get(\"/api/analytics/daily-recharges\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const recharges = await storage.getDailyRechargesByCarrier(days);\n      res.json(recharges);\n    } catch (error) {\n      console.error(\"Get daily recharges analytics error:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily recharges analytics\" });\n    }\n  });\n\n  // ===== DOWNLOADABLE REPORTS =====\n\n  // Download daily report\n  app.get(\"/api/reports/daily/:date\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const reportDate = req.params.date;\n      \n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(reportDate)) {\n        return res.status(400).json({ message: \"Invalid date format. Use YYYY-MM-DD\" });\n      }\n\n      const reportData = await storage.generateDailyReport(reportDate);\n      \n      // Set headers for JSON download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"daily-report-${reportDate}.json\"`);\n      \n      res.json(reportData);\n    } catch (error) {\n      console.error(\"Daily report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate daily report\" });\n    }\n  });\n\n  // Download monthly report\n  app.get(\"/api/reports/monthly/:year/:month\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Validate year and month\n      if (isNaN(year) || isNaN(month) || month < 1 || month > 12) {\n        return res.status(400).json({ message: \"Invalid year or month\" });\n      }\n\n      const reportData = await storage.generateMonthlyReport(year, month);\n      \n      // Set headers for JSON download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"monthly-report-${year}-${month.toString().padStart(2, '0')}.json\"`);\n      \n      res.json(reportData);\n    } catch (error) {\n      console.error(\"Monthly report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate monthly report\" });\n    }\n  });\n\n  // Download daily report as CSV\n  app.get(\"/api/reports/daily/:date/csv\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const reportDate = req.params.date;\n      \n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(reportDate)) {\n        return res.status(400).json({ message: \"Invalid date format. Use YYYY-MM-DD\" });\n      }\n\n      const reportData = await storage.generateDailyReport(reportDate);\n      \n      // Generate CSV content\n      let csvContent = `Daily Report - ${reportDate}\\n`;\n      csvContent += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      \n      // Summary section\n      csvContent += `SUMMARY\\n`;\n      csvContent += `Total Activations,${reportData.summary.totalActivations}\\n`;\n      csvContent += `Total Recharges,${reportData.summary.totalRecharges}\\n`;\n      csvContent += `Total Revenue,$${reportData.summary.totalRevenue.toFixed(2)}\\n`;\n      csvContent += `Total Commissions,$${reportData.summary.totalCommissions.toFixed(2)}\\n\\n`;\n      \n      // Activations by carrier\n      csvContent += `ACTIVATIONS BY CARRIER\\n`;\n      csvContent += `Carrier,Count\\n`;\n      csvContent += `Nexitel Blue,${reportData.activations.nexitelBlue.length}\\n`;\n      csvContent += `Nexitel Purple,${reportData.activations.nexitelPurple.length}\\n`;\n      csvContent += `AT&T,${reportData.activations.att.length}\\n\\n`;\n      \n      // Recharges by carrier\n      csvContent += `RECHARGES BY CARRIER\\n`;\n      csvContent += `Carrier,Count\\n`;\n      csvContent += `Nexitel Blue,${reportData.recharges.nexitelBlue.length}\\n`;\n      csvContent += `Nexitel Purple,${reportData.recharges.nexitelPurple.length}\\n`;\n      csvContent += `AT&T,${reportData.recharges.att.length}\\n`;\n      csvContent += `Global Recharge,${reportData.recharges.globalRecharge.length}\\n`;\n      csvContent += `USA Carriers,${reportData.recharges.usaCarriers.length}\\n\\n`;\n      \n      // Transactions detail\n      if (reportData.transactions.length > 0) {\n        csvContent += `TRANSACTION DETAILS\\n`;\n        csvContent += `Time,Phone Number,Carrier,Amount,Status\\n`;\n        reportData.transactions.forEach((transaction: any) => {\n          csvContent += `${new Date(transaction.createdAt).toLocaleString()},${transaction.phoneNumber || 'N/A'},${transaction.carrier || 'N/A'},$${transaction.totalAmount || '0.00'},${transaction.status || 'N/A'}\\n`;\n        });\n      }\n\n      // Set headers for CSV download\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"daily-report-${reportDate}.csv\"`);\n      \n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Daily CSV report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate daily CSV report\" });\n    }\n  });\n\n  // Download monthly report as CSV\n  app.get(\"/api/reports/monthly/:year/:month/csv\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Validate year and month\n      if (isNaN(year) || isNaN(month) || month < 1 || month > 12) {\n        return res.status(400).json({ message: \"Invalid year or month\" });\n      }\n\n      const reportData = await storage.generateMonthlyReport(year, month);\n      \n      // Generate CSV content\n      let csvContent = `Monthly Report - ${reportData.reportPeriod}\\n`;\n      csvContent += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      \n      // Summary section\n      csvContent += `SUMMARY\\n`;\n      csvContent += `Total Activations,${reportData.summary.totalActivations}\\n`;\n      csvContent += `Total Recharges,${reportData.summary.totalRecharges}\\n`;\n      csvContent += `Total Revenue,$${reportData.summary.totalRevenue.toFixed(2)}\\n`;\n      csvContent += `Total Commissions,$${reportData.summary.totalCommissions.toFixed(2)}\\n`;\n      csvContent += `Total Users,${reportData.summary.totalUsers}\\n`;\n      csvContent += `Active Retailers,${reportData.summary.activeRetailers}\\n\\n`;\n      \n      // Carrier performance\n      csvContent += `CARRIER PERFORMANCE\\n`;\n      csvContent += `Carrier,Activations,Recharges,Revenue\\n`;\n      csvContent += `Nexitel Blue,${reportData.carrierPerformance.nexitelBlue.activations},${reportData.carrierPerformance.nexitelBlue.recharges},$${reportData.carrierPerformance.nexitelBlue.revenue.toFixed(2)}\\n`;\n      csvContent += `Nexitel Purple,${reportData.carrierPerformance.nexitelPurple.activations},${reportData.carrierPerformance.nexitelPurple.recharges},$${reportData.carrierPerformance.nexitelPurple.revenue.toFixed(2)}\\n`;\n      csvContent += `AT&T,${reportData.carrierPerformance.att.activations},${reportData.carrierPerformance.att.recharges},$${reportData.carrierPerformance.att.revenue.toFixed(2)}\\n`;\n      csvContent += `Global Recharge,0,${reportData.carrierPerformance.globalRecharge.recharges},$${reportData.carrierPerformance.globalRecharge.revenue.toFixed(2)}\\n`;\n      csvContent += `USA Carriers,0,${reportData.carrierPerformance.usaCarriers.recharges},$${reportData.carrierPerformance.usaCarriers.revenue.toFixed(2)}\\n\\n`;\n      \n      // Daily breakdown\n      csvContent += `DAILY BREAKDOWN\\n`;\n      csvContent += `Date,Activations,Recharges,Revenue\\n`;\n      reportData.dailyBreakdown.forEach((day: any) => {\n        csvContent += `${day.date},${day.activations},${day.recharges},$${day.revenue.toFixed(2)}\\n`;\n      });\n      \n      // Commission summary\n      if (reportData.commissionSummary.length > 0) {\n        csvContent += `\\nCOMMISSION SUMMARY\\n`;\n        csvContent += `Retailer ID,Total Commission,Transaction Count\\n`;\n        reportData.commissionSummary.forEach((commission: any) => {\n          csvContent += `${commission.retailerId},$${commission.totalCommission.toFixed(2)},${commission.transactionCount}\\n`;\n        });\n      }\n\n      // Set headers for CSV download\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"monthly-report-${year}-${month.toString().padStart(2, '0')}.csv\"`);\n      \n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Monthly CSV report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate monthly CSV report\" });\n    }\n  });\n\n  // ===== WALLET TRANSACTION REPORTS =====\n\n  // Download daily wallet transaction report\n  app.get(\"/api/reports/wallet/daily/:date\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const reportDate = req.params.date;\n      \n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(reportDate)) {\n        return res.status(400).json({ message: \"Invalid date format. Use YYYY-MM-DD\" });\n      }\n\n      const walletData = await storage.generateDailyWalletReport(reportDate);\n      \n      // Set headers for JSON download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"wallet-transactions-${reportDate}.json\"`);\n      \n      res.json(walletData);\n    } catch (error) {\n      console.error(\"Daily wallet report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate daily wallet report\" });\n    }\n  });\n\n  // Download monthly wallet transaction report\n  app.get(\"/api/reports/wallet/monthly/:year/:month\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Validate year and month\n      if (isNaN(year) || isNaN(month) || month < 1 || month > 12) {\n        return res.status(400).json({ message: \"Invalid year or month\" });\n      }\n\n      const walletData = await storage.generateMonthlyWalletReport(year, month);\n      \n      // Set headers for JSON download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"wallet-transactions-${year}-${month.toString().padStart(2, '0')}.json\"`);\n      \n      res.json(walletData);\n    } catch (error) {\n      console.error(\"Monthly wallet report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate monthly wallet report\" });\n    }\n  });\n\n  // Download daily wallet transaction report as CSV\n  app.get(\"/api/reports/wallet/daily/:date/csv\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const reportDate = req.params.date;\n      \n      // Validate date format\n      if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(reportDate)) {\n        return res.status(400).json({ message: \"Invalid date format. Use YYYY-MM-DD\" });\n      }\n\n      const walletData = await storage.generateDailyWalletReport(reportDate);\n      \n      // Generate CSV content\n      let csvContent = `Daily Wallet Transactions Report - ${reportDate}\\n`;\n      csvContent += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      \n      // Summary section\n      csvContent += `SUMMARY\\n`;\n      csvContent += `Total Transactions,${walletData.summary.totalTransactions}\\n`;\n      csvContent += `Total Amount,$${walletData.summary.totalAmount.toFixed(2)}\\n`;\n      csvContent += `Customer Deposits,$${walletData.summary.customerDeposits.toFixed(2)}\\n`;\n      csvContent += `Admin Adjustments,$${walletData.summary.adminAdjustments.toFixed(2)}\\n`;\n      csvContent += `Retailer Top-ups,$${walletData.summary.retailerTopups.toFixed(2)}\\n\\n`;\n      \n      // Transaction details\n      if (walletData.transactions.length > 0) {\n        csvContent += `TRANSACTION DETAILS\\n`;\n        csvContent += `Time,User ID,Username,Type,Amount,Purpose,Admin User,Notes\\n`;\n        walletData.transactions.forEach((transaction: any) => {\n          csvContent += `${new Date(transaction.createdAt).toLocaleString()},${transaction.userId || 'N/A'},${transaction.username || 'N/A'},${transaction.type || 'N/A'},$${transaction.amount || '0.00'},\"${transaction.purpose || 'N/A'}\",\"${transaction.adminUser || 'N/A'}\",\"${transaction.notes || 'N/A'}\"\\n`;\n        });\n      }\n\n      // Set headers for CSV download\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"wallet-transactions-${reportDate}.csv\"`);\n      \n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Daily wallet CSV report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate daily wallet CSV report\" });\n    }\n  });\n\n  // Download monthly wallet transaction report as CSV\n  app.get(\"/api/reports/wallet/monthly/:year/:month/csv\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Validate year and month\n      if (isNaN(year) || isNaN(month) || month < 1 || month > 12) {\n        return res.status(400).json({ message: \"Invalid year or month\" });\n      }\n\n      const walletData = await storage.generateMonthlyWalletReport(year, month);\n      \n      // Generate CSV content\n      let csvContent = `Monthly Wallet Transactions Report - ${walletData.reportPeriod}\\n`;\n      csvContent += `Generated: ${new Date().toLocaleString()}\\n\\n`;\n      \n      // Summary section\n      csvContent += `SUMMARY\\n`;\n      csvContent += `Total Transactions,${walletData.summary.totalTransactions}\\n`;\n      csvContent += `Total Amount,$${walletData.summary.totalAmount.toFixed(2)}\\n`;\n      csvContent += `Customer Deposits,$${walletData.summary.customerDeposits.toFixed(2)}\\n`;\n      csvContent += `Admin Adjustments,$${walletData.summary.adminAdjustments.toFixed(2)}\\n`;\n      csvContent += `Retailer Top-ups,$${walletData.summary.retailerTopups.toFixed(2)}\\n`;\n      csvContent += `Unique Users,${walletData.summary.uniqueUsers}\\n\\n`;\n      \n      // Daily breakdown\n      csvContent += `DAILY BREAKDOWN\\n`;\n      csvContent += `Date,Transactions,Total Amount,Customer Deposits,Admin Adjustments,Retailer Top-ups\\n`;\n      walletData.dailyBreakdown.forEach((day: any) => {\n        csvContent += `${day.date},${day.transactions},$${day.totalAmount.toFixed(2)},$${day.customerDeposits.toFixed(2)},$${day.adminAdjustments.toFixed(2)},$${day.retailerTopups.toFixed(2)}\\n`;\n      });\n      \n      // User activity summary\n      if (walletData.userActivity.length > 0) {\n        csvContent += `\\nUSER ACTIVITY SUMMARY\\n`;\n        csvContent += `User ID,Username,Transaction Count,Total Amount,Last Transaction\\n`;\n        walletData.userActivity.forEach((user: any) => {\n          csvContent += `${user.userId},\"${user.username}\",${user.transactionCount},$${user.totalAmount.toFixed(2)},${new Date(user.lastTransaction).toLocaleString()}\\n`;\n        });\n      }\n\n      // Set headers for CSV download\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"wallet-transactions-${year}-${month.toString().padStart(2, '0')}.csv\"`);\n      \n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Monthly wallet CSV report generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate monthly wallet CSV report\" });\n    }\n  });\n\n  // Health check\n  app.get(\"/api/health\", (req: Request, res: Response) => {\n    res.json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || \"development\"\n    });\n  });\n\n  // Get all Nexitel activations\n  app.get(\"/api/nexitel-activations\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const currentUser = req.session?.user;\n      let activations;\n      \n      if (currentUser?.role === 'retailer') {\n        // Retailers see only their own activations\n        activations = await storage.getNexitelActivationsByUser(currentUser.id);\n      } else {\n        // Admin and employees see all activations\n        activations = await storage.getAllNexitelActivations();\n      }\n      \n      res.json(activations);\n    } catch (error) {\n      console.error(\"Get Nexitel activations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch Nexitel activations\" });\n    }\n  });\n\n  // ===== NEXITEL ACTIVATION ROUTES =====\n\n  // Nexitel activation endpoint\n  app.post(\"/api/nexitel/activate\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const activationData = req.body;\n      \n      // Validate required fields\n      const requiredFields = ['iccid', 'simType', 'nexitelNetwork', 'plan', 'planDuration', 'firstName', 'lastName', 'address', 'state', 'zipCode', 'email'];\n      const missingFields = requiredFields.filter(field => !activationData[field]);\n      \n      if (missingFields.length > 0) {\n        return res.status(400).json({ \n          message: `Missing required fields: ${missingFields.join(', ')}` \n        });\n      }\n\n      // Create activation record\n      const activationRecord = {\n        userId: req.session.user!.id,\n        iccid: activationData.iccid,\n        mobileNumber: \"\", // Will be assigned by carrier\n        sku: `NEXITEL-${activationData.nexitelNetwork.toUpperCase()}-${activationData.plan.toUpperCase()}`,\n        carrier: activationData.nexitelNetwork,\n        serviceType: \"nexitel\",\n        customerName: `${activationData.firstName} ${activationData.lastName}`,\n        customerAddress: `${activationData.address}, ${activationData.state} ${activationData.zipCode}`,\n        city: \"\", // Can be extracted from address if needed\n        state: activationData.state,\n        zip: activationData.zipCode,\n        email: activationData.email,\n        status: \"active\",\n        activationFee: \"0.00\", // Set based on plan\n        dateOfActivation: new Date(),\n      };\n\n      const activation = await storage.createActivationRecord(activationRecord);\n\n      // Log audit trail\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"nexitel_activation\",\n        entityId: activation.id.toString(),\n        action: \"create\",\n        newValues: activationRecord,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json({ \n        message: \"Nexitel activation completed successfully\",\n        activation,\n        assignedPhoneNumber: \"Will be provided by carrier\" // Placeholder\n      });\n    } catch (error) {\n      console.error(\"Nexitel activation error:\", error);\n      res.status(500).json({ message: \"Failed to complete Nexitel activation\" });\n    }\n  });\n\n  // ===== NEXITEL WIFI CALLING ROUTES =====\n\n  // Enable WiFi Calling for single customer\n  app.post(\"/api/nexitel/wifi-calling/enable\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { iccid, customerName, phoneNumber, emergencyAddress } = req.body;\n      \n      // Validate required fields\n      if (!iccid || !customerName || !phoneNumber || !emergencyAddress) {\n        return res.status(400).json({ message: \"All fields including emergency address are required\" });\n      }\n\n      // Create WiFi calling activation record\n      const wifiCallingRecord = {\n        userId: req.session.user!.id,\n        iccid,\n        mobileNumber: phoneNumber,\n        sku: \"WIFI-CALLING-ENABLE\",\n        carrier: \"nexitel\",\n        serviceType: \"nexitel\",\n        customerName,\n        customerAddress: `${emergencyAddress.street}, ${emergencyAddress.city}, ${emergencyAddress.state} ${emergencyAddress.zipCode}`,\n        city: emergencyAddress.city,\n        state: emergencyAddress.state,\n        zip: emergencyAddress.zipCode,\n        email: \"customer@nexitel.com\", // Default email for WiFi calling\n        status: \"active\",\n        activationFee: \"0.00\",\n        dateOfActivation: new Date(),\n      };\n\n      const activation = await storage.createActivationRecord(wifiCallingRecord);\n\n      // Log audit trail\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"wifi_calling\",\n        entityId: activation.id.toString(),\n        action: \"enable\",\n        newValues: wifiCallingRecord,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json({ \n        message: \"WiFi Calling enabled successfully\",\n        activation \n      });\n    } catch (error) {\n      console.error(\"WiFi Calling enable error:\", error);\n      res.status(500).json({ message: \"Failed to enable WiFi Calling\" });\n    }\n  });\n\n  // Bulk enable WiFi Calling via CSV upload\n  app.post(\"/api/nexitel/wifi-calling/bulk-enable\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      // Handle multipart form data (CSV file upload)\n      const csvContent = req.body.csvData; // This would be processed by multer middleware\n      \n      if (!csvContent) {\n        return res.status(400).json({ message: \"CSV file is required\" });\n      }\n\n      // Parse CSV content (simplified - in real implementation, use proper CSV parser)\n      const lines = csvContent.split('\\n').filter((line: string) => line.trim());\n      const headers = lines[0].split(',').map((h: string) => h.trim());\n      const results = [];\n\n      // Expected headers: ICCID, CustomerName, PhoneNumber, Street, City, State, ZipCode\n      const requiredHeaders = ['ICCID', 'CustomerName', 'PhoneNumber', 'Street', 'City', 'State', 'ZipCode'];\n      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\n      \n      if (missingHeaders.length > 0) {\n        return res.status(400).json({ \n          message: `Missing required CSV headers: ${missingHeaders.join(', ')}` \n        });\n      }\n\n      for (let i = 1; i < lines.length; i++) {\n        try {\n          const values = lines[i].split(',').map((v: string) => v.trim());\n          const row: any = {};\n          headers.forEach((header: string, index: number) => {\n            row[header] = values[index];\n          });\n\n          const wifiCallingRecord = {\n            userId: req.session.user!.id,\n            iccid: row.ICCID,\n            mobileNumber: row.PhoneNumber,\n            sku: \"WIFI-CALLING-ENABLE\",\n            carrier: \"nexitel\",\n            serviceType: \"nexitel\",\n            customerName: row.CustomerName,\n            customerAddress: `${row.Street}, ${row.City}, ${row.State} ${row.ZipCode}`,\n            city: row.City,\n            state: row.State,\n            zip: row.ZipCode,\n            email: \"customer@nexitel.com\", // Default email for WiFi calling\n            status: \"active\",\n            activationFee: \"0.00\",\n            dateOfActivation: new Date(),\n          };\n\n          const activation = await storage.createActivationRecord(wifiCallingRecord);\n          \n          results.push({\n            success: true,\n            iccid: row.ICCID,\n            customerName: row.CustomerName,\n            phoneNumber: row.PhoneNumber,\n            activationId: activation.id\n          });\n\n        } catch (error) {\n          results.push({\n            success: false,\n            iccid: lines[i].split(',')[0],\n            customerName: lines[i].split(',')[1] || 'Unknown',\n            error: error instanceof Error ? error.message : 'Processing failed'\n          });\n        }\n      }\n\n      // Log bulk operation\n      await storage.createAuditLog({\n        userId: req.session.user!.id,\n        entityType: \"bulk_wifi_calling\",\n        entityId: `bulk-${Date.now()}`,\n        action: \"bulk_enable\",\n        newValues: { processedCount: results.length, successCount: results.filter(r => r.success).length },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(results);\n    } catch (error) {\n      console.error(\"Bulk WiFi Calling enable error:\", error);\n      res.status(500).json({ message: \"Failed to process bulk WiFi Calling enable\" });\n    }\n  });\n\n  // Nexitel Bulk Activation routes\n  app.post(\"/api/nexitel/bulk-activation/upload\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { csvData, carrier } = req.body;\n      \n      if (!csvData || !carrier) {\n        return res.status(400).json({ error: \"CSV data and carrier selection required\" });\n      }\n\n      // Validate carrier\n      if (![\"nexitel_blue\", \"nexitel_purple\"].includes(carrier)) {\n        return res.status(400).json({ error: \"Invalid carrier selection\" });\n      }\n\n      // In production, this would process the CSV data and make actual API calls to Nexitel\n      // For now, we'll return a success response for integration purposes\n      const user = req.session.user!;\n      \n      await storage.createAuditLog({\n        userId: user.id,\n        entityType: \"bulk_activation\",\n        entityId: `nexitel-${carrier}`,\n        action: \"create\",\n        newValues: { carrier, rowsProcessed: Array.isArray(csvData) ? csvData.length : 0 },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({\n        message: \"Bulk activation initiated successfully\",\n        carrier,\n        rowsProcessed: Array.isArray(csvData) ? csvData.length : 0\n      });\n    } catch (error) {\n      console.error(\"Error processing bulk activation:\", error);\n      res.status(500).json({ error: \"Failed to process bulk activation\" });\n    }\n  });\n\n  // AT&T Bulk Activation routes\n  app.post(\"/api/att/bulk-activation\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const { batchName, serviceType, employeeId } = req.body;\n      const user = req.session.user!;\n      \n      if (!batchName || !serviceType || !employeeId) {\n        return res.status(400).json({ error: \"Batch name, service type, and employee ID are required\" });\n      }\n\n      // Validate service type\n      if (![\"prepaid\", \"postpaid\"].includes(serviceType)) {\n        return res.status(400).json({ error: \"Invalid service type\" });\n      }\n\n      // Create mock processing status for demo purposes\n      const batchId = `att-batch-${Date.now()}`;\n      const mockBulkStatus = {\n        id: batchId,\n        batchName,\n        totalRecords: 3, // Mock data - in production this would be from CSV parsing\n        processedRecords: 0,\n        successfulActivations: 0,\n        failedActivations: 0,\n        status: \"processing\" as const,\n        errors: [] as string[]\n      };\n\n      // Simulate processing progress\n      setTimeout(() => {\n        mockBulkStatus.processedRecords = 3;\n        mockBulkStatus.successfulActivations = 2;\n        mockBulkStatus.failedActivations = 1;\n        mockBulkStatus.status = \"completed\";\n        mockBulkStatus.errors = [\"Invalid ICCID format for record 3\"];\n      }, 3000);\n\n      // Log bulk operation\n      await storage.createAuditLog({\n        userId: user.id,\n        entityType: \"att_bulk_activation\",\n        entityId: batchId,\n        action: \"bulk_activation_initiated\",\n        newValues: { \n          batchName, \n          serviceType, \n          employeeId,\n          totalRecords: mockBulkStatus.totalRecords \n        },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(mockBulkStatus);\n    } catch (error) {\n      console.error(\"Error processing AT&T bulk activation:\", error);\n      res.status(500).json({ error: \"Failed to process AT&T bulk activation\" });\n    }\n  });\n\n  // ===== ACTIVITY TRACKING & SEARCH ROUTES =====\n\n  // Search activities by ICCID\n  app.get(\"/api/activities/search/iccid/:iccid\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { iccid } = req.params;\n      const results = await storage.searchActivitiesByICCID(iccid);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Search by ICCID error:\", error);\n      res.status(500).json({ message: \"Failed to search activities\" });\n    }\n  });\n\n  // Search activities by mobile number\n  app.get(\"/api/activities/search/mobile/:mobileNumber\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { mobileNumber } = req.params;\n      const results = await storage.searchActivitiesByMobileNumber(mobileNumber);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Search by mobile number error:\", error);\n      res.status(500).json({ message: \"Failed to search activities\" });\n    }\n  });\n\n  // Quick search by ICCID\n  app.get(\"/api/activities/search/iccid/:iccid\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { iccid } = req.params;\n      const results = await storage.searchActivitiesByICCID(iccid);\n      res.json(results);\n    } catch (error) {\n      console.error(\"ICCID search error:\", error);\n      res.status(500).json({ message: \"Failed to search by ICCID\" });\n    }\n  });\n\n  // Quick search by mobile number\n  app.get(\"/api/activities/search/mobile/:mobileNumber\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { mobileNumber } = req.params;\n      const results = await storage.searchActivitiesByMobileNumber(mobileNumber);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Mobile number search error:\", error);\n      res.status(500).json({ message: \"Failed to search by mobile number\" });\n    }\n  });\n\n  // Advanced activity search\n  app.post(\"/api/activities/search\", requireAuth, validateBody(activitySearchSchema), async (req: Request, res: Response) => {\n    try {\n      const searchRequest = req.body;\n      const results = await storage.searchActivities(searchRequest);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Advanced search error:\", error);\n      res.status(500).json({ message: \"Failed to search activities\" });\n    }\n  });\n\n  // ===== REPORT GENERATION ROUTES =====\n\n  // Generate activation report\n  app.post(\"/api/reports/activation\", requireAuth, validateBody(reportGenerationSchema), async (req: Request, res: Response) => {\n    try {\n      const reportRequest = req.body;\n      const currentUser = req.session?.user;\n      \n      // For retailers, limit reports to their own data\n      if (currentUser?.role === 'retailer') {\n        reportRequest.userId = currentUser.id;\n      }\n      \n      const activations = await storage.generateActivationReport(reportRequest);\n      \n      // Convert to CSV format\n      if (reportRequest.format === 'csv') {\n        const csv = [\n          'ID,ICCID,IMEI,Mobile Number,SKU,Carrier,Service Type,Customer Name,Customer Address,City,State,ZIP,Email,Comments,Auto Renew,Date of Activation,Status,Activation Fee,Commission,Balance After,Created At',\n          ...activations.map(a => \n            `${a.id},\"${a.iccid}\",\"${a.imei || ''}\",\"${a.mobileNumber || ''}\",\"${a.sku}\",\"${a.carrier}\",\"${a.serviceType}\",\"${a.customerName}\",\"${a.customerAddress}\",\"${a.city || ''}\",\"${a.state || ''}\",\"${a.zip || ''}\",\"${a.email}\",\"${a.commentsNotes || ''}\",\"${a.autoRenew || ''}\",\"${a.dateOfActivation ? new Date(a.dateOfActivation).toISOString().split('T')[0] : ''}\",\"${a.status}\",\"${a.activationFee}\",\"${a.commission}\",\"${a.balanceAfter}\",\"${new Date(a.createdAt!).toISOString()}\"`\n          )\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=activation_report_${new Date().toISOString().split('T')[0]}.csv`);\n        res.send(csv);\n      } else {\n        res.json(activations);\n      }\n    } catch (error) {\n      console.error(\"Generate activation report error:\", error);\n      res.status(500).json({ message: \"Failed to generate activation report\" });\n    }\n  });\n\n  // Generate recharge report\n  app.post(\"/api/reports/recharge\", requireAuth, validateBody(reportGenerationSchema), async (req: Request, res: Response) => {\n    try {\n      const reportRequest = req.body;\n      const currentUser = req.session?.user;\n      \n      // For retailers, limit reports to their own data\n      if (currentUser?.role === 'retailer') {\n        reportRequest.userId = currentUser.id;\n      }\n      \n      const recharges = await storage.generateRechargeReport(reportRequest);\n      \n      // Convert to CSV format\n      if (reportRequest.format === 'csv') {\n        const csv = [\n          'ID,Mobile Number,ICCID,Country,Carrier,Amount,Service Fee,Total Amount,Commission,Balance After,Status,Recharge Type,Transaction ID,Created At',\n          ...recharges.map(r => \n            `${r.id},\"${r.mobileNumber}\",\"${r.iccid || ''}\",\"${r.country}\",\"${r.carrier}\",\"${r.amount}\",\"${r.serviceFee}\",\"${r.totalAmount}\",\"${r.commission}\",\"${r.balanceAfter}\",\"${r.status}\",\"${r.rechargeType}\",\"${r.transactionId || ''}\",\"${new Date(r.createdAt!).toISOString()}\"`\n          )\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=recharge_report_${new Date().toISOString().split('T')[0]}.csv`);\n        res.send(csv);\n      } else {\n        res.json(recharges);\n      }\n    } catch (error) {\n      console.error(\"Generate recharge report error:\", error);\n      res.status(500).json({ message: \"Failed to generate recharge report\" });\n    }\n  });\n\n  // Generate commission report\n  app.post(\"/api/reports/commission\", requireAuth, validateBody(reportGenerationSchema), async (req: Request, res: Response) => {\n    try {\n      const reportRequest = req.body;\n      const currentUser = req.session?.user;\n      \n      // For retailers, limit reports to their own data\n      if (currentUser?.role === 'retailer') {\n        reportRequest.userId = currentUser.id;\n      }\n      \n      const commissions = await storage.generateCommissionReport(reportRequest);\n      \n      // Convert to CSV format\n      if (reportRequest.format === 'csv') {\n        const csv = [\n          'ID,Entity Type,Entity ID,Commission Amount,Commission Rate,Base Amount,Status,Created At',\n          ...commissions.map(c => \n            `${c.id},\"${c.entityType}\",\"${c.entityId}\",\"${c.commissionAmount}\",\"${c.commissionRate}\",\"${c.baseAmount}\",\"${c.status}\",\"${new Date(c.createdAt!).toISOString()}\"`\n          )\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=commission_report_${new Date().toISOString().split('T')[0]}.csv`);\n        res.send(csv);\n      } else {\n        res.json(commissions);\n      }\n    } catch (error) {\n      console.error(\"Generate commission report error:\", error);\n      res.status(500).json({ message: \"Failed to generate commission report\" });\n    }\n  });\n\n  // Generate wallet topup report\n  app.post(\"/api/reports/wallet-topup\", requireAuth, validateBody(reportGenerationSchema), async (req: Request, res: Response) => {\n    try {\n      const reportRequest = req.body;\n      const currentUser = req.session?.user;\n      \n      // For retailers, limit reports to their own data\n      if (currentUser?.role === 'retailer') {\n        reportRequest.userId = currentUser.id;\n      }\n      \n      const topups = await storage.generateWalletTopupReport(reportRequest);\n      \n      // Convert to CSV format\n      if (reportRequest.format === 'csv') {\n        const csv = [\n          'ID,Amount,Method,Reference,Balance Before,Balance After,Status,Notes,Created At',\n          ...topups.map(t => \n            `${t.id},\"${t.amount}\",\"${t.method}\",\"${t.reference || ''}\",\"${t.balanceBefore}\",\"${t.balanceAfter}\",\"${t.status}\",\"${t.notes || ''}\",\"${new Date(t.createdAt!).toISOString()}\"`\n          )\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=wallet_topup_report_${new Date().toISOString().split('T')[0]}.csv`);\n        res.send(csv);\n      } else {\n        res.json(topups);\n      }\n    } catch (error) {\n      console.error(\"Generate wallet topup report error:\", error);\n      res.status(500).json({ message: \"Failed to generate wallet topup report\" });\n    }\n  });\n\n  // Object Storage Routes for Document Management\n\n  // Get upload URL for documents\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Serve protected documents (admin access only)\n  app.get(\"/objects/:objectPath(*)\", requireAuth, async (req, res) => {\n    const user = req.session.user;\n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n      return res.status(500).json({ error: \"Server error\" });\n    }\n  });\n\n  // Create retailer document record\n  app.post(\"/api/retailer-documents\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user;\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ error: \"Admin access required\" });\n      }\n\n      const { retailerId, documentType, fileName, originalFileName, filePath, fileSize, mimeType } = req.body;\n      \n      if (!retailerId || !documentType || !fileName || !filePath) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const normalizedPath = objectStorageService.normalizeObjectEntityPath(filePath);\n\n      // Set ACL policy for the document (private, admin access)\n      await objectStorageService.trySetObjectEntityAclPolicy(filePath, {\n        owner: user.id.toString(),\n        visibility: \"private\",\n      });\n\n      const document = await storage.createRetailerDocument({\n        retailerId,\n        documentType,\n        fileName,\n        originalFileName,\n        filePath: normalizedPath,\n        fileSize,\n        mimeType,\n        uploadedBy: user.id,\n        status: 'pending',\n      });\n\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error creating retailer document:\", error);\n      res.status(500).json({ error: \"Failed to save document\" });\n    }\n  });\n\n  // Get retailer documents\n  app.get(\"/api/retailer-documents/:retailerId\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user;\n      const retailerId = parseInt(req.params.retailerId);\n      \n      if (!user || (user.role !== 'admin' && user.id !== retailerId)) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const documents = await storage.getRetailerDocuments(retailerId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching retailer documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Update document status (admin only)\n  app.patch(\"/api/retailer-documents/:documentId/status\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const documentId = parseInt(req.params.documentId);\n      const { status, notes } = req.body;\n      \n      if (!status || !['pending', 'approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n\n      const document = await storage.updateRetailerDocumentStatus(documentId, status, notes);\n      \n      if (!document) {\n        return res.status(404).json({ error: \"Document not found\" });\n      }\n\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error updating document status:\", error);\n      res.status(500).json({ error: \"Failed to update document status\" });\n    }\n  });\n\n  // ===== RETAILER PERMISSIONS ROUTES =====\n\n  // Create retailer permissions\n  app.post(\"/api/retailer-permissions\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const permissionData = {\n        ...req.body,\n        createdBy: user.id,\n        updatedBy: user.id\n      };\n\n      const permission = await storage.createRetailerPermission(permissionData);\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error creating retailer permissions:\", error);\n      res.status(500).json({ error: \"Failed to create permissions\" });\n    }\n  });\n\n  // Get retailer permissions\n  app.get(\"/api/retailer-permissions/:retailerId\", requireAuth, async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const retailerId = parseInt(req.params.retailerId);\n      \n      // Admin can view all permissions, retailers can only view their own\n      if (user.role !== 'admin' && user.id !== retailerId) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const permission = await storage.getRetailerPermission(retailerId);\n      \n      // If no permissions exist, return default (all false)\n      if (!permission) {\n        const defaultPermissions = {\n          retailerId,\n          voipServiceAccess: false,\n          globalRechargeAccess: false,\n          usaRechargeAccess: false,\n          walletFundingAccess: false,\n          maxDailyFunding: \"0.00\",\n          maxMonthlyFunding: \"0.00\",\n          nexitelActivationAccess: false,\n          simSwapAccess: false,\n          portInAccess: false,\n          reportAccess: true,\n          bulkActivationAccess: false,\n          customLimits: null,\n          notes: null\n        };\n        return res.json(defaultPermissions);\n      }\n\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error fetching retailer permissions:\", error);\n      res.status(500).json({ error: \"Failed to fetch permissions\" });\n    }\n  });\n\n  // Update retailer permissions\n  app.patch(\"/api/retailer-permissions/:retailerId\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const retailerId = parseInt(req.params.retailerId);\n      \n      const updateData = {\n        ...req.body,\n        updatedBy: user.id\n      };\n\n      // Remove retailerId from update data if present\n      delete updateData.retailerId;\n\n      let permission = await storage.updateRetailerPermission(retailerId, updateData);\n      \n      // If no permissions exist, create them\n      if (!permission) {\n        const newPermissionData = {\n          retailerId,\n          ...updateData,\n          createdBy: user.id\n        };\n        permission = await storage.createRetailerPermission(newPermissionData);\n      }\n\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error updating retailer permissions:\", error);\n      res.status(500).json({ error: \"Failed to update permissions\" });\n    }\n  });\n\n  // Delete retailer permissions\n  app.delete(\"/api/retailer-permissions/:retailerId\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const retailerId = parseInt(req.params.retailerId);\n      const success = await storage.deleteRetailerPermission(retailerId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Permissions not found\" });\n      }\n\n      res.json({ success: true, message: \"Permissions deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting retailer permissions:\", error);\n      res.status(500).json({ error: \"Failed to delete permissions\" });\n    }\n  });\n\n  // ===== WALLET PERMISSIONS ROUTES (ALIAS FOR RETAILER PERMISSIONS) =====\n  \n  // Get all wallet permissions (for admin wallet permissions page)\n  app.get(\"/api/admin/wallet-permissions\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const permissions = await storage.getAllRetailerPermissions();\n      \n      // Transform the retailer permissions data to match frontend expectations\n      const walletPermissions = permissions.map(permission => ({\n        id: permission.id,\n        userId: permission.retailerId,\n        canAddFunds: permission.walletFundingAccess,\n        maxDailyFunding: permission.maxDailyFunding,\n        maxMonthlyFunding: permission.maxMonthlyFunding,\n        createdAt: permission.createdAt,\n        updatedAt: permission.updatedAt\n      }));\n\n      res.json(walletPermissions);\n    } catch (error) {\n      console.error(\"Error fetching wallet permissions:\", error);\n      res.status(500).json({ error: \"Failed to fetch wallet permissions\" });\n    }\n  });\n\n  // Update wallet permissions by user ID\n  app.put(\"/api/admin/wallet-permissions/:userId\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const user = req.session.user!;\n      const userId = parseInt(req.params.userId);\n      \n      const updateData = {\n        retailerId: userId,\n        walletFundingAccess: req.body.canAddFunds || false,\n        maxDailyFunding: req.body.maxDailyFunding ? req.body.maxDailyFunding.toString() : \"0.00\",\n        maxMonthlyFunding: req.body.maxMonthlyFunding ? req.body.maxMonthlyFunding.toString() : \"0.00\",\n        updatedBy: user.id\n      };\n\n      let permission = await storage.updateRetailerPermission(userId, updateData);\n      \n      // If no permissions exist, create them\n      if (!permission) {\n        const newPermissionData = {\n          ...updateData,\n          createdBy: user.id,\n          voipServiceAccess: false,\n          globalRechargeAccess: false,\n          usaRechargeAccess: false,\n          nexitelActivationAccess: false,\n          simSwapAccess: false,\n          portInAccess: false,\n          reportAccess: true,\n          bulkActivationAccess: false,\n          customLimits: null,\n          notes: null\n        };\n        permission = await storage.createRetailerPermission(newPermissionData);\n      }\n\n      // Transform the response to match the frontend's expected format\n      const walletPermission = {\n        id: permission.id,\n        userId: permission.retailerId,\n        canAddFunds: permission.walletFundingAccess,\n        maxDailyFunding: permission.maxDailyFunding,\n        maxMonthlyFunding: permission.maxMonthlyFunding,\n        createdAt: permission.createdAt,\n        updatedAt: permission.updatedAt\n      };\n\n      res.json(walletPermission);\n    } catch (error) {\n      console.error(\"Error updating wallet permissions:\", error);\n      res.status(500).json({ error: \"Failed to update wallet permissions\" });\n    }\n  });\n\n  // Get wallet permissions for a specific retailer (used by retailer portal)\n  app.get(\"/api/wallet/permissions/:userId\", requireAuth, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const requestingUser = req.session.user!;\n      \n      // Only allow retailers to check their own permissions or admins to check any\n      if (requestingUser.role !== 'admin' && requestingUser.id !== userId) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      const permission = await storage.getRetailerPermission(userId);\n      \n      if (!permission) {\n        // Return default permissions if none exist\n        return res.json({\n          canAddFunds: false,\n          maxDailyFunding: \"0.00\",\n          maxMonthlyFunding: \"0.00\"\n        });\n      }\n      \n      // Transform to include all permissions for retailer dashboard\n      const walletPermission = {\n        canAddFunds: permission.walletFundingAccess,\n        maxDailyFunding: permission.maxDailyFunding,\n        maxMonthlyFunding: permission.maxMonthlyFunding,\n        // Service permissions for dashboard filtering\n        nexitelActivationAccess: permission.nexitelActivationAccess,\n        simSwapAccess: permission.simSwapAccess,\n        portInAccess: permission.portInAccess,\n        usaRechargeAccess: permission.usaRechargeAccess,\n        globalRechargeAccess: permission.globalRechargeAccess,\n        voipServiceAccess: permission.voipServiceAccess,\n        bulkActivationAccess: permission.bulkActivationAccess,\n        reportAccess: permission.reportAccess\n      };\n      \n      res.json(walletPermission);\n    } catch (error) {\n      console.error(\"Error fetching wallet permissions:\", error);\n      res.status(500).json({ error: \"Failed to fetch wallet permissions\" });\n    }\n  });\n\n  // ===== COMMISSION MANAGEMENT ROUTES =====\n\n  // Get all commission groups\n  app.get(\"/api/admin/commission-groups\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const groups = await storage.getAllCommissionGroups();\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Get commission groups error:\", error);\n      res.status(500).json({ message: \"Failed to fetch commission groups\" });\n    }\n  });\n\n  // Create commission group\n  app.post(\"/api/admin/commission-groups\", requireAuth, requireRole([\"admin\"]), validateBody(commissionGroupSchema), async (req: Request, res: Response) => {\n    try {\n      const group = await storage.createCommissionGroup(req.body);\n      res.json(group);\n    } catch (error) {\n      console.error(\"Create commission group error:\", error);\n      res.status(500).json({ message: \"Failed to create commission group\" });\n    }\n  });\n\n  // Update commission group\n  app.patch(\"/api/admin/commission-groups/:id\", requireAuth, requireRole([\"admin\"]), validateBody(commissionGroupSchema), async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const group = await storage.updateCommissionGroup(id, req.body);\n      if (!group) {\n        return res.status(404).json({ message: \"Commission group not found\" });\n      }\n      res.json(group);\n    } catch (error) {\n      console.error(\"Update commission group error:\", error);\n      res.status(500).json({ message: \"Failed to update commission group\" });\n    }\n  });\n\n  // Delete commission group\n  app.delete(\"/api/admin/commission-groups/:id\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteCommissionGroup(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Commission group not found\" });\n      }\n      res.json({ message: \"Commission group deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete commission group error:\", error);\n      res.status(500).json({ message: \"Failed to delete commission group\" });\n    }\n  });\n\n  // Get all commission pricing\n  app.get(\"/api/admin/commission-pricing\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const pricing = await storage.getAllCommissionPricing();\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Get commission pricing error:\", error);\n      res.status(500).json({ message: \"Failed to fetch commission pricing\" });\n    }\n  });\n\n  // Create commission pricing - Fixed validation issue\n  app.post(\"/api/admin/commission-pricing\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      console.log(\"=== COMMISSION PRICING FIXED ROUTE ===\");\n      console.log(\"Raw request body received:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation without schema (proven working solution)\n      const { commissionGroupId, planId, ourCost, sellingPrice } = req.body;\n      \n      if (!commissionGroupId || !planId || ourCost === undefined || sellingPrice === undefined) {\n        console.log(\"Missing required fields validation failed\");\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      if (sellingPrice <= ourCost) {\n        console.log(\"Selling price validation failed\");\n        return res.status(400).json({ message: \"Selling price must be greater than our cost\" });\n      }\n      \n      // Get the plan to extract the customer price (denomination)\n      const plan = await storage.getPlanById(parseInt(planId));\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n      \n      // Parse denomination to get numeric value\n      const customerPrice = parseFloat(plan.denomination.toString().replace('$', ''));\n      \n      // Calculate profit (retailer commission = customer_price - selling_price)\n      const profit = parseFloat((customerPrice - sellingPrice).toFixed(2));\n      console.log(\"Calculated profit:\", profit);\n      console.log(\"Customer price from plan denomination:\", customerPrice);\n      \n      // Convert values to strings to match storage expectations\n      const pricingData = {\n        commissionGroupId: parseInt(commissionGroupId),\n        planId: parseInt(planId),\n        ourCost: ourCost.toString(),\n        sellingPrice: sellingPrice.toString(),\n        customerPrice: customerPrice.toString(),\n        profit: profit.toString(),\n        isActive: true,\n      };\n\n      console.log(\"Final pricing data being sent to storage:\", JSON.stringify(pricingData, null, 2));\n\n      const pricing = await storage.createCommissionPricing(pricingData);\n      console.log(\"Storage returned:\", JSON.stringify(pricing, null, 2));\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Create commission pricing error:\", error);\n      res.status(500).json({ message: \"Failed to create commission pricing\" });\n    }\n  });\n\n  // Get admin plans (for commission management)\n  app.get(\"/api/admin/plans\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const plans = await storage.getAllPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Get admin plans error:\", error);\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  // TEST ROUTE - Commission pricing with different endpoint name\n  app.post(\"/api/admin/commission-pricing-test\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      console.log(\"=== TEST ROUTE - COMMISSION PRICING DEBUG ===\");\n      console.log(\"Raw request body received:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation without schema\n      const { commissionGroupId, planId, ourCost, sellingPrice } = req.body;\n      \n      if (!commissionGroupId || !planId || ourCost === undefined || sellingPrice === undefined) {\n        console.log(\"Missing required fields validation failed\");\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      if (sellingPrice <= ourCost) {\n        console.log(\"Selling price validation failed\");\n        return res.status(400).json({ message: \"Selling price must be greater than our cost\" });\n      }\n      \n      // Calculate profit\n      const profit = parseFloat((sellingPrice - ourCost).toFixed(2));\n      console.log(\"Calculated profit:\", profit);\n      \n      const pricingData = {\n        commissionGroupId: parseInt(commissionGroupId),\n        planId: parseInt(planId),\n        ourCost: ourCost.toString(),\n        sellingPrice: sellingPrice.toString(),\n        profit: profit.toString(),\n        isActive: true,\n      };\n\n      console.log(\"Final pricing data being sent to storage:\", JSON.stringify(pricingData, null, 2));\n\n      const pricing = await storage.createCommissionPricing(pricingData);\n      console.log(\"Storage returned:\", JSON.stringify(pricing, null, 2));\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Test commission pricing error:\", error);\n      res.status(500).json({ message: \"Failed to create commission pricing (test route)\" });\n    }\n  });\n\n  // ===== AT&T SERVICES ROUTES =====\n\n  // Get all AT&T plans (filtered for service_type = 'att')\n  app.get(\"/api/att/plans\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const plans = await storage.getPlansByServiceType(\"att\");\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Get AT&T plans error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T plans\" });\n    }\n  });\n\n  // Create AT&T activation\n  app.post(\"/api/att/activations\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), validateBody(insertAttActivationSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const activationData = {\n        ...req.body,\n        activatedBy: user.id,\n      };\n      \n      const activation = await storage.createAttActivation(activationData);\n      res.json(activation);\n    } catch (error) {\n      console.error(\"Create AT&T activation error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T activation\" });\n    }\n  });\n\n  // Create AT&T data add-on\n  app.post(\"/api/att/data-addon\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), validateBody(insertAttDataAddonSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const dataAddonData = {\n        ...req.body,\n        requestedBy: user.id,\n        status: \"pending\",\n        requestDate: new Date().toISOString(),\n      };\n      \n      const dataAddon = await storage.createAttDataAddon(dataAddonData);\n      \n      await storage.createAuditLog({\n        userId: user.id,\n        entityType: \"att_data_addon\",\n        entityId: dataAddon.id.toString(),\n        action: \"create\",\n        newValues: dataAddon,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n      \n      res.json(dataAddon);\n    } catch (error) {\n      console.error(\"Create AT&T data add-on error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T data add-on\" });\n    }\n  });\n\n  // Get all AT&T activations (admin/employee view)\n  app.get(\"/api/att/activations\", requireAuth, requireRole([\"admin\", \"employee\"]), async (req: Request, res: Response) => {\n    try {\n      const activations = await storage.getAllAttActivations();\n      res.json(activations);\n    } catch (error) {\n      console.error(\"Get AT&T activations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T activations\" });\n    }\n  });\n\n  // Get AT&T activations by user (retailer view)\n  app.get(\"/api/att/activations/my\", requireAuth, requireRole([\"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const activations = await storage.getAttActivationsByUser(user.id);\n      res.json(activations);\n    } catch (error) {\n      console.error(\"Get user AT&T activations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T activations\" });\n    }\n  });\n\n  // Update AT&T activation status\n  app.patch(\"/api/att/activations/:id/status\", requireAuth, requireRole([\"admin\", \"employee\"]), async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status, phoneNumber } = req.body;\n      \n      const activation = await storage.updateAttActivationStatus(id, status, phoneNumber);\n      if (!activation) {\n        return res.status(404).json({ message: \"AT&T activation not found\" });\n      }\n      res.json(activation);\n    } catch (error) {\n      console.error(\"Update AT&T activation status error:\", error);\n      res.status(500).json({ message: \"Failed to update AT&T activation status\" });\n    }\n  });\n\n  // Create AT&T data add-on\n  app.post(\"/api/att/data-addons\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), validateBody(insertAttDataAddonSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const addonData = {\n        ...req.body,\n        soldBy: user.id,\n      };\n      \n      const addon = await storage.createAttDataAddon(addonData);\n      res.json(addon);\n    } catch (error) {\n      console.error(\"Create AT&T data addon error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T data addon\" });\n    }\n  });\n\n  // Get AT&T data add-ons by phone number\n  app.get(\"/api/att/data-addons/:phoneNumber\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const phoneNumber = req.params.phoneNumber;\n      const addons = await storage.getAttDataAddons(phoneNumber);\n      res.json(addons);\n    } catch (error) {\n      console.error(\"Get AT&T data addons error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T data addons\" });\n    }\n  });\n\n  // Create AT&T SIM swap\n  app.post(\"/api/att/sim-swaps\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), validateBody(insertAttSimSwapSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const swapData = {\n        ...req.body,\n        processedBy: user.id,\n      };\n      \n      const swap = await storage.createAttSimSwap(swapData);\n      res.json(swap);\n    } catch (error) {\n      console.error(\"Create AT&T SIM swap error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T SIM swap\" });\n    }\n  });\n\n  // Get all AT&T SIM swaps\n  app.get(\"/api/att/sim-swaps\", requireAuth, requireRole([\"admin\", \"employee\"]), async (req: Request, res: Response) => {\n    try {\n      const swaps = await storage.getAllAttSimSwaps();\n      res.json(swaps);\n    } catch (error) {\n      console.error(\"Get AT&T SIM swaps error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T SIM swaps\" });\n    }\n  });\n\n  // Create AT&T recharge\n  app.post(\"/api/att/recharges\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), validateBody(insertAttRechargeSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const rechargeData = {\n        ...req.body,\n        rechargedBy: user.id,\n      };\n      \n      const recharge = await storage.createAttRecharge(rechargeData);\n      res.json(recharge);\n    } catch (error) {\n      console.error(\"Create AT&T recharge error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T recharge\" });\n    }\n  });\n\n  // Get all AT&T recharges (admin/employee view)\n  app.get(\"/api/att/recharges\", requireAuth, requireRole([\"admin\", \"employee\"]), async (req: Request, res: Response) => {\n    try {\n      const recharges = await storage.getAllAttRecharges();\n      res.json(recharges);\n    } catch (error) {\n      console.error(\"Get AT&T recharges error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T recharges\" });\n    }\n  });\n\n  // Get AT&T recharges by user (retailer view)\n  app.get(\"/api/att/recharges/my\", requireAuth, requireRole([\"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const recharges = await storage.getAttRechargesByUser(user.id);\n      res.json(recharges);\n    } catch (error) {\n      console.error(\"Get user AT&T recharges error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T recharges\" });\n    }\n  });\n\n  // Create AT&T bulk activation\n  app.post(\"/api/att/bulk-activations\", requireAuth, requireRole([\"admin\", \"employee\"]), validateBody(insertAttBulkActivationSchema), async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const bulkData = {\n        ...req.body,\n        uploadedBy: user.id,\n      };\n      \n      const bulk = await storage.createAttBulkActivation(bulkData);\n      res.json(bulk);\n    } catch (error) {\n      console.error(\"Create AT&T bulk activation error:\", error);\n      res.status(500).json({ message: \"Failed to create AT&T bulk activation\" });\n    }\n  });\n\n  // Get all AT&T bulk activations\n  app.get(\"/api/att/bulk-activations\", requireAuth, requireRole([\"admin\", \"employee\"]), async (req: Request, res: Response) => {\n    try {\n      const bulkActivations = await storage.getAllAttBulkActivations();\n      res.json(bulkActivations);\n    } catch (error) {\n      console.error(\"Get AT&T bulk activations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T bulk activations\" });\n    }\n  });\n\n  // Get/Create retailer AT&T permissions\n  app.get(\"/api/att/permissions/:userId\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const user = req.session.user!;\n      const userId = parseInt(req.params.userId);\n      \n      // Admin can view all permissions, retailers can only view their own\n      if (user.role !== 'admin' && user.id !== userId) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      const permission = await storage.getRetailerAttPermission(userId);\n      \n      if (!permission) {\n        // Create default permissions if none exist\n        const defaultPermission = {\n          userId,\n          canActivate: false,\n          canRecharge: false,\n          canSimSwap: false,\n          canSellDataAddons: false,\n          canPortIn: false,\n          canEnableWifiCalling: false,\n          canBulkActivate: false,\n          maxDailyActivations: 100,\n          maxDailyRecharges: 500,\n        };\n        \n        const newPermission = await storage.createRetailerAttPermission(defaultPermission);\n        return res.json(newPermission);\n      }\n      \n      res.json(permission);\n    } catch (error) {\n      console.error(\"Get AT&T permissions error:\", error);\n      res.status(500).json({ message: \"Failed to fetch AT&T permissions\" });\n    }\n  });\n\n  // Update retailer AT&T permissions\n  app.put(\"/api/att/permissions/:userId\", requireAuth, requireRole([\"admin\"]), async (req: Request, res: Response) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const updates = req.body;\n      \n      const permission = await storage.updateRetailerAttPermission(userId, updates);\n      if (!permission) {\n        return res.status(404).json({ message: \"AT&T permissions not found\" });\n      }\n      \n      res.json(permission);\n    } catch (error) {\n      console.error(\"Update AT&T permissions error:\", error);\n      res.status(500).json({ message: \"Failed to update AT&T permissions\" });\n    }\n  });\n\n  // ===== NEW NEXITEL SERVICES ROUTES =====\n\n  // Nexitel Data Add-ons\n  app.post(\"/api/nexitel/data-addons\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { phoneNumber, iccid, dataPackage, customerEmail, employeeId } = req.body;\n      \n      // Employee verification\n      if (!employeeId) {\n        return res.status(400).json({ error: \"Employee ID is required\" });\n      }\n\n      const dataAddon = {\n        id: Date.now(),\n        phoneNumber,\n        iccid,\n        dataPackage,\n        customerEmail: customerEmail || \"\",\n        employeeId,\n        status: \"active\",\n        purchasedAt: new Date().toISOString()\n      };\n      \n      console.log(\"Nexitel Data Add-on Created:\", dataAddon);\n      \n      res.json({ \n        success: true, \n        phoneNumber,\n        dataPackage,\n        purchasedAt: dataAddon.purchasedAt\n      });\n    } catch (error) {\n      console.error(\"Nexitel data add-on error:\", error);\n      res.status(500).json({ error: \"Failed to purchase data add-on\" });\n    }\n  });\n\n  // Nexitel SIM Swap\n  app.post(\"/api/nexitel/sim-swap\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { phoneNumber, oldIccid, newIccid, reason, customerEmail, notes, employeeId } = req.body;\n      \n      // Employee verification\n      if (!employeeId) {\n        return res.status(400).json({ error: \"Employee ID is required\" });\n      }\n\n      const simSwap = {\n        id: Date.now(),\n        phoneNumber,\n        oldIccid,\n        newIccid,\n        reason,\n        customerEmail: customerEmail || \"\",\n        notes: notes || \"\",\n        employeeId,\n        status: \"completed\",\n        swappedAt: new Date().toISOString()\n      };\n      \n      console.log(\"Nexitel SIM Swap Created:\", simSwap);\n      \n      res.json({ \n        success: true, \n        phoneNumber,\n        newIccid,\n        swappedAt: simSwap.swappedAt\n      });\n    } catch (error) {\n      console.error(\"Nexitel SIM swap error:\", error);\n      res.status(500).json({ error: \"Failed to process SIM swap\" });\n    }\n  });\n\n  // Nexitel Port Status\n  app.post(\"/api/nexitel/port-status\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { searchQuery, employeeId } = req.body;\n      \n      // Employee verification\n      if (!employeeId) {\n        return res.status(400).json({ error: \"Employee ID is required\" });\n      }\n\n      // Mock port status data - in production this would query actual porting system\n      const mockPortData = {\n        id: `PORT_${Date.now()}`,\n        phoneNumber: searchQuery.replace(/\\D/g, '').slice(0, 10),\n        fromCarrier: \"Verizon Wireless\",\n        requestDate: new Date(Date.now() - 86400000 * 2).toISOString(),\n        status: [\"pending\", \"in-progress\", \"completed\"][Math.floor(Math.random() * 3)] as \"pending\" | \"in-progress\" | \"completed\",\n        estimatedCompletion: new Date(Date.now() + 86400000 * 3).toISOString(),\n        customerName: \"John Doe\",\n        customerEmail: \"john.doe@email.com\",\n        notes: \"Standard wireless port request\"\n      };\n      \n      console.log(\"Nexitel Port Status Query:\", { searchQuery, employeeId });\n      \n      res.json(mockPortData);\n    } catch (error) {\n      console.error(\"Nexitel port status error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve port status\" });\n    }\n  });\n\n  // Nexitel Bulk Activation\n  app.post(\"/api/nexitel/bulk-activation\", requireAuth, requireRole([\"admin\", \"employee\", \"retailer\"]), async (req: Request, res: Response) => {\n    try {\n      const { batchName, nexitelNetwork, employeeId } = req.body;\n\n      // Employee verification\n      if (!employeeId) {\n        return res.status(400).json({ error: \"Employee ID is required\" });\n      }\n\n      // Mock processing - in production this would process the actual CSV\n      const mockBulkStatus = {\n        id: `BULK_${Date.now()}`,\n        batchName,\n        nexitelNetwork,\n        employeeId,\n        totalRecords: Math.floor(Math.random() * 50) + 10,\n        processedRecords: 0,\n        successfulActivations: 0,\n        failedActivations: 0,\n        status: \"processing\" as const,\n        errors: [] as string[]\n      };\n      \n      // Simulate processing progress\n      setTimeout(() => {\n        mockBulkStatus.processedRecords = mockBulkStatus.totalRecords;\n        mockBulkStatus.successfulActivations = Math.floor(mockBulkStatus.totalRecords * 0.9);\n        mockBulkStatus.failedActivations = mockBulkStatus.totalRecords - mockBulkStatus.successfulActivations;\n        mockBulkStatus.status = \"completed\";\n      }, 3000);\n      \n      console.log(\"Nexitel Bulk Activation Started:\", mockBulkStatus);\n      \n      res.json(mockBulkStatus);\n    } catch (error) {\n      console.error(\"Nexitel bulk activation error:\", error);\n      res.status(500).json({ error: \"Failed to process bulk activation\" });\n    }\n  });\n\n  return app;\n}","size_bytes":95329},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\n\nasync function seed() {\n  try {\n    console.log(\"Starting database seeding...\");\n\n    // Create admin user\n    const adminUser = await storage.createUser({\n      username: \"admin\",\n      password: \"admin123\",\n      email: \"admin@system.com\",\n      role: \"admin\",\n      balance: \"10000.00\",\n      isActive: true,\n    });\n    console.log(\"✓ Admin user created\");\n\n    // Create sample employee\n    const employeeUser = await storage.createUser({\n      username: \"employee1\",\n      password: \"employee123\",\n      email: \"employee@system.com\",\n      role: \"employee\",\n      employeeRole: \"technical_support\",\n      balance: \"1000.00\",\n      isActive: true,\n    });\n    console.log(\"✓ Employee user created\");\n\n    // Create sample retailer\n    const retailerUser = await storage.createUser({\n      username: \"retailer1\",\n      password: \"retailer123\",\n      email: \"retailer@system.com\",\n      role: \"retailer\",\n      balance: \"500.00\",\n      isActive: true,\n    });\n    console.log(\"✓ Retailer user created\");\n\n    // Create commission group\n    const commissionGroup = await storage.createCommissionGroup({\n      name: \"Standard Retailers\",\n      description: \"Standard commission rates for most retailers\",\n    });\n    console.log(\"✓ Commission group created\");\n\n    // Create sample plans\n    const nexitelPlan = await storage.createPlan({\n      name: \"Nexitel Purple $25\",\n      carrier: \"nexitel-purple\",\n      country: \"United States\",\n      denomination: \"$25\",\n      retailerPrice: \"27.50\",\n      ourCost: \"24.00\",\n      profit: \"3.50\",\n      serviceType: \"nexitel\",\n      planType: \"prepaid\",\n      description: \"25 dollar prepaid plan for Nexitel Purple network\",\n      isActive: true,\n    });\n\n    const globalPlan = await storage.createPlan({\n      name: \"India Airtel $10\",\n      carrier: \"airtel\",\n      country: \"India\",\n      denomination: \"$10\",\n      retailerPrice: \"11.00\",\n      ourCost: \"9.50\",\n      profit: \"1.50\",\n      serviceType: \"global_recharge\",\n      planType: \"prepaid\",\n      description: \"10 dollar prepaid recharge for Airtel India\",\n      isActive: true,\n    });\n\n    const voipPlan = await storage.createPlan({\n      name: \"VoIP Basic Plan\",\n      carrier: \"nexitel-voip\",\n      country: \"United States\",\n      denomination: \"Monthly\",\n      retailerPrice: \"15.00\",\n      ourCost: \"12.00\",\n      profit: \"3.00\",\n      serviceType: \"voip\",\n      planType: \"voice\",\n      description: \"Basic VoIP plan with unlimited domestic calling\",\n      isActive: true,\n    });\n\n    console.log(\"✓ Sample plans created\");\n\n    // Create commission pricing for the retailer\n    await storage.createCommissionPricing({\n      commissionGroupId: commissionGroup.id,\n      planId: nexitelPlan.id,\n      ourCost: \"24.00\",\n      sellingPrice: \"26.00\",\n      profit: \"2.00\",\n      isActive: true,\n    });\n\n    await storage.createCommissionPricing({\n      commissionGroupId: commissionGroup.id,\n      planId: globalPlan.id,\n      ourCost: \"9.50\",\n      sellingPrice: \"10.50\",\n      profit: \"1.00\",\n      isActive: true,\n    });\n\n    console.log(\"✓ Commission pricing created\");\n\n    console.log(\"\\n🎉 Database seeding completed successfully!\");\n    console.log(\"\\nLogin credentials:\");\n    console.log(\"Admin: admin / admin123\");\n    console.log(\"Employee: employee1 / employee123\");\n    console.log(\"Retailer: retailer1 / retailer123\");\n\n  } catch (error) {\n    console.error(\"Seeding failed:\", error);\n    process.exit(1);\n  }\n}\n\n// Run if this is the main module\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seed().then(() => process.exit(0));\n}\n\nexport { seed };","size_bytes":3698},"server/storage.ts":{"content":"import { \n  users, \n  transactions, \n  savedNumbers, \n  permissions, \n  rolePermissions, \n  plans, \n  commissionGroups, \n  commissionPricing,\n  voipPlans,\n  carriers,\n  rechargeHistory,\n  fundTransfers,\n  sessionLogs,\n  systemSettings,\n  notifications,\n  auditLogs,\n  wifiCallingActivations,\n  nexitelActivations,\n  planPerformanceMetrics,\n  activationRecords,\n  rechargeRecords,\n  commissionHistory,\n  walletTopupRecords,\n  retailerDocuments,\n  type User, \n  type InsertUser, \n  type Transaction, \n  type InsertTransaction,\n  type SavedNumber, \n  type InsertSavedNumber,\n  type Permission, \n  type InsertPermission,\n  type RolePermission, \n  type InsertRolePermission,\n  type Plan, \n  type InsertPlan,\n  type CommissionGroup, \n  type InsertCommissionGroup,\n  type CommissionPricing, \n  type InsertCommissionPricing,\n  type PlanPerformanceMetric,\n  type InsertPlanPerformanceMetric,\n  type ActivationRecord,\n  type InsertActivationRecord,\n  type RechargeRecord,\n  type InsertRechargeRecord,\n  type CommissionHistory,\n  type InsertCommissionHistory,\n  type WalletTopupRecord,\n  type InsertWalletTopupRecord,\n  type RetailerDocument,\n  type InsertRetailerDocument,\n  type RetailerPermission,\n  type InsertRetailerPermission,\n  type ActivitySearchRequest,\n  type ReportGenerationRequest,\n  retailerPermissions,\n  // AT&T Schema imports\n  attActivations,\n  attDataAddons,\n  attSimSwaps,\n  attRecharges,\n  attBulkActivations,\n  retailerAttPermissions,\n  type AttActivation,\n  type InsertAttActivation,\n  type AttDataAddon,\n  type InsertAttDataAddon,\n  type AttSimSwap,\n  type InsertAttSimSwap,\n  type AttRecharge,\n  type InsertAttRecharge,\n  type AttBulkActivation,\n  type InsertAttBulkActivation,\n  type RetailerAttPermission,\n  type InsertRetailerAttPermission\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, ilike, sql, gte, lte, like, count, sum } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User Management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<boolean>;\n  getAllUsers(): Promise<User[]>;\n  getUsersByRole(role: string): Promise<User[]>;\n  updateUserBalance(id: number, newBalance: string): Promise<User | undefined>;\n\n  // Transaction Management\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransaction(id: number): Promise<Transaction | undefined>;\n  getTransactionsByUser(userId: number): Promise<Transaction[]>;\n  getAllTransactions(): Promise<Transaction[]>;\n  updateTransactionStatus(id: number, status: string): Promise<Transaction | undefined>;\n\n  // Saved Numbers\n  createSavedNumber(savedNumber: InsertSavedNumber): Promise<SavedNumber>;\n  getSavedNumbersByUser(userId: number): Promise<SavedNumber[]>;\n  deleteSavedNumber(id: number): Promise<boolean>;\n\n  // Permission Management\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  getAllPermissions(): Promise<Permission[]>;\n  createRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission>;\n  getRolePermissions(role: string): Promise<RolePermission[]>;\n\n  // Plan Management\n  createPlan(plan: InsertPlan): Promise<Plan>;\n  getAllPlans(): Promise<Plan[]>;\n  getPlansByServiceType(serviceType: string): Promise<Plan[]>;\n  getRetailerPlans(retailerId: number): Promise<Plan[]>;\n  getRetailerPlansByServiceType(retailerId: number, serviceType: string): Promise<Plan[]>;\n  updatePlan(id: number, updates: Partial<InsertPlan>): Promise<Plan | undefined>;\n  deletePlan(id: number): Promise<boolean>;\n\n  // Commission Management\n  createCommissionGroup(group: InsertCommissionGroup): Promise<CommissionGroup>;\n  getAllCommissionGroups(): Promise<CommissionGroup[]>;\n  updateCommissionGroup(id: number, updates: Partial<InsertCommissionGroup>): Promise<CommissionGroup | undefined>;\n  deleteCommissionGroup(id: number): Promise<boolean>;\n\n  createCommissionPricing(pricing: InsertCommissionPricing): Promise<CommissionPricing>;\n  getCommissionPricingByGroup(groupId: number): Promise<CommissionPricing[]>;\n  updateCommissionPricing(id: number, updates: Partial<InsertCommissionPricing>): Promise<CommissionPricing | undefined>;\n  deleteCommissionPricing(id: number): Promise<boolean>;\n\n  // Activity Tracking & Search\n  createActivationRecord(record: InsertActivationRecord): Promise<ActivationRecord>;\n  createRechargeRecord(record: InsertRechargeRecord): Promise<RechargeRecord>;\n  createCommissionRecord(record: InsertCommissionHistory): Promise<CommissionHistory>;\n  createWalletTopupRecord(record: InsertWalletTopupRecord): Promise<WalletTopupRecord>;\n  \n  searchActivitiesByICCID(iccid: string): Promise<{\n    activations: ActivationRecord[];\n    recharges: RechargeRecord[];\n  }>;\n  searchActivitiesByMobileNumber(mobileNumber: string): Promise<{\n    activations: ActivationRecord[];\n    recharges: RechargeRecord[];\n  }>;\n  searchActivities(request: ActivitySearchRequest): Promise<{\n    activations: ActivationRecord[];\n    recharges: RechargeRecord[];\n    total: number;\n  }>;\n\n  // Report Generation\n  generateActivationReport(request: ReportGenerationRequest): Promise<ActivationRecord[]>;\n  generateRechargeReport(request: ReportGenerationRequest): Promise<RechargeRecord[]>;\n  generateCommissionReport(request: ReportGenerationRequest): Promise<CommissionHistory[]>;\n  generateWalletTopupReport(request: ReportGenerationRequest): Promise<WalletTopupRecord[]>;\n\n  // Advanced Features\n  processRechargeTransaction(params: {\n    userId: number;\n    phoneNumber: string;\n    country: string;\n    carrier: string;\n    amount: string;\n    serviceFee: string;\n    totalAmount: string;\n    status: string;\n  }): Promise<{\n    transaction: Transaction;\n    commission: string;\n    userBalanceAfter: string;\n    adminBalanceAfter: string;\n    adminProfit: string;\n  }>;\n\n  transferFunds(fromUserId: number, toUserId: number, amount: string, description?: string): Promise<boolean>;\n  getSystemSettings(): Promise<Record<string, any>>;\n  updateSystemSetting(key: string, value: string): Promise<boolean>;\n  createAuditLog(log: {\n    userId: number;\n    entityType: string;\n    entityId: string;\n    action: string;\n    oldValues?: any;\n    newValues?: any;\n    ipAddress?: string;\n    userAgent?: string;\n  }): Promise<void>;\n\n  // Retailer Document Management\n  createRetailerDocument(insertDoc: InsertRetailerDocument): Promise<RetailerDocument>;\n  getRetailerDocuments(retailerId: number): Promise<RetailerDocument[]>;\n  updateRetailerDocumentStatus(documentId: number, status: string, notes?: string): Promise<RetailerDocument | undefined>;\n\n  // Retailer Permissions Management\n  createRetailerPermission(insertPermission: InsertRetailerPermission): Promise<RetailerPermission>;\n  getRetailerPermission(retailerId: number): Promise<RetailerPermission | undefined>;\n  getAllRetailerPermissions(): Promise<RetailerPermission[]>;\n  updateRetailerPermission(retailerId: number, updates: Partial<InsertRetailerPermission>): Promise<RetailerPermission | undefined>;\n  deleteRetailerPermission(retailerId: number): Promise<boolean>;\n\n  // AT&T Services Management\n  createAttActivation(insertActivation: InsertAttActivation): Promise<AttActivation>;\n  getAttActivation(id: number): Promise<AttActivation | undefined>;\n  getAllAttActivations(): Promise<AttActivation[]>;\n  getAttActivationsByUser(userId: number): Promise<AttActivation[]>;\n  updateAttActivationStatus(id: number, status: string, phoneNumber?: string): Promise<AttActivation | undefined>;\n  \n  createAttDataAddon(insertAddon: InsertAttDataAddon): Promise<AttDataAddon>;\n  getAttDataAddons(phoneNumber: string): Promise<AttDataAddon[]>;\n  getAllAttDataAddons(): Promise<AttDataAddon[]>;\n  \n  createAttSimSwap(insertSwap: InsertAttSimSwap): Promise<AttSimSwap>;\n  getAttSimSwap(id: number): Promise<AttSimSwap | undefined>;\n  getAllAttSimSwaps(): Promise<AttSimSwap[]>;\n  updateAttSimSwapStatus(id: number, status: string): Promise<AttSimSwap | undefined>;\n  \n  createAttRecharge(insertRecharge: InsertAttRecharge): Promise<AttRecharge>;\n  getAttRecharge(id: number): Promise<AttRecharge | undefined>;\n  getAllAttRecharges(): Promise<AttRecharge[]>;\n  getAttRechargesByUser(userId: number): Promise<AttRecharge[]>;\n  updateAttRechargeStatus(id: number, status: string): Promise<AttRecharge | undefined>;\n  \n  createAttBulkActivation(insertBulk: InsertAttBulkActivation): Promise<AttBulkActivation>;\n  getAttBulkActivation(id: number): Promise<AttBulkActivation | undefined>;\n  getAllAttBulkActivations(): Promise<AttBulkActivation[]>;\n  updateAttBulkActivationStatus(id: number, status: string, report?: any): Promise<AttBulkActivation | undefined>;\n  \n  createRetailerAttPermission(insertPermission: InsertRetailerAttPermission): Promise<RetailerAttPermission>;\n  getRetailerAttPermission(userId: number): Promise<RetailerAttPermission | undefined>;\n  getAllRetailerAttPermissions(): Promise<RetailerAttPermission[]>;\n  updateRetailerAttPermission(userId: number, updates: Partial<InsertRetailerAttPermission>): Promise<RetailerAttPermission | undefined>;\n  deleteRetailerAttPermission(userId: number): Promise<boolean>;\n\n  // Analytics Methods\n  getAnalyticsOverview(): Promise<any>;\n  getDailyActivationsByCarrier(days: number): Promise<any>;\n  getDailyRechargesByCarrier(days: number): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User Management\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    \n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    // Hash password if being updated\n    if (updates.password) {\n      updates.password = await bcrypt.hash(updates.password, 10);\n    }\n\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async deleteUser(id: number): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.createdAt));\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role)).orderBy(asc(users.createdAt));\n  }\n\n  async updateUserBalance(id: number, newBalance: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ balance: newBalance })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Transaction Management\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db\n      .insert(transactions)\n      .values(transaction)\n      .returning();\n    return newTransaction;\n  }\n\n  async getTransaction(id: number): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async getTransactionsByUser(userId: number): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return await db.select().from(transactions).orderBy(desc(transactions.createdAt));\n  }\n\n  async updateTransactionStatus(id: number, status: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .update(transactions)\n      .set({ status })\n      .where(eq(transactions.id, id))\n      .returning();\n    return transaction || undefined;\n  }\n\n  // Saved Numbers\n  async createSavedNumber(savedNumber: InsertSavedNumber): Promise<SavedNumber> {\n    const [newSavedNumber] = await db\n      .insert(savedNumbers)\n      .values(savedNumber)\n      .returning();\n    return newSavedNumber;\n  }\n\n  async getSavedNumbersByUser(userId: number): Promise<SavedNumber[]> {\n    return await db\n      .select()\n      .from(savedNumbers)\n      .where(eq(savedNumbers.userId, userId));\n  }\n\n  async deleteSavedNumber(id: number): Promise<boolean> {\n    const result = await db.delete(savedNumbers).where(eq(savedNumbers.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Permission Management\n  async createPermission(permission: InsertPermission): Promise<Permission> {\n    const [newPermission] = await db\n      .insert(permissions)\n      .values(permission)\n      .returning();\n    return newPermission;\n  }\n\n  async getAllPermissions(): Promise<Permission[]> {\n    return await db.select().from(permissions);\n  }\n\n  async createRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission> {\n    const [newRolePermission] = await db\n      .insert(rolePermissions)\n      .values(rolePermission)\n      .returning();\n    return newRolePermission;\n  }\n\n  async getRolePermissions(role: string): Promise<RolePermission[]> {\n    return await db\n      .select()\n      .from(rolePermissions)\n      .where(eq(rolePermissions.role, role));\n  }\n\n  // Plan Management\n  async createPlan(plan: InsertPlan): Promise<Plan> {\n    const [newPlan] = await db\n      .insert(plans)\n      .values(plan)\n      .returning();\n    return newPlan;\n  }\n\n  async getAllPlans(): Promise<Plan[]> {\n    return await db.select().from(plans).orderBy(asc(plans.createdAt));\n  }\n\n  async getPlansByServiceType(serviceType: string): Promise<Plan[]> {\n    return await db\n      .select()\n      .from(plans)\n      .where(eq(plans.serviceType, serviceType))\n      .orderBy(asc(plans.createdAt));\n  }\n\n  async getPlanById(id: number): Promise<Plan | undefined> {\n    const [plan] = await db.select().from(plans).where(eq(plans.id, id));\n    return plan || undefined;\n  }\n\n  async getRetailerPlans(retailerId: number): Promise<Plan[]> {\n    // Get the retailer's commission group first\n    const [user] = await db.select().from(users).where(eq(users.id, retailerId));\n    if (!user || !user.commissionGroupId) {\n      return []; // Return empty array if no commission group assigned\n    }\n\n    // Get plans that have commission pricing for this commission group\n    return await db\n      .select({\n        id: plans.id,\n        name: plans.name,\n        carrier: plans.carrier,\n        country: plans.country,\n        denomination: plans.denomination,\n        ourCost: commissionPricing.ourCost, // Use commission pricing cost\n        retailerPrice: commissionPricing.sellingPrice, // Use commission selling price\n        customerPrice: plans.customerPrice, // Include customer price from plan\n        profit: sql<string>`(COALESCE(${plans.customerPrice}, ${commissionPricing.sellingPrice}) - ${commissionPricing.sellingPrice})`.as('profit'), // Retailer commission = customer_price - selling_price\n        serviceType: plans.serviceType,\n        planType: plans.planType,\n        description: plans.description,\n        isActive: plans.isActive,\n        durationMonths: plans.durationMonths,\n        isPromotional: plans.isPromotional,\n        originalPrice: plans.originalPrice,\n        discountPercentage: plans.discountPercentage,\n        promotionalLabel: plans.promotionalLabel,\n        createdAt: plans.createdAt,\n        updatedAt: plans.updatedAt,\n      })\n      .from(plans)\n      .innerJoin(commissionPricing, eq(plans.id, commissionPricing.planId))\n      .where(eq(commissionPricing.commissionGroupId, user.commissionGroupId))\n      .orderBy(asc(plans.createdAt));\n  }\n\n  async getRetailerPlansByServiceType(retailerId: number, serviceType: string): Promise<Plan[]> {\n    // Get the retailer's commission group first\n    const [user] = await db.select().from(users).where(eq(users.id, retailerId));\n    if (!user || !user.commissionGroupId) {\n      return []; // Return empty array if no commission group assigned\n    }\n\n    // Get plans that have commission pricing for this commission group and service type\n    return await db\n      .select({\n        id: plans.id,\n        name: plans.name,\n        carrier: plans.carrier,\n        country: plans.country,\n        denomination: plans.denomination,\n        ourCost: commissionPricing.ourCost, // Use commission pricing cost\n        retailerPrice: commissionPricing.sellingPrice, // Use commission selling price\n        customerPrice: plans.customerPrice, // Include customer price from plan\n        profit: sql<string>`(COALESCE(${plans.customerPrice}, ${commissionPricing.sellingPrice}) - ${commissionPricing.sellingPrice})`.as('profit'), // Retailer commission = customer_price - selling_price\n        serviceType: plans.serviceType,\n        planType: plans.planType,\n        description: plans.description,\n        isActive: plans.isActive,\n        durationMonths: plans.durationMonths,\n        isPromotional: plans.isPromotional,\n        originalPrice: plans.originalPrice,\n        discountPercentage: plans.discountPercentage,\n        promotionalLabel: plans.promotionalLabel,\n        createdAt: plans.createdAt,\n        updatedAt: plans.updatedAt,\n      })\n      .from(plans)\n      .innerJoin(commissionPricing, eq(plans.id, commissionPricing.planId))\n      .where(\n        and(\n          eq(commissionPricing.commissionGroupId, user.commissionGroupId),\n          eq(plans.serviceType, serviceType)\n        )\n      )\n      .orderBy(asc(plans.createdAt));\n  }\n\n  async getCommissionPlansByServiceType(commissionGroupId: number, serviceType: string): Promise<Plan[]> {\n    // Get plans that have commission pricing for the specified commission group and service type\n    return await db\n      .select({\n        id: plans.id,\n        name: plans.name,\n        carrier: plans.carrier,\n        country: plans.country,\n        denomination: plans.denomination,\n        ourCost: commissionPricing.ourCost, // Use commission pricing cost\n        retailerPrice: commissionPricing.sellingPrice, // Use commission selling price\n        customerPrice: plans.customerPrice, // Include customer price from plan\n        profit: sql<string>`(COALESCE(${plans.customerPrice}, ${commissionPricing.sellingPrice}) - ${commissionPricing.sellingPrice})`.as('profit'), // Retailer commission = customer_price - selling_price\n        serviceType: plans.serviceType,\n        planType: plans.planType,\n        description: plans.description,\n        isActive: plans.isActive,\n        durationMonths: plans.durationMonths,\n        isPromotional: plans.isPromotional,\n        originalPrice: plans.originalPrice,\n        discountPercentage: plans.discountPercentage,\n        promotionalLabel: plans.promotionalLabel,\n        createdAt: plans.createdAt,\n        updatedAt: plans.updatedAt,\n      })\n      .from(plans)\n      .innerJoin(commissionPricing, eq(plans.id, commissionPricing.planId))\n      .where(\n        and(\n          eq(commissionPricing.commissionGroupId, commissionGroupId),\n          eq(plans.serviceType, serviceType)\n        )\n      )\n      .orderBy(asc(plans.createdAt));\n  }\n\n  async updatePlan(id: number, updates: Partial<InsertPlan>): Promise<Plan | undefined> {\n    const [plan] = await db\n      .update(plans)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(plans.id, id))\n      .returning();\n    return plan || undefined;\n  }\n\n  async deletePlan(id: number): Promise<boolean> {\n    try {\n      // First delete any commission pricing entries for this plan\n      await db.delete(commissionPricing).where(eq(commissionPricing.planId, id));\n      \n      // Then delete the plan\n      const result = await db.delete(plans).where(eq(plans.id, id));\n      return (result.rowCount ?? 0) > 0;\n    } catch (error) {\n      console.error('Error deleting plan:', error);\n      throw error;\n    }\n  }\n\n  // Commission Management\n  async createCommissionGroup(group: InsertCommissionGroup): Promise<CommissionGroup> {\n    const [newGroup] = await db\n      .insert(commissionGroups)\n      .values(group)\n      .returning();\n    return newGroup;\n  }\n\n  async getAllCommissionGroups(): Promise<CommissionGroup[]> {\n    return await db.select().from(commissionGroups).orderBy(asc(commissionGroups.createdAt));\n  }\n\n  async updateCommissionGroup(id: number, updates: Partial<InsertCommissionGroup>): Promise<CommissionGroup | undefined> {\n    const [group] = await db\n      .update(commissionGroups)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(commissionGroups.id, id))\n      .returning();\n    return group || undefined;\n  }\n\n  async deleteCommissionGroup(id: number): Promise<boolean> {\n    const result = await db.delete(commissionGroups).where(eq(commissionGroups.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // ===== PLAN PERFORMANCE METHODS =====\n  \n  async getPlanPerformanceMetrics(planId: number, days: number = 30): Promise<PlanPerformanceMetric[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    return await db\n      .select()\n      .from(planPerformanceMetrics)\n      .where(\n        and(\n          eq(planPerformanceMetrics.planId, planId),\n          gte(planPerformanceMetrics.date, startDate)\n        )\n      )\n      .orderBy(asc(planPerformanceMetrics.date));\n  }\n\n  async updatePlanPerformanceMetrics(planId: number): Promise<void> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    // Generate sample performance data for demonstration\n    const sampleData = Array.from({ length: 30 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (29 - i));\n      date.setHours(0, 0, 0, 0);\n      \n      const transactionCount = Math.floor(Math.random() * 20) + 5;\n      const revenue = (Math.random() * 500 + 100).toFixed(2);\n      const profit = (parseFloat(revenue) * 0.2).toFixed(2);\n      const averageTransactionValue = (parseFloat(revenue) / transactionCount).toFixed(2);\n      \n      return {\n        planId,\n        date,\n        transactionCount,\n        revenue,\n        profit,\n        averageTransactionValue,\n        successRate: (95 + Math.random() * 5).toFixed(2), // 95-100%\n      };\n    });\n\n    // Insert sample data\n    for (const data of sampleData) {\n      const existing = await db\n        .select()\n        .from(planPerformanceMetrics)\n        .where(\n          and(\n            eq(planPerformanceMetrics.planId, planId),\n            eq(planPerformanceMetrics.date, data.date)\n          )\n        )\n        .limit(1);\n\n      if (existing.length === 0) {\n        await db.insert(planPerformanceMetrics).values(data);\n      }\n    }\n  }\n\n  async createCommissionPricing(pricing: InsertCommissionPricing): Promise<CommissionPricing> {\n    const [newPricing] = await db\n      .insert(commissionPricing)\n      .values(pricing)\n      .returning();\n    \n    // Also update the plan's customer_price if it's provided in the pricing data\n    if (pricing.customerPrice) {\n      await db\n        .update(plans)\n        .set({ customerPrice: pricing.customerPrice })\n        .where(eq(plans.id, pricing.planId));\n    }\n    \n    return newPricing;\n  }\n\n  async getCommissionPricingByGroup(groupId: number): Promise<CommissionPricing[]> {\n    return await db\n      .select()\n      .from(commissionPricing)\n      .where(eq(commissionPricing.commissionGroupId, groupId))\n      .orderBy(asc(commissionPricing.createdAt));\n  }\n\n  async updateCommissionPricing(id: number, updates: Partial<InsertCommissionPricing>): Promise<CommissionPricing | undefined> {\n    const [pricing] = await db\n      .update(commissionPricing)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(commissionPricing.id, id))\n      .returning();\n    return pricing || undefined;\n  }\n\n  async getAllCommissionPricing(): Promise<CommissionPricing[]> {\n    return await db.select().from(commissionPricing).orderBy(asc(commissionPricing.createdAt));\n  }\n\n  async deleteCommissionPricing(id: number): Promise<boolean> {\n    const result = await db.delete(commissionPricing).where(eq(commissionPricing.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Advanced Features\n  async processRechargeTransaction(params: {\n    userId: number;\n    phoneNumber: string;\n    country: string;\n    carrier: string;\n    amount: string;\n    serviceFee: string;\n    totalAmount: string;\n    status: string;\n  }): Promise<{\n    transaction: Transaction;\n    commission: string;\n    userBalanceAfter: string;\n    adminBalanceAfter: string;\n    adminProfit: string;\n  }> {\n    return await db.transaction(async (tx) => {\n      // Get user current balance\n      const [user] = await tx.select().from(users).where(eq(users.id, params.userId));\n      if (!user) throw new Error(\"User not found\");\n\n      const userCurrentBalance = parseFloat(user.balance);\n      const totalAmount = parseFloat(params.totalAmount);\n      \n      if (userCurrentBalance < totalAmount) {\n        throw new Error(\"Insufficient balance\");\n      }\n\n      // Calculate new balances\n      const userBalanceAfter = (userCurrentBalance - totalAmount).toFixed(2);\n      \n      // Update user balance\n      await tx\n        .update(users)\n        .set({ balance: userBalanceAfter })\n        .where(eq(users.id, params.userId));\n\n      // Create transaction\n      const [transaction] = await tx\n        .insert(transactions)\n        .values({\n          ...params,\n          balanceAfter: userBalanceAfter,\n        })\n        .returning();\n\n      // Get admin user\n      const [admin] = await tx.select().from(users).where(eq(users.role, \"admin\"));\n      if (!admin) throw new Error(\"Admin user not found\");\n\n      const adminCurrentBalance = parseFloat(admin.balance);\n      const commission = (totalAmount * 0.1).toFixed(2); // 10% commission\n      const adminProfit = (parseFloat(params.serviceFee) - parseFloat(commission)).toFixed(2);\n      const adminBalanceAfter = (adminCurrentBalance + parseFloat(adminProfit)).toFixed(2);\n\n      // Update admin balance\n      await tx\n        .update(users)\n        .set({ balance: adminBalanceAfter })\n        .where(eq(users.id, admin.id));\n\n      // Record recharge history\n      await tx\n        .insert(rechargeHistory)\n        .values({\n          transactionId: transaction.id,\n          userId: params.userId,\n          adminUserId: admin.id,\n          amount: params.amount,\n          commission,\n          adminProfit,\n          userBalanceBefore: user.balance,\n          userBalanceAfter,\n          adminBalanceBefore: admin.balance,\n          adminBalanceAfter,\n          status: params.status,\n          metadata: { originalParams: params },\n        });\n\n      return {\n        transaction,\n        commission,\n        userBalanceAfter,\n        adminBalanceAfter,\n        adminProfit,\n      };\n    });\n  }\n\n  async transferFunds(fromUserId: number, toUserId: number, amount: string, description?: string): Promise<boolean> {\n    return await db.transaction(async (tx) => {\n      const transferAmount = parseFloat(amount);\n\n      // Get source user\n      const [fromUser] = await tx.select().from(users).where(eq(users.id, fromUserId));\n      if (!fromUser || parseFloat(fromUser.balance) < transferAmount) {\n        return false;\n      }\n\n      // Get destination user\n      const [toUser] = await tx.select().from(users).where(eq(users.id, toUserId));\n      if (!toUser) return false;\n\n      // Update balances\n      const newFromBalance = (parseFloat(fromUser.balance) - transferAmount).toFixed(2);\n      const newToBalance = (parseFloat(toUser.balance) + transferAmount).toFixed(2);\n\n      await tx\n        .update(users)\n        .set({ balance: newFromBalance })\n        .where(eq(users.id, fromUserId));\n\n      await tx\n        .update(users)\n        .set({ balance: newToBalance })\n        .where(eq(users.id, toUserId));\n\n      // Record transfer\n      await tx\n        .insert(fundTransfers)\n        .values({\n          fromUserId,\n          toUserId,\n          amount,\n          description: description || \"Fund transfer\",\n          status: \"completed\",\n          processedAt: new Date(),\n        });\n\n      return true;\n    });\n  }\n\n  async getSystemSettings(): Promise<Record<string, any>> {\n    const settings = await db.select().from(systemSettings);\n    const result: Record<string, any> = {};\n    \n    for (const setting of settings) {\n      switch (setting.type) {\n        case \"number\":\n          result[setting.key] = parseFloat(setting.value);\n          break;\n        case \"boolean\":\n          result[setting.key] = setting.value === \"true\";\n          break;\n        case \"json\":\n          result[setting.key] = JSON.parse(setting.value);\n          break;\n        default:\n          result[setting.key] = setting.value;\n      }\n    }\n    \n    return result;\n  }\n\n  async updateSystemSetting(key: string, value: string): Promise<boolean> {\n    const result = await db\n      .update(systemSettings)\n      .set({ value, updatedAt: new Date() })\n      .where(eq(systemSettings.key, key));\n    \n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async createAuditLog(log: {\n    userId: number;\n    entityType: string;\n    entityId: string;\n    action: string;\n    oldValues?: any;\n    newValues?: any;\n    ipAddress?: string;\n    userAgent?: string;\n  }): Promise<void> {\n    await db\n      .insert(auditLogs)\n      .values({\n        ...log,\n        oldValues: log.oldValues ? JSON.stringify(log.oldValues) : null,\n        newValues: log.newValues ? JSON.stringify(log.newValues) : null,\n      });\n  }\n\n  // Activity Tracking & Search Implementation\n  async createActivationRecord(record: InsertActivationRecord): Promise<ActivationRecord> {\n    const [activation] = await db\n      .insert(activationRecords)\n      .values(record)\n      .returning();\n    return activation;\n  }\n\n  async createRechargeRecord(record: InsertRechargeRecord): Promise<RechargeRecord> {\n    const [recharge] = await db\n      .insert(rechargeRecords)\n      .values(record)\n      .returning();\n    return recharge;\n  }\n\n  async createCommissionRecord(record: InsertCommissionHistory): Promise<CommissionHistory> {\n    const [commission] = await db\n      .insert(commissionHistory)\n      .values(record)\n      .returning();\n    return commission;\n  }\n\n  async createWalletTopupRecord(record: InsertWalletTopupRecord): Promise<WalletTopupRecord> {\n    const [topup] = await db\n      .insert(walletTopupRecords)\n      .values(record)\n      .returning();\n    return topup;\n  }\n\n  async searchActivitiesByICCID(iccid: string): Promise<{\n    activations: any[];\n    recharges: any[];\n  }> {\n    const [activations, recharges] = await Promise.all([\n      db.select().from(nexitelActivations)\n        .where(eq(nexitelActivations.iccid, iccid))\n        .orderBy(desc(nexitelActivations.createdAt)),\n      db.select({\n        id: rechargeHistory.id,\n        amount: rechargeHistory.amount,\n        commission: rechargeHistory.commission,\n        status: rechargeHistory.status,\n        createdAt: rechargeHistory.createdAt,\n        metadata: rechargeHistory.metadata\n      }).from(rechargeHistory)\n        .where(sql`${rechargeHistory.metadata}->>'iccid' = ${iccid}`)\n        .orderBy(desc(rechargeHistory.createdAt))\n    ]);\n\n    return { activations: activations || [], recharges: recharges || [] };\n  }\n\n  async searchActivitiesByMobileNumber(mobileNumber: string): Promise<{\n    activations: any[];\n    recharges: any[];\n  }> {\n    // Clean the phone number (remove any formatting)\n    const cleanNumber = mobileNumber.replace(/[\\s\\-\\(\\)]/g, '');\n    \n    const [activations, recharges] = await Promise.all([\n      db.select().from(nexitelActivations)\n        .where(sql`REGEXP_REPLACE(${nexitelActivations.customerInfo}->>'phone', '[\\\\s\\\\-\\\\(\\\\)]', '', 'g') = ${cleanNumber}`)\n        .orderBy(desc(nexitelActivations.createdAt)),\n      db.select({\n        id: rechargeHistory.id,\n        amount: rechargeHistory.amount,\n        commission: rechargeHistory.commission,\n        status: rechargeHistory.status,\n        createdAt: rechargeHistory.createdAt,\n        metadata: rechargeHistory.metadata\n      }).from(rechargeHistory)\n        .where(sql`REGEXP_REPLACE(${rechargeHistory.metadata}->>'phone', '[\\\\s\\\\-\\\\(\\\\)]', '', 'g') = ${cleanNumber}`)\n        .orderBy(desc(rechargeHistory.createdAt))\n    ]);\n\n    return { activations: activations || [], recharges: recharges || [] };\n  }\n\n  async searchActivities(request: ActivitySearchRequest): Promise<{\n    activations: ActivationRecord[];\n    recharges: RechargeRecord[];\n    total: number;\n  }> {\n    let activationQuery = db.select().from(activationRecords);\n    let rechargeQuery = db.select().from(rechargeRecords);\n\n    // Apply search filters\n    switch (request.searchType) {\n      case 'iccid':\n        activationQuery = activationQuery.where(ilike(activationRecords.iccid, `%${request.searchTerm}%`));\n        rechargeQuery = rechargeQuery.where(ilike(rechargeRecords.iccid, `%${request.searchTerm}%`));\n        break;\n      case 'mobile_number':\n        activationQuery = activationQuery.where(ilike(activationRecords.mobileNumber, `%${request.searchTerm}%`));\n        rechargeQuery = rechargeQuery.where(ilike(rechargeRecords.mobileNumber, `%${request.searchTerm}%`));\n        break;\n      case 'email':\n        activationQuery = activationQuery.where(ilike(activationRecords.email, `%${request.searchTerm}%`));\n        break;\n      case 'customer_name':\n        activationQuery = activationQuery.where(ilike(activationRecords.customerName, `%${request.searchTerm}%`));\n        break;\n    }\n\n    // Apply date filters\n    if (request.dateFrom) {\n      const fromDate = new Date(request.dateFrom);\n      activationQuery = activationQuery.where(gte(activationRecords.createdAt, fromDate));\n      rechargeQuery = rechargeQuery.where(gte(rechargeRecords.createdAt, fromDate));\n    }\n\n    // Apply service type filter\n    if (request.serviceType !== 'all') {\n      activationQuery = activationQuery.where(eq(activationRecords.serviceType, request.serviceType));\n      rechargeQuery = rechargeQuery.where(eq(rechargeRecords.rechargeType, request.serviceType));\n    }\n\n    // Apply status filter\n    if (request.status !== 'all') {\n      activationQuery = activationQuery.where(eq(activationRecords.status, request.status));\n      rechargeQuery = rechargeQuery.where(eq(rechargeRecords.status, request.status));\n    }\n\n    // Execute queries\n    const [activations, recharges] = await Promise.all([\n      activationQuery.orderBy(desc(activationRecords.createdAt)),\n      rechargeQuery.orderBy(desc(rechargeRecords.createdAt))\n    ]);\n\n    return {\n      activations: activations || [],\n      recharges: recharges || [],\n      total: (activations?.length || 0) + (recharges?.length || 0)\n    };\n  }\n\n  async getAllNexitelActivations(): Promise<NexitelActivation[]> {\n    const result = await db.select().from(nexitelActivations).orderBy(desc(nexitelActivations.createdAt));\n    return result;\n  }\n\n  async getNexitelActivationsByUser(userId: number): Promise<NexitelActivation[]> {\n    const result = await db.select().from(nexitelActivations)\n      .where(eq(nexitelActivations.userId, userId))\n      .orderBy(desc(nexitelActivations.createdAt));\n    return result;\n  }\n\n  async generateActivationReport(request: ReportGenerationRequest): Promise<ActivationRecord[]> {\n    let query = db.select().from(activationRecords);\n\n    // Apply date range\n    const fromDate = new Date(request.dateFrom);\n    const toDate = new Date(request.dateTo);\n    query = query.where(\n      and(\n        gte(activationRecords.createdAt, fromDate),\n        gte(toDate, activationRecords.createdAt)\n      )\n    );\n\n    // Apply user filter for retailer reports\n    if (request.userId) {\n      query = query.where(eq(activationRecords.userId, request.userId));\n    }\n\n    const results = await query.orderBy(desc(activationRecords.createdAt));\n    return results || [];\n  }\n\n  async generateRechargeReport(request: ReportGenerationRequest): Promise<RechargeRecord[]> {\n    let query = db.select().from(rechargeRecords);\n\n    // Apply date range\n    const fromDate = new Date(request.dateFrom);\n    const toDate = new Date(request.dateTo);\n    query = query.where(\n      and(\n        gte(rechargeRecords.createdAt, fromDate),\n        gte(toDate, rechargeRecords.createdAt)\n      )\n    );\n\n    // Apply user filter for retailer reports\n    if (request.userId) {\n      query = query.where(eq(rechargeRecords.userId, request.userId));\n    }\n\n    const results = await query.orderBy(desc(rechargeRecords.createdAt));\n    return results || [];\n  }\n\n  async generateCommissionReport(request: ReportGenerationRequest): Promise<CommissionHistory[]> {\n    let query = db.select().from(commissionHistory);\n\n    // Apply date range\n    const fromDate = new Date(request.dateFrom);\n    const toDate = new Date(request.dateTo);\n    query = query.where(\n      and(\n        gte(commissionHistory.createdAt, fromDate),\n        gte(toDate, commissionHistory.createdAt)\n      )\n    );\n\n    // Apply user filter for retailer reports\n    if (request.userId) {\n      query = query.where(eq(commissionHistory.userId, request.userId));\n    }\n\n    const results = await query.orderBy(desc(commissionHistory.createdAt));\n    return results || [];\n  }\n\n  async generateWalletTopupReport(request: ReportGenerationRequest): Promise<WalletTopupRecord[]> {\n    let query = db.select().from(walletTopupRecords);\n\n    // Apply date range\n    const fromDate = new Date(request.dateFrom);\n    const toDate = new Date(request.dateTo);\n    query = query.where(\n      and(\n        gte(walletTopupRecords.createdAt, fromDate),\n        gte(toDate, walletTopupRecords.createdAt)\n      )\n    );\n\n    // Apply user filter for retailer reports\n    if (request.userId) {\n      query = query.where(eq(walletTopupRecords.userId, request.userId));\n    }\n\n    const results = await query.orderBy(desc(walletTopupRecords.createdAt));\n    return results || [];\n  }\n\n  // Retailer Document Management\n  async createRetailerDocument(insertDoc: InsertRetailerDocument): Promise<RetailerDocument> {\n    const [document] = await db\n      .insert(retailerDocuments)\n      .values(insertDoc)\n      .returning();\n    return document;\n  }\n\n  async getRetailerDocuments(retailerId: number): Promise<RetailerDocument[]> {\n    return await db\n      .select()\n      .from(retailerDocuments)\n      .where(eq(retailerDocuments.retailerId, retailerId))\n      .orderBy(desc(retailerDocuments.createdAt));\n  }\n\n  async updateRetailerDocumentStatus(documentId: number, status: string, notes?: string): Promise<RetailerDocument | undefined> {\n    const [document] = await db\n      .update(retailerDocuments)\n      .set({\n        status,\n        notes,\n        updatedAt: new Date(),\n      })\n      .where(eq(retailerDocuments.id, documentId))\n      .returning();\n    return document || undefined;\n  }\n\n  // Retailer Permissions Management\n  async createRetailerPermission(insertPermission: InsertRetailerPermission): Promise<RetailerPermission> {\n    const [permission] = await db\n      .insert(retailerPermissions)\n      .values(insertPermission)\n      .returning();\n    return permission;\n  }\n\n  async getRetailerPermission(retailerId: number): Promise<RetailerPermission | undefined> {\n    const [permission] = await db\n      .select()\n      .from(retailerPermissions)\n      .where(eq(retailerPermissions.retailerId, retailerId));\n    return permission || undefined;\n  }\n\n  async getAllRetailerPermissions(): Promise<RetailerPermission[]> {\n    const permissions = await db\n      .select()\n      .from(retailerPermissions)\n      .orderBy(asc(retailerPermissions.retailerId));\n    return permissions;\n  }\n\n  async updateRetailerPermission(retailerId: number, updates: Partial<InsertRetailerPermission>): Promise<RetailerPermission | undefined> {\n    const [permission] = await db\n      .update(retailerPermissions)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(retailerPermissions.retailerId, retailerId))\n      .returning();\n    return permission || undefined;\n  }\n\n  async deleteRetailerPermission(retailerId: number): Promise<boolean> {\n    const result = await db\n      .delete(retailerPermissions)\n      .where(eq(retailerPermissions.retailerId, retailerId));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // AT&T Services Management Implementation\n  async createAttActivation(insertActivation: InsertAttActivation): Promise<AttActivation> {\n    const [activation] = await db\n      .insert(attActivations)\n      .values(insertActivation)\n      .returning();\n    return activation;\n  }\n\n  async getAttActivation(id: number): Promise<AttActivation | undefined> {\n    const [activation] = await db\n      .select()\n      .from(attActivations)\n      .where(eq(attActivations.id, id));\n    return activation || undefined;\n  }\n\n  async getAllAttActivations(): Promise<AttActivation[]> {\n    return await db\n      .select()\n      .from(attActivations)\n      .orderBy(desc(attActivations.activationDate));\n  }\n\n  async getAttActivationsByUser(userId: number): Promise<AttActivation[]> {\n    return await db\n      .select()\n      .from(attActivations)\n      .where(eq(attActivations.activatedBy, userId))\n      .orderBy(desc(attActivations.activationDate));\n  }\n\n  async updateAttActivationStatus(id: number, status: string, phoneNumber?: string): Promise<AttActivation | undefined> {\n    const updates: any = { status };\n    if (phoneNumber) updates.phoneNumber = phoneNumber;\n\n    const [activation] = await db\n      .update(attActivations)\n      .set(updates)\n      .where(eq(attActivations.id, id))\n      .returning();\n    return activation || undefined;\n  }\n\n  async createAttDataAddon(insertAddon: InsertAttDataAddon): Promise<AttDataAddon> {\n    const [addon] = await db\n      .insert(attDataAddons)\n      .values(insertAddon)\n      .returning();\n    return addon;\n  }\n\n  async getAttDataAddons(phoneNumber: string): Promise<AttDataAddon[]> {\n    return await db\n      .select()\n      .from(attDataAddons)\n      .where(eq(attDataAddons.phoneNumber, phoneNumber))\n      .orderBy(desc(attDataAddons.purchaseDate));\n  }\n\n  async getAllAttDataAddons(): Promise<AttDataAddon[]> {\n    return await db\n      .select()\n      .from(attDataAddons)\n      .orderBy(desc(attDataAddons.purchaseDate));\n  }\n\n  async createAttSimSwap(insertSwap: InsertAttSimSwap): Promise<AttSimSwap> {\n    const [swap] = await db\n      .insert(attSimSwaps)\n      .values(insertSwap)\n      .returning();\n    return swap;\n  }\n\n  async getAttSimSwap(id: number): Promise<AttSimSwap | undefined> {\n    const [swap] = await db\n      .select()\n      .from(attSimSwaps)\n      .where(eq(attSimSwaps.id, id));\n    return swap || undefined;\n  }\n\n  async getAllAttSimSwaps(): Promise<AttSimSwap[]> {\n    return await db\n      .select()\n      .from(attSimSwaps)\n      .orderBy(desc(attSimSwaps.swapDate));\n  }\n\n  async updateAttSimSwapStatus(id: number, status: string): Promise<AttSimSwap | undefined> {\n    const [swap] = await db\n      .update(attSimSwaps)\n      .set({ status })\n      .where(eq(attSimSwaps.id, id))\n      .returning();\n    return swap || undefined;\n  }\n\n  async createAttRecharge(insertRecharge: InsertAttRecharge): Promise<AttRecharge> {\n    const [recharge] = await db\n      .insert(attRecharges)\n      .values(insertRecharge)\n      .returning();\n    return recharge;\n  }\n\n  async getAttRecharge(id: number): Promise<AttRecharge | undefined> {\n    const [recharge] = await db\n      .select()\n      .from(attRecharges)\n      .where(eq(attRecharges.id, id));\n    return recharge || undefined;\n  }\n\n  async getAllAttRecharges(): Promise<AttRecharge[]> {\n    return await db\n      .select()\n      .from(attRecharges)\n      .orderBy(desc(attRecharges.rechargeDate));\n  }\n\n  async getAttRechargesByUser(userId: number): Promise<AttRecharge[]> {\n    return await db\n      .select()\n      .from(attRecharges)\n      .where(eq(attRecharges.rechargedBy, userId))\n      .orderBy(desc(attRecharges.rechargeDate));\n  }\n\n  async updateAttRechargeStatus(id: number, status: string): Promise<AttRecharge | undefined> {\n    const [recharge] = await db\n      .update(attRecharges)\n      .set({ status })\n      .where(eq(attRecharges.id, id))\n      .returning();\n    return recharge || undefined;\n  }\n\n  async createAttBulkActivation(insertBulk: InsertAttBulkActivation): Promise<AttBulkActivation> {\n    const [bulk] = await db\n      .insert(attBulkActivations)\n      .values(insertBulk)\n      .returning();\n    return bulk;\n  }\n\n  async getAttBulkActivation(id: number): Promise<AttBulkActivation | undefined> {\n    const [bulk] = await db\n      .select()\n      .from(attBulkActivations)\n      .where(eq(attBulkActivations.id, id));\n    return bulk || undefined;\n  }\n\n  async getAllAttBulkActivations(): Promise<AttBulkActivation[]> {\n    return await db\n      .select()\n      .from(attBulkActivations)\n      .orderBy(desc(attBulkActivations.createdAt));\n  }\n\n  async updateAttBulkActivationStatus(id: number, status: string, report?: any): Promise<AttBulkActivation | undefined> {\n    const updates: any = { processingStatus: status };\n    if (report) updates.errorReport = report;\n    if (status === 'processing') updates.processingStarted = new Date();\n    if (status === 'completed' || status === 'failed') updates.processingCompleted = new Date();\n\n    const [bulk] = await db\n      .update(attBulkActivations)\n      .set(updates)\n      .where(eq(attBulkActivations.id, id))\n      .returning();\n    return bulk || undefined;\n  }\n\n  async createRetailerAttPermission(insertPermission: InsertRetailerAttPermission): Promise<RetailerAttPermission> {\n    const [permission] = await db\n      .insert(retailerAttPermissions)\n      .values(insertPermission)\n      .returning();\n    return permission;\n  }\n\n  async getRetailerAttPermission(userId: number): Promise<RetailerAttPermission | undefined> {\n    const [permission] = await db\n      .select()\n      .from(retailerAttPermissions)\n      .where(eq(retailerAttPermissions.userId, userId));\n    return permission || undefined;\n  }\n\n  async getAllRetailerAttPermissions(): Promise<RetailerAttPermission[]> {\n    return await db\n      .select()\n      .from(retailerAttPermissions)\n      .orderBy(asc(retailerAttPermissions.userId));\n  }\n\n  async updateRetailerAttPermission(userId: number, updates: Partial<InsertRetailerAttPermission>): Promise<RetailerAttPermission | undefined> {\n    const [permission] = await db\n      .update(retailerAttPermissions)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(retailerAttPermissions.userId, userId))\n      .returning();\n    return permission || undefined;\n  }\n\n  async deleteRetailerAttPermission(userId: number): Promise<boolean> {\n    const result = await db\n      .delete(retailerAttPermissions)\n      .where(eq(retailerAttPermissions.userId, userId));\n    return result.rowCount !== undefined && result.rowCount > 0;\n  }\n\n  // ===== ANALYTICS METHODS =====\n\n  async getAnalyticsOverview(): Promise<any> {\n    try {\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n      \n      // Get total users by role\n      const totalUsers = await db.select().from(users);\n      const adminCount = totalUsers.filter(u => u.role === 'admin').length;\n      const employeeCount = totalUsers.filter(u => u.role === 'employee').length;\n      const retailerCount = totalUsers.filter(u => u.role === 'retailer').length;\n\n      let totalActivationsToday = 0;\n      let totalRechargesTotal = 0;\n      let totalRevenue = \"0.00\";\n\n      // Safely get today's activations\n      try {\n        const todayActivations = await db\n          .select()\n          .from(activationRecords)\n          .where(gte(activationRecords.createdAt, startOfDay));\n        totalActivationsToday += todayActivations.length;\n      } catch (error: any) {\n        console.log(\"activationRecords table not ready:\", error?.message || error);\n      }\n\n      // Safely get today's recharges\n      try {\n        const todayRecharges = await db\n          .select()\n          .from(rechargeRecords)\n          .where(gte(rechargeRecords.createdAt, startOfDay));\n        totalRechargesTotal = todayRecharges.length;\n\n        // Calculate revenue\n        const revenueResult = await db\n          .select({\n            total: sql<string>`COALESCE(SUM(CAST(${rechargeRecords.totalAmount} AS DECIMAL)), 0)`\n          })\n          .from(rechargeRecords);\n        totalRevenue = revenueResult[0]?.total || \"0.00\";\n      } catch (error: any) {\n        console.log(\"rechargeRecords table not ready:\", error?.message || error);\n      }\n\n      // Safely get AT&T activations today\n      try {\n        const todayAttActivations = await db\n          .select()\n          .from(attActivations)\n          .where(gte(attActivations.createdAt, startOfDay));\n        totalActivationsToday += todayAttActivations.length;\n      } catch (error: any) {\n        console.log(\"attActivations table not ready:\", error?.message || error);\n      }\n\n      return {\n        totalUsers: totalUsers.length,\n        adminCount,\n        employeeCount,\n        retailerCount,\n        totalActivationsToday,\n        totalRechargesTotal,\n        totalRevenue,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error(\"Analytics overview error:\", error);\n      // Return safe defaults\n      return {\n        totalUsers: 0,\n        adminCount: 0,\n        employeeCount: 0,\n        retailerCount: 0,\n        totalActivationsToday: 0,\n        totalRechargesTotal: 0,\n        totalRevenue: \"0.00\",\n        lastUpdated: new Date().toISOString()\n      };\n    }\n  }\n\n  async getDailyActivationsByCarrier(days: number = 7): Promise<any> {\n    try {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      startDate.setHours(0, 0, 0, 0);\n\n      let allActivations: any[] = [];\n\n      // Safely get Nexitel activations (Blue and Purple)\n      try {\n        const nexitelActivations = await db\n          .select({\n            date: sql<string>`DATE(${activationRecords.createdAt})`,\n            carrier: activationRecords.carrier,\n            count: sql<number>`COUNT(*)`\n          })\n          .from(activationRecords)\n          .where(\n            and(\n              gte(activationRecords.createdAt, startDate),\n              eq(activationRecords.serviceType, 'nexitel')\n            )\n          )\n          .groupBy(sql`DATE(${activationRecords.createdAt})`, activationRecords.carrier)\n          .orderBy(sql`DATE(${activationRecords.createdAt})`);\n        allActivations.push(...nexitelActivations);\n      } catch (error: any) {\n        console.log(\"activationRecords table not ready for Nexitel:\", error?.message || error);\n      }\n\n      // Safely get AT&T activations\n      try {\n        const attActivationsData = await db\n          .select({\n            date: sql<string>`DATE(${attActivations.createdAt})`,\n            carrier: sql<string>`'AT&T'`,\n            count: sql<number>`COUNT(*)`\n          })\n          .from(attActivations)\n          .where(gte(attActivations.createdAt, startDate))\n          .groupBy(sql`DATE(${attActivations.createdAt})`)\n          .orderBy(sql`DATE(${attActivations.createdAt})`);\n        allActivations.push(...attActivationsData);\n      } catch (error: any) {\n        console.log(\"attActivations table not ready:\", error?.message || error);\n      }\n      \n      // Create a map for easier processing\n      const dailyData: { [key: string]: { [carrier: string]: number } } = {};\n      \n      // Initialize all days with zero counts\n      for (let i = 0; i < days; i++) {\n        const date = new Date(startDate);\n        date.setDate(date.getDate() + i);\n        const dateStr = date.toISOString().split('T')[0];\n        dailyData[dateStr] = {\n          'Nexitel Blue': 0,\n          'Nexitel Purple': 0,\n          'AT&T': 0\n        };\n      }\n\n      // Fill in actual data\n      allActivations.forEach(activation => {\n        const dateStr = activation.date;\n        if (dailyData[dateStr]) {\n          const carrierName = activation.carrier === 'nexitel_blue' ? 'Nexitel Blue' :\n                             activation.carrier === 'nexitel_purple' ? 'Nexitel Purple' :\n                             activation.carrier;\n          dailyData[dateStr][carrierName] = activation.count;\n        }\n      });\n\n      return Object.entries(dailyData).map(([date, carriers]) => ({\n        date,\n        ...carriers\n      }));\n    } catch (error) {\n      console.error(\"Daily activations analytics error:\", error);\n      // Return empty data with proper structure\n      const dailyData: { [key: string]: { [carrier: string]: number } } = {};\n      for (let i = 0; i < days; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - days + i);\n        const dateStr = date.toISOString().split('T')[0];\n        dailyData[dateStr] = {\n          'Nexitel Blue': 0,\n          'Nexitel Purple': 0,\n          'AT&T': 0\n        };\n      }\n      return Object.entries(dailyData).map(([date, carriers]) => ({\n        date,\n        ...carriers\n      }));\n    }\n  }\n\n  async getDailyRechargesByCarrier(days: number = 7): Promise<any> {\n    try {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      startDate.setHours(0, 0, 0, 0);\n\n      let allRecharges: any[] = [];\n\n      // Safely get recharge data from transactions table (for Global Recharge and USA Carriers)\n      try {\n        const globalRecharges = await db\n          .select({\n            date: sql<string>`DATE(${transactions.createdAt})`,\n            carrier: transactions.carrier,\n            count: sql<number>`COUNT(*)`\n          })\n          .from(transactions)\n          .where(gte(transactions.createdAt, startDate))\n          .groupBy(sql`DATE(${transactions.createdAt})`, transactions.carrier)\n          .orderBy(sql`DATE(${transactions.createdAt})`);\n        allRecharges.push(...globalRecharges);\n      } catch (error: any) {\n        console.log(\"transactions table not ready for global recharges:\", error?.message || error);\n      }\n\n      // Safely get Nexitel recharges\n      try {\n        const nexitelRecharges = await db\n          .select({\n            date: sql<string>`DATE(${rechargeRecords.createdAt})`,\n            carrier: rechargeRecords.carrier,\n            count: sql<number>`COUNT(*)`\n          })\n          .from(rechargeRecords)\n          .where(\n            and(\n              gte(rechargeRecords.createdAt, startDate),\n              eq(rechargeRecords.rechargeType, 'nexitel')\n            )\n          )\n          .groupBy(sql`DATE(${rechargeRecords.createdAt})`, rechargeRecords.carrier)\n          .orderBy(sql`DATE(${rechargeRecords.createdAt})`);\n        allRecharges.push(...nexitelRecharges);\n      } catch (error: any) {\n        console.log(\"rechargeRecords table not ready for Nexitel:\", error?.message || error);\n      }\n\n      // Safely get AT&T recharges\n      try {\n        const attRechargesData = await db\n          .select({\n            date: sql<string>`DATE(${attRecharges.createdAt})`,\n            carrier: sql<string>`'AT&T'`,\n            count: sql<number>`COUNT(*)`\n          })\n          .from(attRecharges)\n          .where(gte(attRecharges.createdAt, startDate))\n          .groupBy(sql`DATE(${attRecharges.createdAt})`)\n          .orderBy(sql`DATE(${attRecharges.createdAt})`);\n        allRecharges.push(...attRechargesData);\n      } catch (error: any) {\n        console.log(\"attRecharges table not ready:\", error?.message || error);\n      }\n      \n      // Create a map for easier processing\n      const dailyData: { [key: string]: { [carrier: string]: number } } = {};\n      \n      // Initialize all days with zero counts for main carriers\n      for (let i = 0; i < days; i++) {\n        const date = new Date(startDate);\n        date.setDate(date.getDate() + i);\n        const dateStr = date.toISOString().split('T')[0];\n        dailyData[dateStr] = {\n          'Nexitel Blue': 0,\n          'Nexitel Purple': 0,\n          'AT&T': 0,\n          'Global Recharge': 0,\n          'USA Carriers': 0\n        };\n      }\n\n      // Fill in actual data\n      allRecharges.forEach(recharge => {\n        const dateStr = recharge.date;\n        if (dailyData[dateStr]) {\n          let carrierKey = recharge.carrier;\n          \n          // Map carrier names to display names\n          if (recharge.carrier === 'nexitel_blue') {\n            carrierKey = 'Nexitel Blue';\n          } else if (recharge.carrier === 'nexitel_purple') {\n            carrierKey = 'Nexitel Purple';\n          } else if (recharge.carrier === 'AT&T') {\n            carrierKey = 'AT&T';\n          } else if (recharge.carrier.includes('USA') || ['Verizon', 'T-Mobile', 'Sprint'].includes(recharge.carrier)) {\n            carrierKey = 'USA Carriers';\n          } else {\n            carrierKey = 'Global Recharge';\n          }\n          \n          if (dailyData[dateStr][carrierKey] !== undefined) {\n            dailyData[dateStr][carrierKey] += recharge.count;\n          }\n        }\n      });\n\n      return Object.entries(dailyData).map(([date, carriers]) => ({\n        date,\n        ...carriers\n      }));\n    } catch (error) {\n      console.error(\"Daily recharges analytics error:\", error);\n      // Return empty data with proper structure\n      const dailyData: { [key: string]: { [carrier: string]: number } } = {};\n      for (let i = 0; i < days; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - days + i);\n        const dateStr = date.toISOString().split('T')[0];\n        dailyData[dateStr] = {\n          'Nexitel Blue': 0,\n          'Nexitel Purple': 0,\n          'AT&T': 0,\n          'Global Recharge': 0,\n          'USA Carriers': 0\n        };\n      }\n      return Object.entries(dailyData).map(([date, carriers]) => ({\n        date,\n        ...carriers\n      }));\n    }\n  }\n\n  // Generate comprehensive daily report data for download\n  async generateDailyReport(reportDate: string): Promise<any> {\n    try {\n      const startDate = new Date(reportDate);\n      startDate.setHours(0, 0, 0, 0);\n      const endDate = new Date(reportDate);\n      endDate.setHours(23, 59, 59, 999);\n\n      const report = {\n        reportDate,\n        reportType: 'Daily',\n        generatedAt: new Date().toISOString(),\n        summary: {\n          totalActivations: 0,\n          totalRecharges: 0,\n          totalRevenue: 0,\n          totalCommissions: 0\n        },\n        activations: {\n          nexitelBlue: [],\n          nexitelPurple: [],\n          att: []\n        },\n        recharges: {\n          nexitelBlue: [],\n          nexitelPurple: [],\n          att: [],\n          globalRecharge: [],\n          usaCarriers: []\n        },\n        transactions: [],\n        commissions: []\n      };\n\n      // Get activation records\n      try {\n        const activations = await db\n          .select()\n          .from(activationRecords)\n          .where(\n            and(\n              gte(activationRecords.createdAt, startDate),\n              lte(activationRecords.createdAt, endDate)\n            )\n          );\n        \n        activations.forEach(activation => {\n          if (activation.carrier === 'nexitel_blue') {\n            report.activations.nexitelBlue.push(activation);\n          } else if (activation.carrier === 'nexitel_purple') {\n            report.activations.nexitelPurple.push(activation);\n          }\n        });\n        report.summary.totalActivations += activations.length;\n      } catch (error: any) {\n        console.log(\"activationRecords table not ready for daily report:\", error?.message || error);\n      }\n\n      // Get AT&T activations\n      try {\n        const attActivations = await db\n          .select()\n          .from(attActivations)\n          .where(\n            and(\n              gte(attActivations.createdAt, startDate),\n              lte(attActivations.createdAt, endDate)\n            )\n          );\n        report.activations.att = attActivations;\n        report.summary.totalActivations += attActivations.length;\n      } catch (error: any) {\n        console.log(\"attActivations table not ready for daily report:\", error?.message || error);\n      }\n\n      // Get recharge records\n      try {\n        const recharges = await db\n          .select()\n          .from(rechargeRecords)\n          .where(\n            and(\n              gte(rechargeRecords.createdAt, startDate),\n              lte(rechargeRecords.createdAt, endDate)\n            )\n          );\n        \n        recharges.forEach(recharge => {\n          if (recharge.carrier === 'nexitel_blue') {\n            report.recharges.nexitelBlue.push(recharge);\n          } else if (recharge.carrier === 'nexitel_purple') {\n            report.recharges.nexitelPurple.push(recharge);\n          }\n          report.summary.totalRevenue += parseFloat(recharge.totalAmount || '0');\n        });\n        report.summary.totalRecharges += recharges.length;\n      } catch (error: any) {\n        console.log(\"rechargeRecords table not ready for daily report:\", error?.message || error);\n      }\n\n      // Get global recharge transactions\n      try {\n        const globalTransactions = await db\n          .select()\n          .from(transactions)\n          .where(\n            and(\n              gte(transactions.createdAt, startDate),\n              lte(transactions.createdAt, endDate)\n            )\n          );\n        \n        globalTransactions.forEach(transaction => {\n          if (transaction.carrier?.includes('USA') || ['Verizon', 'T-Mobile', 'Sprint'].includes(transaction.carrier || '')) {\n            report.recharges.usaCarriers.push(transaction);\n          } else {\n            report.recharges.globalRecharge.push(transaction);\n          }\n          report.summary.totalRevenue += parseFloat(transaction.totalAmount || '0');\n        });\n        report.summary.totalRecharges += globalTransactions.length;\n        report.transactions = globalTransactions;\n      } catch (error: any) {\n        console.log(\"transactions table not ready for daily report:\", error?.message || error);\n      }\n\n      // Get commission records\n      try {\n        const commissions = await db\n          .select()\n          .from(commissionHistory)\n          .where(\n            and(\n              gte(commissionHistory.createdAt, startDate),\n              lte(commissionHistory.createdAt, endDate)\n            )\n          );\n        report.commissions = commissions;\n        report.summary.totalCommissions = commissions.reduce((sum, comm) => \n          sum + parseFloat(comm.commissionAmount || '0'), 0);\n      } catch (error: any) {\n        console.log(\"commissionHistory table not ready for daily report:\", error?.message || error);\n      }\n\n      return report;\n    } catch (error) {\n      console.error(\"Daily report generation error:\", error);\n      throw error;\n    }\n  }\n\n  // Generate comprehensive monthly report data for download\n  async generateMonthlyReport(year: number, month: number): Promise<any> {\n    try {\n      const startDate = new Date(year, month - 1, 1);\n      startDate.setHours(0, 0, 0, 0);\n      const endDate = new Date(year, month, 0);\n      endDate.setHours(23, 59, 59, 999);\n\n      const monthName = new Date(year, month - 1).toLocaleString('default', { month: 'long' });\n      \n      const report = {\n        reportPeriod: `${monthName} ${year}`,\n        reportType: 'Monthly',\n        generatedAt: new Date().toISOString(),\n        summary: {\n          totalActivations: 0,\n          totalRecharges: 0,\n          totalRevenue: 0,\n          totalCommissions: 0,\n          totalUsers: 0,\n          activeRetailers: 0\n        },\n        dailyBreakdown: [] as any[],\n        carrierPerformance: {\n          nexitelBlue: { activations: 0, recharges: 0, revenue: 0 },\n          nexitelPurple: { activations: 0, recharges: 0, revenue: 0 },\n          att: { activations: 0, recharges: 0, revenue: 0 },\n          globalRecharge: { recharges: 0, revenue: 0 },\n          usaCarriers: { recharges: 0, revenue: 0 }\n        },\n        topRetailers: [] as any[],\n        commissionSummary: [] as any[]\n      };\n\n      // Get daily breakdown for the month\n      for (let day = 1; day <= endDate.getDate(); day++) {\n        const dayStart = new Date(year, month - 1, day, 0, 0, 0, 0);\n        const dayEnd = new Date(year, month - 1, day, 23, 59, 59, 999);\n        \n        const dailyData = {\n          date: dayStart.toISOString().split('T')[0],\n          activations: 0,\n          recharges: 0,\n          revenue: 0\n        };\n\n        // Get daily activations\n        try {\n          const activations = await db\n            .select()\n            .from(activationRecords)\n            .where(\n              and(\n                gte(activationRecords.createdAt, dayStart),\n                lte(activationRecords.createdAt, dayEnd)\n              )\n            );\n          dailyData.activations += activations.length;\n          \n          // Update carrier performance\n          activations.forEach(activation => {\n            if (activation.carrier === 'nexitel_blue') {\n              report.carrierPerformance.nexitelBlue.activations++;\n            } else if (activation.carrier === 'nexitel_purple') {\n              report.carrierPerformance.nexitelPurple.activations++;\n            }\n          });\n        } catch (error: any) {\n          console.log(\"activationRecords table not ready for monthly report:\", error?.message || error);\n        }\n\n        // Get daily AT&T activations\n        try {\n          const attActivations = await db\n            .select()\n            .from(attActivations)\n            .where(\n              and(\n                gte(attActivations.createdAt, dayStart),\n                lte(attActivations.createdAt, dayEnd)\n              )\n            );\n          dailyData.activations += attActivations.length;\n          report.carrierPerformance.att.activations += attActivations.length;\n        } catch (error: any) {\n          console.log(\"attActivations table not ready for monthly report:\", error?.message || error);\n        }\n\n        // Get daily recharges\n        try {\n          const recharges = await db\n            .select()\n            .from(rechargeRecords)\n            .where(\n              and(\n                gte(rechargeRecords.createdAt, dayStart),\n                lte(rechargeRecords.createdAt, dayEnd)\n              )\n            );\n          \n          recharges.forEach(recharge => {\n            dailyData.recharges++;\n            const amount = parseFloat(recharge.totalAmount || '0');\n            dailyData.revenue += amount;\n            \n            if (recharge.carrier === 'nexitel_blue') {\n              report.carrierPerformance.nexitelBlue.recharges++;\n              report.carrierPerformance.nexitelBlue.revenue += amount;\n            } else if (recharge.carrier === 'nexitel_purple') {\n              report.carrierPerformance.nexitelPurple.recharges++;\n              report.carrierPerformance.nexitelPurple.revenue += amount;\n            }\n          });\n        } catch (error: any) {\n          console.log(\"rechargeRecords table not ready for monthly report:\", error?.message || error);\n        }\n\n        // Get daily global transactions\n        try {\n          const transactions = await db\n            .select()\n            .from(transactions)\n            .where(\n              and(\n                gte(transactions.createdAt, dayStart),\n                lte(transactions.createdAt, dayEnd)\n              )\n            );\n          \n          transactions.forEach(transaction => {\n            dailyData.recharges++;\n            const amount = parseFloat(transaction.totalAmount || '0');\n            dailyData.revenue += amount;\n            \n            if (transaction.carrier?.includes('USA') || ['Verizon', 'T-Mobile', 'Sprint'].includes(transaction.carrier || '')) {\n              report.carrierPerformance.usaCarriers.recharges++;\n              report.carrierPerformance.usaCarriers.revenue += amount;\n            } else {\n              report.carrierPerformance.globalRecharge.recharges++;\n              report.carrierPerformance.globalRecharge.revenue += amount;\n            }\n          });\n        } catch (error: any) {\n          console.log(\"transactions table not ready for monthly report:\", error?.message || error);\n        }\n\n        report.dailyBreakdown.push(dailyData);\n        report.summary.totalActivations += dailyData.activations;\n        report.summary.totalRecharges += dailyData.recharges;\n        report.summary.totalRevenue += dailyData.revenue;\n      }\n\n      // Get commission summary\n      try {\n        const commissions = await db\n          .select()\n          .from(commissionHistory)\n          .where(\n            and(\n              gte(commissionHistory.createdAt, startDate),\n              lte(commissionHistory.createdAt, endDate)\n            )\n          );\n        \n        const commissionByRetailer = commissions.reduce((acc, comm) => {\n          const retailerId = comm.retailerId;\n          if (!acc[retailerId]) {\n            acc[retailerId] = {\n              retailerId,\n              totalCommission: 0,\n              transactionCount: 0\n            };\n          }\n          acc[retailerId].totalCommission += parseFloat(comm.commissionAmount || '0');\n          acc[retailerId].transactionCount++;\n          return acc;\n        }, {} as Record<string, any>);\n        \n        report.commissionSummary = Object.values(commissionByRetailer);\n        report.summary.totalCommissions = commissions.reduce((sum, comm) => \n          sum + parseFloat(comm.commissionAmount || '0'), 0);\n      } catch (error: any) {\n        console.log(\"commissionHistory table not ready for monthly report:\", error?.message || error);\n      }\n\n      // Get user statistics\n      try {\n        const allUsers = await db.select().from(users);\n        report.summary.totalUsers = allUsers.length;\n        report.summary.activeRetailers = allUsers.filter(user => \n          user.role === 'retailer' && user.isActive).length;\n      } catch (error: any) {\n        console.log(\"users table not ready for monthly report:\", error?.message || error);\n      }\n\n      return report;\n    } catch (error) {\n      console.error(\"Monthly report generation error:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":71188},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/voip.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\n// VoIP number generation utility\nexport function generateVoipNumber(): string {\n  // Generate a US-based VoIP number (format: +1-XXX-XXX-XXXX)\n  const areaCode = Math.floor(Math.random() * 900) + 100; // 100-999\n  const exchange = Math.floor(Math.random() * 900) + 100; // 100-999\n  const number = Math.floor(Math.random() * 9000) + 1000; // 1000-9999\n  return `+1-${areaCode}-${exchange}-${number}`;\n}\n\n// Activation code generation\nexport function generateActivationCode(): string {\n  // Generate 8-character alphanumeric code\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 8; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n// Email service for VoIP setup instructions\nexport class VoipEmailService {\n  private mailService: MailService;\n\n  constructor() {\n    this.mailService = new MailService();\n    if (process.env.SENDGRID_API_KEY) {\n      this.mailService.setApiKey(process.env.SENDGRID_API_KEY);\n    }\n  }\n\n  async sendVoipSetupEmail(activation: {\n    customerName: string;\n    customerEmail: string;\n    voipNumber: string;\n    activationCode: string;\n    planName: string;\n  }): Promise<boolean> {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.warn('SENDGRID_API_KEY not configured - skipping email send');\n      return false;\n    }\n\n    const setupInstructions = this.generateSetupInstructions(activation);\n    \n    try {\n      await this.mailService.send({\n        to: activation.customerEmail,\n        from: process.env.FROM_EMAIL || 'noreply@nexitel.com',\n        subject: `Your VoIP Phone Number is Ready - ${activation.voipNumber}`,\n        html: setupInstructions,\n        text: this.generatePlainTextInstructions(activation),\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to send VoIP setup email:', error);\n      return false;\n    }\n  }\n\n  private generateSetupInstructions(activation: {\n    customerName: string;\n    customerEmail: string;\n    voipNumber: string;\n    activationCode: string;\n    planName: string;\n  }): string {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>VoIP Setup Instructions</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }\n            .voip-details { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }\n            .setup-steps { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }\n            .step { margin: 15px 0; padding: 10px; background: #e9ecef; border-radius: 5px; }\n            .highlight { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #ffc107; }\n            .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🎉 Your VoIP Phone Number is Ready!</h1>\n                <p>Welcome to Nexitel VoIP Services</p>\n            </div>\n            \n            <div class=\"content\">\n                <h2>Hello ${activation.customerName},</h2>\n                <p>Your VoIP phone number has been successfully activated! Here are your details:</p>\n                \n                <div class=\"voip-details\">\n                    <h3>📞 Your VoIP Details</h3>\n                    <p><strong>VoIP Phone Number:</strong> ${activation.voipNumber}</p>\n                    <p><strong>Activation Code:</strong> ${activation.activationCode}</p>\n                    <p><strong>Plan:</strong> ${activation.planName}</p>\n                    <p><strong>Email:</strong> ${activation.customerEmail}</p>\n                </div>\n                \n                <div class=\"setup-steps\">\n                    <h3>📱 Setup Instructions for Nexiphone App</h3>\n                    \n                    <div class=\"step\">\n                        <h4>Step 1: Download the Nexiphone App</h4>\n                        <p>Download the Nexiphone app from:</p>\n                        <ul>\n                            <li>📱 <strong>iOS:</strong> App Store - Search \"Nexiphone\"</li>\n                            <li>🤖 <strong>Android:</strong> Google Play Store - Search \"Nexiphone\"</li>\n                        </ul>\n                    </div>\n                    \n                    <div class=\"step\">\n                        <h4>Step 2: Open the App and Select \"Add Account\"</h4>\n                        <p>Launch the Nexiphone app and tap \"Add Account\" or \"+\"</p>\n                    </div>\n                    \n                    <div class=\"step\">\n                        <h4>Step 3: Enter Your VoIP Configuration</h4>\n                        <p>Enter the following information exactly as shown:</p>\n                        <ul>\n                            <li><strong>Phone Number:</strong> ${activation.voipNumber}</li>\n                            <li><strong>Activation Code:</strong> ${activation.activationCode}</li>\n                            <li><strong>Server:</strong> nexitel.voip.com</li>\n                            <li><strong>Port:</strong> 5060</li>\n                        </ul>\n                    </div>\n                    \n                    <div class=\"step\">\n                        <h4>Step 4: Complete Setup</h4>\n                        <p>Tap \"Register\" or \"Save\" to complete the setup. Your phone will connect to the Nexitel network.</p>\n                    </div>\n                    \n                    <div class=\"step\">\n                        <h4>Step 5: Test Your Connection</h4>\n                        <p>Make a test call to verify everything is working correctly.</p>\n                    </div>\n                </div>\n                \n                <div class=\"highlight\">\n                    <h3>📋 Quick Setup Summary</h3>\n                    <p><strong>Phone Number:</strong> ${activation.voipNumber}</p>\n                    <p><strong>Activation Code:</strong> ${activation.activationCode}</p>\n                    <p><strong>Server:</strong> nexitel.voip.com</p>\n                    <p><strong>Port:</strong> 5060</p>\n                </div>\n                \n                <div class=\"setup-steps\">\n                    <h3>🔧 Alternative Setup (Manual Configuration)</h3>\n                    <p>If you prefer to use a different VoIP app, use these SIP settings:</p>\n                    <ul>\n                        <li><strong>SIP Username:</strong> ${activation.voipNumber.replace(/[^0-9]/g, '')}</li>\n                        <li><strong>SIP Password:</strong> ${activation.activationCode}</li>\n                        <li><strong>SIP Server:</strong> nexitel.voip.com</li>\n                        <li><strong>Port:</strong> 5060</li>\n                        <li><strong>Transport:</strong> UDP</li>\n                    </ul>\n                </div>\n                \n                <div class=\"highlight\">\n                    <h3>📞 Need Help?</h3>\n                    <p>If you experience any issues during setup:</p>\n                    <ul>\n                        <li>📧 Email: support@nexitel.com</li>\n                        <li>📞 Phone: 1-800-NEXITEL</li>\n                        <li>💬 Live Chat: Available 24/7 on our website</li>\n                    </ul>\n                </div>\n                \n                <div class=\"footer\">\n                    <p>Thank you for choosing Nexitel VoIP Services!</p>\n                    <p>This email was sent to ${activation.customerEmail}</p>\n                </div>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  private generatePlainTextInstructions(activation: {\n    customerName: string;\n    customerEmail: string;\n    voipNumber: string;\n    activationCode: string;\n    planName: string;\n  }): string {\n    return `\nYour VoIP Phone Number is Ready!\n\nHello ${activation.customerName},\n\nYour VoIP phone number has been successfully activated!\n\nYOUR VOIP DETAILS:\n- VoIP Phone Number: ${activation.voipNumber}\n- Activation Code: ${activation.activationCode}\n- Plan: ${activation.planName}\n- Email: ${activation.customerEmail}\n\nSETUP INSTRUCTIONS FOR NEXIPHONE APP:\n\nStep 1: Download the Nexiphone App\n- iOS: App Store - Search \"Nexiphone\"\n- Android: Google Play Store - Search \"Nexiphone\"\n\nStep 2: Open the App and Select \"Add Account\"\nLaunch the Nexiphone app and tap \"Add Account\" or \"+\"\n\nStep 3: Enter Your VoIP Configuration\n- Phone Number: ${activation.voipNumber}\n- Activation Code: ${activation.activationCode}\n- Server: nexitel.voip.com\n- Port: 5060\n\nStep 4: Complete Setup\nTap \"Register\" or \"Save\" to complete the setup.\n\nStep 5: Test Your Connection\nMake a test call to verify everything is working correctly.\n\nALTERNATIVE SETUP (Manual Configuration):\nIf you prefer to use a different VoIP app, use these SIP settings:\n- SIP Username: ${activation.voipNumber.replace(/[^0-9]/g, '')}\n- SIP Password: ${activation.activationCode}\n- SIP Server: nexitel.voip.com\n- Port: 5060\n- Transport: UDP\n\nNEED HELP?\n- Email: support@nexitel.com\n- Phone: 1-800-NEXITEL\n- Live Chat: Available 24/7 on our website\n\nThank you for choosing Nexitel VoIP Services!\n    `;\n  }\n}","size_bytes":9685},"shared/countries.ts":{"content":"// Comprehensive country and carrier data\nexport interface Country {\n  code: string;\n  name: string;\n  flag: string;\n  region: string;\n}\n\nexport interface CarrierData {\n  [countryCode: string]: string[];\n}\n\nexport const REGIONS = [\n  \"North America\",\n  \"South America\", \n  \"Europe\",\n  \"Asia\",\n  \"Africa\",\n  \"Oceania\"\n] as const;\n\nexport const COUNTRIES: Country[] = [\n  // North America (USA excluded - has separate USA Recharge service)\n  { code: \"ca\", name: \"Canada\", flag: \"🇨🇦\", region: \"North America\" },\n  { code: \"mx\", name: \"Mexico\", flag: \"🇲🇽\", region: \"North America\" },\n  { code: \"caribbean\", name: \"Caribbean\", flag: \"🏝️\", region: \"North America\" },\n\n  // South America\n  { code: \"ar\", name: \"Argentina\", flag: \"🇦🇷\", region: \"South America\" },\n  { code: \"br\", name: \"Brazil\", flag: \"🇧🇷\", region: \"South America\" },\n  { code: \"co\", name: \"Colombia\", flag: \"🇨🇴\", region: \"South America\" },\n  { code: \"cl\", name: \"Chile\", flag: \"🇨🇱\", region: \"South America\" },\n  { code: \"pe\", name: \"Peru\", flag: \"🇵🇪\", region: \"South America\" },\n  { code: \"ve\", name: \"Venezuela\", flag: \"🇻🇪\", region: \"South America\" },\n  { code: \"ec\", name: \"Ecuador\", flag: \"🇪🇨\", region: \"South America\" },\n  { code: \"bo\", name: \"Bolivia\", flag: \"🇧🇴\", region: \"South America\" },\n  { code: \"uy\", name: \"Uruguay\", flag: \"🇺🇾\", region: \"South America\" },\n  { code: \"py\", name: \"Paraguay\", flag: \"🇵🇾\", region: \"South America\" },\n\n  // Europe\n  { code: \"gb\", name: \"United Kingdom\", flag: \"🇬🇧\", region: \"Europe\" },\n  { code: \"de\", name: \"Germany\", flag: \"🇩🇪\", region: \"Europe\" },\n  { code: \"fr\", name: \"France\", flag: \"🇫🇷\", region: \"Europe\" },\n  { code: \"es\", name: \"Spain\", flag: \"🇪🇸\", region: \"Europe\" },\n  { code: \"it\", name: \"Italy\", flag: \"🇮🇹\", region: \"Europe\" },\n  { code: \"nl\", name: \"Netherlands\", flag: \"🇳🇱\", region: \"Europe\" },\n  { code: \"ru\", name: \"Russia\", flag: \"🇷🇺\", region: \"Europe\" },\n  { code: \"pl\", name: \"Poland\", flag: \"🇵🇱\", region: \"Europe\" },\n  { code: \"se\", name: \"Sweden\", flag: \"🇸🇪\", region: \"Europe\" },\n  { code: \"ch\", name: \"Switzerland\", flag: \"🇨🇭\", region: \"Europe\" },\n  { code: \"eu_other\", name: \"Other European Countries\", flag: \"🇪🇺\", region: \"Europe\" },\n\n  // Asia\n  { code: \"cn\", name: \"China\", flag: \"🇨🇳\", region: \"Asia\" },\n  { code: \"in\", name: \"India\", flag: \"🇮🇳\", region: \"Asia\" },\n  { code: \"jp\", name: \"Japan\", flag: \"🇯🇵\", region: \"Asia\" },\n  { code: \"kr\", name: \"South Korea\", flag: \"🇰🇷\", region: \"Asia\" },\n  { code: \"id\", name: \"Indonesia\", flag: \"🇮🇩\", region: \"Asia\" },\n  { code: \"ph\", name: \"Philippines\", flag: \"🇵🇭\", region: \"Asia\" },\n  { code: \"my\", name: \"Malaysia\", flag: \"🇲🇾\", region: \"Asia\" },\n  { code: \"sg\", name: \"Singapore\", flag: \"🇸🇬\", region: \"Asia\" },\n  { code: \"th\", name: \"Thailand\", flag: \"🇹🇭\", region: \"Asia\" },\n  { code: \"vn\", name: \"Vietnam\", flag: \"🇻🇳\", region: \"Asia\" },\n  { code: \"middle_east\", name: \"Middle East Region\", flag: \"🏛️\", region: \"Asia\" },\n  { code: \"asia_other\", name: \"Other Asian Countries\", flag: \"🌏\", region: \"Asia\" },\n\n  // Africa\n  { code: \"za\", name: \"South Africa\", flag: \"🇿🇦\", region: \"Africa\" },\n  { code: \"ng\", name: \"Nigeria\", flag: \"🇳🇬\", region: \"Africa\" },\n  { code: \"eg\", name: \"Egypt\", flag: \"🇪🇬\", region: \"Africa\" },\n  { code: \"ke\", name: \"Kenya\", flag: \"🇰🇪\", region: \"Africa\" },\n  { code: \"ma\", name: \"Morocco\", flag: \"🇲🇦\", region: \"Africa\" },\n  { code: \"gh\", name: \"Ghana\", flag: \"🇬🇭\", region: \"Africa\" },\n  { code: \"et\", name: \"Ethiopia\", flag: \"🇪🇹\", region: \"Africa\" },\n  { code: \"tz\", name: \"Tanzania\", flag: \"🇹🇿\", region: \"Africa\" },\n  { code: \"africa_other\", name: \"Other African Countries\", flag: \"🌍\", region: \"Africa\" },\n\n  // Oceania\n  { code: \"au\", name: \"Australia\", flag: \"🇦🇺\", region: \"Oceania\" },\n  { code: \"nz\", name: \"New Zealand\", flag: \"🇳🇿\", region: \"Oceania\" },\n  { code: \"pg\", name: \"Papua New Guinea\", flag: \"🇵🇬\", region: \"Oceania\" },\n  { code: \"pacific\", name: \"Pacific Islands\", flag: \"🏝️\", region: \"Oceania\" },\n];\n\nexport const CARRIERS: CarrierData = {\n  // North America (USA excluded - has separate USA Recharge service)\n  ca: [\"Rogers\", \"Bell\", \"Telus\", \"Freedom Mobile\", \"Videotron\"],\n  mx: [\"Telcel\", \"Movistar\", \"AT&T Mexico\", \"Unefon\"],\n  caribbean: [\"Flow\", \"Digicel\", \"LIME\", \"Cable & Wireless\"],\n\n  // South America\n  ar: [\"Movistar\", \"Personal\", \"Claro\", \"Tuenti\"],\n  br: [\"Vivo\", \"Tim\", \"Claro\", \"Oi\"],\n  co: [\"Claro\", \"Movistar\", \"Tigo\", \"Avantel\"],\n  cl: [\"Movistar\", \"Entel\", \"Claro\", \"WOM\"],\n  pe: [\"Movistar\", \"Claro\", \"Entel\", \"Bitel\"],\n  ve: [\"Movistar\", \"Digitel\", \"Movilnet\"],\n  ec: [\"Claro\", \"Movistar\", \"CNT Mobile\"],\n  bo: [\"Entel\", \"Tigo\", \"Viva\"],\n  uy: [\"Movistar\", \"Claro\", \"Antel\"],\n  py: [\"Tigo\", \"Personal\", \"Claro\", \"Copaco\"],\n\n  // Europe\n  gb: [\"EE\", \"O2\", \"Vodafone\", \"Three\", \"Virgin Mobile\"],\n  de: [\"Deutsche Telekom\", \"Vodafone\", \"O2\", \"1&1\", \"Freenet\"],\n  fr: [\"Orange\", \"SFR\", \"Bouygues\", \"Free Mobile\"],\n  es: [\"Movistar\", \"Orange\", \"Vodafone\", \"MásMóvil\"],\n  it: [\"TIM\", \"Vodafone\", \"WindTre\", \"Iliad\"],\n  nl: [\"KPN\", \"Vodafone\", \"T-Mobile\", \"Tele2\"],\n  ru: [\"MTS\", \"Beeline\", \"MegaFon\", \"Tele2\"],\n  pl: [\"Orange\", \"Play\", \"T-Mobile\", \"Plus\"],\n  se: [\"Telia\", \"Tele2\", \"Telenor\", \"3\"],\n  ch: [\"Swisscom\", \"Salt\", \"Sunrise\"],\n  eu_other: [\"Telekom\", \"Vodafone\", \"Orange\", \"T-Mobile\"],\n\n  // Asia\n  cn: [\"China Mobile\", \"China Unicom\", \"China Telecom\"],\n  in: [\"Airtel\", \"Vodafone Idea\", \"Jio\", \"BSNL\"],\n  jp: [\"NTT Docomo\", \"SoftBank\", \"KDDI\", \"Rakuten Mobile\"],\n  kr: [\"SK Telecom\", \"KT\", \"LG U+\"],\n  id: [\"Telkomsel\", \"Indosat\", \"XL Axiata\", \"3\"],\n  ph: [\"Globe\", \"Smart\", \"DITO\", \"Sun Cellular\"],\n  my: [\"Maxis\", \"Celcom\", \"Digi\", \"U Mobile\"],\n  sg: [\"Singtel\", \"StarHub\", \"M1\", \"Circles.Life\"],\n  th: [\"AIS\", \"dtac\", \"TrueMove H\"],\n  vn: [\"Viettel\", \"MobiFone\", \"Vinaphone\"],\n  middle_east: [\"Etisalat\", \"STC\", \"Ooredoo\", \"Zain\"],\n  asia_other: [\"Local Carrier 1\", \"Local Carrier 2\", \"Regional Carrier\"],\n\n  // Africa\n  za: [\"Vodacom\", \"MTN\", \"Cell C\", \"Telkom Mobile\"],\n  ng: [\"MTN\", \"Airtel\", \"Glo\", \"9mobile\"],\n  eg: [\"Orange\", \"Vodafone\", \"Etisalat\", \"WE\"],\n  ke: [\"Safaricom\", \"Airtel\", \"Telkom Kenya\"],\n  ma: [\"Maroc Telecom\", \"Orange\", \"inwi\"],\n  gh: [\"MTN\", \"Vodafone\", \"AirtelTigo\"],\n  et: [\"Ethio Telecom\", \"Safaricom Ethiopia\"],\n  tz: [\"Vodacom\", \"Airtel\", \"Tigo\", \"TTCL\"],\n  africa_other: [\"MTN\", \"Airtel\", \"Orange\", \"Vodafone\"],\n\n  // Oceania\n  au: [\"Telstra\", \"Optus\", \"Vodafone\", \"TPG\"],\n  nz: [\"Spark\", \"Vodafone\", \"2degrees\"],\n  pg: [\"bmobile\", \"Digicel\"],\n  pacific: [\"Telecom Fiji\", \"bmobile\", \"Digicel\"],\n};\n\nexport const getCountriesByRegion = (region: string): Country[] => {\n  return COUNTRIES.filter(country => country.region === region);\n};\n\nexport const getCarriers = (countryCode: string): string[] => {\n  return CARRIERS[countryCode] || [];\n};","size_bytes":6999},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, varchar, jsonb, uuid, primaryKey } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull(), // 'admin', 'employee', 'retailer'\n  employeeRole: text(\"employee_role\"), // 'accountant', 'technical_support', etc.\n  employeeId: text(\"employee_id\").unique(), // Required for employees - used for verification\n  commissionGroupId: integer(\"commission_group_id\").references(() => commissionGroups.id),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  resetToken: text(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  phoneNumber: text(\"phone_number\").notNull(),\n  country: text(\"country\").notNull(),\n  carrier: text(\"carrier\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  serviceFee: decimal(\"service_fee\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  status: text(\"status\").notNull(), // 'pending', 'completed', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const savedNumbers = pgTable(\"saved_numbers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  phoneNumber: text(\"phone_number\").notNull(),\n  label: text(\"label\").notNull(),\n  country: text(\"country\").notNull(),\n  carrier: text(\"carrier\").notNull(),\n});\n\nexport const permissions = pgTable(\"permissions\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n});\n\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  role: text(\"role\").notNull(),\n  permissionId: integer(\"permission_id\").references(() => permissions.id),\n});\n\n// Plans table for admin-managed pricing\nexport const plans = pgTable(\"plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  carrier: text(\"carrier\").notNull(),\n  country: text(\"country\").notNull(),\n  denomination: text(\"denomination\").notNull(), // e.g., \"$10\", \"$25\", \"500MB\"\n  retailerPrice: decimal(\"retailer_price\", { precision: 10, scale: 2 }).notNull(), // Price charged to retailer\n  customerPrice: decimal(\"customer_price\", { precision: 10, scale: 2 }), // Price customer pays to retailer  \n  ourCost: decimal(\"our_cost\", { precision: 10, scale: 2 }).notNull(), // Our cost for this plan\n  profit: decimal(\"profit\", { precision: 10, scale: 2 }).notNull(), // Calculated profit (retailerPrice - ourCost)\n  serviceType: text(\"service_type\").notNull(), // \"nexitel\", \"global_recharge\", \"voip\", \"att\", \"nexitel_recharge\", \"att_recharge\"\n  isActive: boolean(\"is_active\").default(true),\n  planType: text(\"plan_type\").notNull(), // \"prepaid\", \"data\", \"voice\", \"unlimited\"\n  description: text(\"description\"),\n  // Multi-month pricing fields\n  durationMonths: integer(\"duration_months\").default(1).notNull(),\n  isPromotional: boolean(\"is_promotional\").default(false),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  discountPercentage: decimal(\"discount_percentage\", { precision: 5, scale: 2 }),\n  promotionalLabel: text(\"promotional_label\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Plan performance metrics table\nexport const planPerformanceMetrics = pgTable(\"plan_performance_metrics\", {\n  id: serial(\"id\").primaryKey(),\n  planId: integer(\"plan_id\").references(() => plans.id),\n  date: timestamp(\"date\").defaultNow(),\n  transactionCount: integer(\"transaction_count\").default(0),\n  revenue: decimal(\"revenue\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  profit: decimal(\"profit\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  successRate: decimal(\"success_rate\", { precision: 5, scale: 2 }).default(\"100.00\"), // percentage\n  averageTransactionValue: decimal(\"average_transaction_value\", { precision: 10, scale: 2 }).default(\"0.00\"),\n});\n\n// Commission groups table\nexport const commissionGroups = pgTable(\"commission_groups\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(), // \"Commission Group A\", \"Commission Group B\", etc.\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Commission pricing table - links groups to specific plan pricing\nexport const commissionPricing = pgTable(\"commission_pricing\", {\n  id: serial(\"id\").primaryKey(),\n  commissionGroupId: integer(\"commission_group_id\").references(() => commissionGroups.id),\n  planId: integer(\"plan_id\").references(() => plans.id),\n  ourCost: decimal(\"our_cost\", { precision: 10, scale: 2 }).notNull(), // What it costs us\n  sellingPrice: decimal(\"selling_price\", { precision: 10, scale: 2 }).notNull(), // What we sell to retailer for\n  customerPrice: decimal(\"customer_price\", { precision: 10, scale: 2 }), // What customer pays to retailer\n  profit: decimal(\"profit\", { precision: 10, scale: 2 }).notNull(), // Calculated profit (sellingPrice - ourCost)\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  transactions: many(transactions),\n  savedNumbers: many(savedNumbers),\n  commissionGroup: one(commissionGroups, {\n    fields: [users.commissionGroupId],\n    references: [commissionGroups.id],\n  }),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const savedNumbersRelations = relations(savedNumbers, ({ one }) => ({\n  user: one(users, {\n    fields: [savedNumbers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const plansRelations = relations(plans, ({ many }) => ({\n  commissionPricing: many(commissionPricing),\n  performanceMetrics: many(planPerformanceMetrics),\n}));\n\nexport const planPerformanceMetricsRelations = relations(planPerformanceMetrics, ({ one }) => ({\n  plan: one(plans, {\n    fields: [planPerformanceMetrics.planId],\n    references: [plans.id],\n  }),\n}));\n\nexport const commissionGroupsRelations = relations(commissionGroups, ({ many }) => ({\n  users: many(users),\n  commissionPricing: many(commissionPricing),\n}));\n\nexport const commissionPricingRelations = relations(commissionPricing, ({ one }) => ({\n  commissionGroup: one(commissionGroups, {\n    fields: [commissionPricing.commissionGroupId],\n    references: [commissionGroups.id],\n  }),\n  plan: one(plans, {\n    fields: [commissionPricing.planId],\n    references: [plans.id],\n  }),\n}));\n\n// AT&T Activations table\nexport const attActivations = pgTable(\"att_activations\", {\n  id: serial(\"id\").primaryKey(),\n  activatedBy: integer(\"activated_by\").references(() => users.id),\n  employeeId: text(\"employee_id\"), // For employee verification\n  // Customer Information\n  customerFirstName: text(\"customer_first_name\").notNull(),\n  customerLastName: text(\"customer_last_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerAddress: text(\"customer_address\").notNull(),\n  customerCity: text(\"customer_city\").notNull(),\n  customerState: text(\"customer_state\").notNull(),\n  customerZipCode: text(\"customer_zip_code\").notNull(),\n  // SIM Information\n  iccid: text(\"iccid\").notNull(),\n  simType: text(\"sim_type\").notNull(), // \"physical\", \"esim\"\n  // Plan Information\n  planId: integer(\"plan_id\").references(() => plans.id),\n  planName: text(\"plan_name\").notNull(),\n  planPrice: decimal(\"plan_price\", { precision: 10, scale: 2 }).notNull(),\n  // International & Roaming Options\n  hasInternational: boolean(\"has_international\").default(false),\n  internationalCountries: jsonb(\"international_countries\"), // Array of country codes\n  internationalCost: decimal(\"international_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  hasRoaming: boolean(\"has_roaming\").default(false),\n  roamingRegions: jsonb(\"roaming_regions\"), // Array of roaming regions\n  roamingCost: decimal(\"roaming_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  // Data Add-ons\n  hasDataAddon: boolean(\"has_data_addon\").default(false),\n  dataAddonAmount: text(\"data_addon_amount\"), // \"1GB\", \"5GB\", etc.\n  dataAddonCost: decimal(\"data_addon_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  // Port-in Information\n  isPortIn: boolean(\"is_port_in\").default(false),\n  portInPhoneNumber: text(\"port_in_phone_number\"),\n  portInCarrier: text(\"port_in_carrier\"),\n  portInAccountNumber: text(\"port_in_account_number\"),\n  portInPin: text(\"port_in_pin\"),\n  portInZipCode: text(\"port_in_zip_code\"),\n  // WiFi Calling\n  hasWifiCalling: boolean(\"has_wifi_calling\").default(false),\n  wifiEmergencyAddress: text(\"wifi_emergency_address\"),\n  wifiEmergencyCity: text(\"wifi_emergency_city\"),\n  wifiEmergencyState: text(\"wifi_emergency_state\"),\n  wifiEmergencyZipCode: text(\"wifi_emergency_zip_code\"),\n  // Activation Details\n  phoneNumber: text(\"phone_number\"), // Assigned phone number\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"completed\", \"failed\"\n  activationDate: timestamp(\"activation_date\").defaultNow(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AT&T Data Add-ons table (for after-activation purchases)\nexport const attDataAddons = pgTable(\"att_data_addons\", {\n  id: serial(\"id\").primaryKey(),\n  phoneNumber: text(\"phone_number\").notNull(),\n  customerId: integer(\"customer_id\").references(() => users.id),\n  soldBy: integer(\"sold_by\").references(() => users.id),\n  employeeId: text(\"employee_id\"), // For employee verification\n  dataAmount: text(\"data_amount\").notNull(), // \"1GB\", \"5GB\", etc.\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).notNull(),\n  validFor: text(\"valid_for\").notNull(), // \"30 days\", \"90 days\", etc.\n  status: text(\"status\").notNull().default(\"active\"), // \"active\", \"expired\", \"used\"\n  purchaseDate: timestamp(\"purchase_date\").defaultNow(),\n});\n\n// AT&T SIM Swaps table\nexport const attSimSwaps = pgTable(\"att_sim_swaps\", {\n  id: serial(\"id\").primaryKey(),\n  phoneNumber: text(\"phone_number\").notNull(),\n  processedBy: integer(\"processed_by\").references(() => users.id),\n  employeeId: text(\"employee_id\"), // For employee verification\n  oldIccid: text(\"old_iccid\").notNull(),\n  newIccid: text(\"new_iccid\").notNull(),\n  newSimType: text(\"new_sim_type\").notNull(), // \"physical\", \"esim\"\n  reason: text(\"reason\").notNull(), // \"damaged\", \"lost\", \"upgrade\"\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"completed\", \"failed\"\n  swapDate: timestamp(\"swap_date\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// AT&T Recharges table\nexport const attRecharges = pgTable(\"att_recharges\", {\n  id: serial(\"id\").primaryKey(),\n  phoneNumber: text(\"phone_number\").notNull(),\n  rechargedBy: integer(\"recharged_by\").references(() => users.id),\n  employeeId: text(\"employee_id\"), // For employee verification\n  planId: integer(\"plan_id\").references(() => plans.id),\n  planName: text(\"plan_name\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  commission: decimal(\"commission\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  profit: decimal(\"profit\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"completed\", \"failed\"\n  rechargeDate: timestamp(\"recharge_date\").defaultNow(),\n  expiryDate: timestamp(\"expiry_date\"),\n  notes: text(\"notes\"),\n});\n\n// Bulk AT&T Activations table\nexport const attBulkActivations = pgTable(\"att_bulk_activations\", {\n  id: serial(\"id\").primaryKey(),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  employeeId: text(\"employee_id\"), // For employee verification\n  fileName: text(\"file_name\").notNull(),\n  totalRecords: integer(\"total_records\").notNull(),\n  processedRecords: integer(\"processed_records\").default(0),\n  successfulActivations: integer(\"successful_activations\").default(0),\n  failedActivations: integer(\"failed_activations\").default(0),\n  csvData: jsonb(\"csv_data\").notNull(), // Store the CSV data\n  processingStatus: text(\"processing_status\").notNull().default(\"pending\"), // \"pending\", \"processing\", \"completed\", \"failed\"\n  processingStarted: timestamp(\"processing_started\"),\n  processingCompleted: timestamp(\"processing_completed\"),\n  errorReport: jsonb(\"error_report\"), // Store any errors that occurred\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Retailer AT&T Permissions table\nexport const retailerAttPermissions = pgTable(\"retailer_att_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  canActivate: boolean(\"can_activate\").default(false),\n  canRecharge: boolean(\"can_recharge\").default(false),\n  canSimSwap: boolean(\"can_sim_swap\").default(false),\n  canSellDataAddons: boolean(\"can_sell_data_addons\").default(false),\n  canPortIn: boolean(\"can_port_in\").default(false),\n  canEnableWifiCalling: boolean(\"can_enable_wifi_calling\").default(false),\n  canBulkActivate: boolean(\"can_bulk_activate\").default(false),\n  maxDailyActivations: integer(\"max_daily_activations\").default(100),\n  maxDailyRecharges: integer(\"max_daily_recharges\").default(500),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  employeeId: z.string().optional(),\n  employeeRole: z.string().optional(),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSavedNumberSchema = createInsertSchema(savedNumbers).omit({\n  id: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  denomination: z.union([z.string(), z.number()]).transform(val => String(val)),\n  ourCost: z.union([z.string(), z.number()]).transform(val => String(val)),\n  profit: z.union([z.string(), z.number()]).transform(val => String(val)),\n  originalPrice: z.union([z.string(), z.number(), z.null(), z.undefined()]).transform(val => val ? String(val) : null).optional(),\n  discountPercentage: z.union([z.string(), z.number(), z.null(), z.undefined()]).transform(val => val ? String(val) : null).optional(),\n});\n\nexport const insertCommissionGroupSchema = createInsertSchema(commissionGroups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommissionPricingSchema = createInsertSchema(commissionPricing).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlanPerformanceMetricSchema = createInsertSchema(planPerformanceMetrics).omit({\n  id: true,\n});\n\n// AT&T Insert Schemas\nexport const insertAttActivationSchema = createInsertSchema(attActivations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttDataAddonSchema = createInsertSchema(attDataAddons).omit({\n  id: true,\n  purchaseDate: true,\n});\n\nexport const insertAttSimSwapSchema = createInsertSchema(attSimSwaps).omit({\n  id: true,\n  swapDate: true,\n});\n\nexport const insertAttRechargeSchema = createInsertSchema(attRecharges).omit({\n  id: true,\n  rechargeDate: true,\n});\n\nexport const insertAttBulkActivationSchema = createInsertSchema(attBulkActivations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRetailerAttPermissionSchema = createInsertSchema(retailerAttPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// AT&T Validation Schemas\nexport const attActivationSchema = z.object({\n  // Customer Information\n  customerFirstName: z.string().min(1, \"First name is required\"),\n  customerLastName: z.string().min(1, \"Last name is required\"),\n  customerEmail: z.string().email(\"Valid email is required\"),\n  customerAddress: z.string().min(1, \"Address is required\"),\n  customerCity: z.string().min(1, \"City is required\"),\n  customerState: z.string().min(1, \"State is required\"),\n  customerZipCode: z.string().min(1, \"ZIP code is required\"),\n  // SIM Information\n  iccid: z.string().min(1, \"ICCID is required\"),\n  simType: z.enum([\"physical\", \"esim\"]),\n  // Plan Information\n  planId: z.number().min(1, \"Plan selection is required\"),\n  // International & Roaming Options\n  hasInternational: z.boolean().optional().default(false),\n  internationalCountries: z.array(z.string()).optional(),\n  internationalCost: z.number().min(0).optional().default(0),\n  hasRoaming: z.boolean().optional().default(false),\n  roamingRegions: z.array(z.string()).optional(),\n  roamingCost: z.number().min(0).optional().default(0),\n  // Data Add-ons\n  hasDataAddon: z.boolean().optional().default(false),\n  dataAddonAmount: z.string().optional(),\n  dataAddonCost: z.number().min(0).optional().default(0),\n  // Port-in Information\n  isPortIn: z.boolean().optional().default(false),\n  portInPhoneNumber: z.string().optional(),\n  portInCarrier: z.string().optional(),\n  portInAccountNumber: z.string().optional(),\n  portInPin: z.string().optional(),\n  portInZipCode: z.string().optional(),\n  // WiFi Calling\n  hasWifiCalling: z.boolean().optional().default(false),\n  wifiEmergencyAddress: z.string().optional(),\n  wifiEmergencyCity: z.string().optional(),\n  wifiEmergencyState: z.string().optional(),\n  wifiEmergencyZipCode: z.string().optional(),\n  // Employee verification (required for admin, optional for others)\n  employeeId: z.string().optional(),\n  // Additional\n  notes: z.string().optional(),\n});\n\nexport const attDataAddonSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  dataAmount: z.string().min(1, \"Data amount is required\"),\n  cost: z.number().min(0, \"Cost must be positive\"),\n  validFor: z.string().min(1, \"Validity period is required\"),\n  employeeId: z.string().optional(),\n});\n\nexport const attSimSwapSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  oldIccid: z.string().min(1, \"Old ICCID is required\"),\n  newIccid: z.string().min(1, \"New ICCID is required\"),\n  newSimType: z.enum([\"physical\", \"esim\"]),\n  reason: z.enum([\"damaged\", \"lost\", \"upgrade\"]),\n  cost: z.number().min(0, \"Cost must be positive\"),\n  employeeId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport const attRechargeSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  planId: z.number().min(1, \"Plan selection is required\"),\n  employeeId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport const attBulkActivationSchema = z.object({\n  fileName: z.string().min(1, \"File name is required\"),\n  csvData: z.array(z.object({})).min(1, \"CSV data is required\"),\n  employeeId: z.string().optional(),\n});\n\nexport const retailerAttPermissionSchema = z.object({\n  userId: z.number().min(1, \"User ID is required\"),\n  canActivate: z.boolean().optional().default(false),\n  canRecharge: z.boolean().optional().default(false),\n  canSimSwap: z.boolean().optional().default(false),\n  canSellDataAddons: z.boolean().optional().default(false),\n  canPortIn: z.boolean().optional().default(false),\n  canEnableWifiCalling: z.boolean().optional().default(false),\n  canBulkActivate: z.boolean().optional().default(false),\n  maxDailyActivations: z.number().min(1).optional().default(100),\n  maxDailyRecharges: z.number().min(1).optional().default(500),\n});\n\nexport const planManagementSchema = z.object({\n  name: z.string().min(1, \"Plan name is required\"),\n  carrier: z.string().min(1, \"Carrier is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  denomination: z.union([z.string(), z.number()]).transform(val => {\n    // Remove $ sign and convert to string\n    const cleanVal = String(val).replace('$', '');\n    return cleanVal;\n  }),\n  ourCost: z.union([z.string(), z.number()]).transform(val => String(val)),\n  serviceType: z.enum([\"nexitel\", \"nexitel_recharge\", \"att_recharge\", \"global_recharge\", \"voip\", \"att\"]),\n  planType: z.enum([\"prepaid\", \"data\", \"voice\", \"unlimited\"]),\n  description: z.string().optional(),\n  durationMonths: z.number().min(1).max(24).optional().default(1),\n  isPromotional: z.boolean().optional().default(false),\n  originalPrice: z.union([z.string(), z.number(), z.null(), z.undefined()]).transform(val => val ? String(val) : null).optional(),\n  discountPercentage: z.union([z.string(), z.number(), z.null(), z.undefined()]).transform(val => val ? String(val) : null).optional(),\n  promotionalLabel: z.string().optional(),\n});\n\nexport const commissionGroupSchema = z.object({\n  name: z.string().min(1, \"Group name is required\"),\n  description: z.string().optional(),\n});\n\nexport const commissionPricingSchema = z.object({\n  commissionGroupId: z.number().min(1, \"Commission group is required\"),\n  planId: z.number().min(1, \"Plan is required\"),\n  ourCost: z.number().min(0, \"Our cost must be positive\"),\n  sellingPrice: z.number().min(0, \"Selling price must be positive\"),\n}).refine((data) => data.sellingPrice > data.ourCost, {\n  message: \"Selling price must be greater than our cost\",\n  path: [\"sellingPrice\"],\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const rechargeSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  carrier: z.string().min(1, \"Carrier is required\"),\n  amount: z.number().min(1, \"Amount must be greater than 0\"),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertSavedNumber = z.infer<typeof insertSavedNumberSchema>;\nexport type SavedNumber = typeof savedNumbers.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertCommissionGroup = z.infer<typeof insertCommissionGroupSchema>;\nexport type CommissionGroup = typeof commissionGroups.$inferSelect;\nexport type InsertCommissionPricing = z.infer<typeof insertCommissionPricingSchema>;\nexport type CommissionPricing = typeof commissionPricing.$inferSelect;\nexport type InsertPlanPerformanceMetric = z.infer<typeof insertPlanPerformanceMetricSchema>;\nexport type PlanPerformanceMetric = typeof planPerformanceMetrics.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type RechargeRequest = z.infer<typeof rechargeSchema>;\nexport type PlanManagementRequest = z.infer<typeof planManagementSchema>;\nexport type CommissionGroupRequest = z.infer<typeof commissionGroupSchema>;\nexport type CommissionPricingRequest = z.infer<typeof commissionPricingSchema>;\n\n// AT&T Types\nexport type InsertAttActivation = z.infer<typeof insertAttActivationSchema>;\nexport type AttActivation = typeof attActivations.$inferSelect;\nexport type InsertAttDataAddon = z.infer<typeof insertAttDataAddonSchema>;\nexport type AttDataAddon = typeof attDataAddons.$inferSelect;\nexport type InsertAttSimSwap = z.infer<typeof insertAttSimSwapSchema>;\nexport type AttSimSwap = typeof attSimSwaps.$inferSelect;\nexport type InsertAttRecharge = z.infer<typeof insertAttRechargeSchema>;\nexport type AttRecharge = typeof attRecharges.$inferSelect;\nexport type InsertAttBulkActivation = z.infer<typeof insertAttBulkActivationSchema>;\nexport type AttBulkActivation = typeof attBulkActivations.$inferSelect;\nexport type InsertRetailerAttPermission = z.infer<typeof insertRetailerAttPermissionSchema>;\nexport type RetailerAttPermission = typeof retailerAttPermissions.$inferSelect;\nexport type AttActivationRequest = z.infer<typeof attActivationSchema>;\nexport type AttDataAddonRequest = z.infer<typeof attDataAddonSchema>;\nexport type AttSimSwapRequest = z.infer<typeof attSimSwapSchema>;\nexport type AttRechargeRequest = z.infer<typeof attRechargeSchema>;\nexport type AttBulkActivationRequest = z.infer<typeof attBulkActivationSchema>;\nexport type RetailerAttPermissionRequest = z.infer<typeof retailerAttPermissionSchema>;\n\n// Password reset schemas\nexport const forgotUsernameSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nexport const forgotPasswordSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  token: z.string().min(1, \"Reset token is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type ForgotUsernameRequest = z.infer<typeof forgotUsernameSchema>;\nexport type ForgotPasswordRequest = z.infer<typeof forgotPasswordSchema>;\nexport type ResetPasswordRequest = z.infer<typeof resetPasswordSchema>;\n\n// Employee ID verification schema\nexport const employeeVerificationSchema = z.object({\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\nexport type EmployeeVerificationRequest = z.infer<typeof employeeVerificationSchema>;\n\n// Additional comprehensive tables for full system\nexport const carriers = pgTable(\"carriers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  country: text(\"country\").notNull(),\n  type: text(\"type\").notNull(), // \"mobile\", \"landline\", \"voip\"\n  isActive: boolean(\"is_active\").default(true),\n  metadata: jsonb(\"metadata\"), // Store additional carrier-specific data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const rechargeHistory = pgTable(\"recharge_history\", {\n  id: serial(\"id\").primaryKey(),\n  transactionId: integer(\"transaction_id\").references(() => transactions.id),\n  userId: integer(\"user_id\").references(() => users.id),\n  adminUserId: integer(\"admin_user_id\").references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  commission: decimal(\"commission\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  adminProfit: decimal(\"admin_profit\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  userBalanceBefore: decimal(\"user_balance_before\", { precision: 10, scale: 2 }).notNull(),\n  userBalanceAfter: decimal(\"user_balance_after\", { precision: 10, scale: 2 }).notNull(),\n  adminBalanceBefore: decimal(\"admin_balance_before\", { precision: 10, scale: 2 }).notNull(),\n  adminBalanceAfter: decimal(\"admin_balance_after\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull(), // \"pending\", \"completed\", \"failed\"\n  metadata: jsonb(\"metadata\"), // Store additional transaction data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const fundTransfers = pgTable(\"fund_transfers\", {\n  id: serial(\"id\").primaryKey(),\n  fromUserId: integer(\"from_user_id\").references(() => users.id),\n  toUserId: integer(\"to_user_id\").references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull(), // \"pending\", \"completed\", \"failed\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const sessionLogs = pgTable(\"session_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  sessionId: text(\"session_id\").notNull(),\n  action: text(\"action\").notNull(), // \"login\", \"logout\", \"transaction\", etc.\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  type: text(\"type\").notNull(), // \"string\", \"number\", \"boolean\", \"json\"\n  description: text(\"description\"),\n  isEditable: boolean(\"is_editable\").default(true),\n  updatedBy: integer(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // \"info\", \"warning\", \"error\", \"success\"\n  isRead: boolean(\"is_read\").default(false),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  entityType: text(\"entity_type\").notNull(), // \"user\", \"transaction\", \"plan\", etc.\n  entityId: text(\"entity_id\").notNull(),\n  action: text(\"action\").notNull(), // \"create\", \"update\", \"delete\"\n  oldValues: jsonb(\"old_values\"),\n  newValues: jsonb(\"new_values\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wifiCallingActivations = pgTable(\"wifi_calling_activations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  phoneNumber: text(\"phone_number\").notNull(),\n  plan: text(\"plan\").notNull(),\n  deviceType: text(\"device_type\"), // \"iOS\", \"Android\", \"Desktop\"\n  emergencyAddress: jsonb(\"emergency_address\"), // Street, city, state, zip\n  status: text(\"status\").notNull(), // \"pending\", \"activated\", \"failed\"\n  activationDate: timestamp(\"activation_date\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const nexitelActivations = pgTable(\"nexitel_activations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  iccid: text(\"iccid\").notNull(),\n  simType: text(\"sim_type\").notNull(), // \"physical\", \"esim\"\n  carrier: text(\"carrier\").notNull(), // \"nexitel-purple\", \"nexitel-blue\"\n  plan: text(\"plan\").notNull(),\n  customerInfo: jsonb(\"customer_info\"), // Name, address, etc.\n  status: text(\"status\").notNull(), // \"pending\", \"activated\", \"failed\"\n  activationDate: timestamp(\"activation_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// VoIP Activation Tables\nexport const voipPlans = pgTable(\"voip_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 10, scale: 2 }).notNull(),\n  features: text(\"features\").array(), // Array of feature strings\n  maxUsers: integer(\"max_users\").default(1),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const voipActivations = pgTable(\"voip_activations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  planId: integer(\"plan_id\").references(() => voipPlans.id),\n  voipNumber: text(\"voip_number\").notNull().unique(),\n  activationCode: text(\"activation_code\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  status: text(\"status\").notNull().default(\"active\"), // 'active', 'suspended', 'cancelled'\n  activatedAt: timestamp(\"activated_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"),\n  isEmailSent: boolean(\"is_email_sent\").default(false),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const voipBulkActivations = pgTable(\"voip_bulk_activations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  planId: integer(\"plan_id\").references(() => voipPlans.id),\n  batchName: text(\"batch_name\").notNull(),\n  totalNumbers: integer(\"total_numbers\").notNull(),\n  activatedNumbers: integer(\"activated_numbers\").default(0),\n  status: text(\"status\").notNull().default(\"processing\"), // 'processing', 'completed', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// VoIP Relations\nexport const voipPlansRelations = relations(voipPlans, ({ many }) => ({\n  activations: many(voipActivations),\n  bulkActivations: many(voipBulkActivations),\n}));\n\nexport const voipActivationsRelations = relations(voipActivations, ({ one }) => ({\n  user: one(users, {\n    fields: [voipActivations.userId],\n    references: [users.id],\n  }),\n  plan: one(voipPlans, {\n    fields: [voipActivations.planId],\n    references: [voipPlans.id],\n  }),\n}));\n\nexport const voipBulkActivationsRelations = relations(voipBulkActivations, ({ one }) => ({\n  user: one(users, {\n    fields: [voipBulkActivations.userId],\n    references: [users.id],\n  }),\n  plan: one(voipPlans, {\n    fields: [voipBulkActivations.planId],\n    references: [voipPlans.id],\n  }),\n}));\n\n// VoIP Schemas\nexport const insertVoipPlanSchema = createInsertSchema(voipPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVoipActivationSchema = createInsertSchema(voipActivations).omit({\n  id: true,\n  createdAt: true,\n  activatedAt: true,\n});\n\nexport const insertVoipBulkActivationSchema = createInsertSchema(voipBulkActivations).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const voipActivationSchema = z.object({\n  planId: z.number().min(1, \"Plan is required\"),\n  customerEmail: z.string().email(\"Valid email is required\"),\n  customerName: z.string().min(1, \"Customer name is required\"),\n  customerPhone: z.string().optional(),\n  notes: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\nexport const voipBulkActivationSchema = z.object({\n  planId: z.number().min(1, \"Plan is required\"),\n  batchName: z.string().min(1, \"Batch name is required\"),\n  totalNumbers: z.number().min(1, \"Total numbers must be greater than 0\"),\n  customers: z.array(z.object({\n    email: z.string().email(\"Valid email is required\"),\n    name: z.string().min(1, \"Customer name is required\"),\n    phone: z.string().optional(),\n  })),\n});\n\nexport type InsertVoipPlan = z.infer<typeof insertVoipPlanSchema>;\nexport type VoipPlan = typeof voipPlans.$inferSelect;\nexport type InsertVoipActivation = z.infer<typeof insertVoipActivationSchema>;\nexport type VoipActivation = typeof voipActivations.$inferSelect;\nexport type InsertVoipBulkActivation = z.infer<typeof insertVoipBulkActivationSchema>;\nexport type VoipBulkActivation = typeof voipBulkActivations.$inferSelect;\nexport type VoipActivationRequest = z.infer<typeof voipActivationSchema>;\nexport type VoipBulkActivationRequest = z.infer<typeof voipBulkActivationSchema>;\n\n// Retailer documents table\nexport const retailerDocuments = pgTable(\"retailer_documents\", {\n  id: serial(\"id\").primaryKey(),\n  retailerId: integer(\"retailer_id\").references(() => users.id),\n  documentType: text(\"document_type\").notNull(), // 'reseller_agreement', 'reseller_certificate', 'copy_of_ein', 'state_business_certificate', 'retailer_photo_id', 'void_check'\n  fileName: text(\"file_name\").notNull(),\n  originalFileName: text(\"original_file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(), // Object storage path\n  fileSize: integer(\"file_size\"), // File size in bytes\n  mimeType: text(\"mime_type\"),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id), // Who uploaded the document\n  status: text(\"status\").default(\"pending\").notNull(), // 'pending', 'approved', 'rejected'\n  notes: text(\"notes\"), // Admin notes about the document\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const retailerDocumentsRelations = relations(retailerDocuments, ({ one }) => ({\n  retailer: one(users, {\n    fields: [retailerDocuments.retailerId],\n    references: [users.id],\n  }),\n  uploadedByUser: one(users, {\n    fields: [retailerDocuments.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const insertRetailerDocumentSchema = createInsertSchema(retailerDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type RetailerDocument = typeof retailerDocuments.$inferSelect;\nexport type InsertRetailerDocument = z.infer<typeof insertRetailerDocumentSchema>;\n\n// Retailer Permissions Schema for Service Access Control\nexport const retailerPermissions = pgTable(\"retailer_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  retailerId: integer(\"retailer_id\").notNull().references(() => users.id, { onDelete: 'cascade' }).unique(),\n  voipServiceAccess: boolean(\"voip_service_access\").notNull().default(false),\n  globalRechargeAccess: boolean(\"global_recharge_access\").notNull().default(false),\n  usaRechargeAccess: boolean(\"usa_recharge_access\").notNull().default(false),\n  walletFundingAccess: boolean(\"wallet_funding_access\").notNull().default(false),\n  maxDailyFunding: decimal(\"max_daily_funding\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  maxMonthlyFunding: decimal(\"max_monthly_funding\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  nexitelActivationAccess: boolean(\"nexitel_activation_access\").notNull().default(false),\n  simSwapAccess: boolean(\"sim_swap_access\").notNull().default(false),\n  portInAccess: boolean(\"port_in_access\").notNull().default(false),\n  reportAccess: boolean(\"report_access\").notNull().default(true), // Default true for basic reports\n  bulkActivationAccess: boolean(\"bulk_activation_access\").notNull().default(false),\n  customLimits: text(\"custom_limits\"), // JSON string for additional custom permission rules\n  notes: text(\"notes\"), // Admin notes about the permissions\n  createdBy: integer(\"created_by\").notNull().references(() => users.id),\n  updatedBy: integer(\"updated_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const retailerPermissionsRelations = relations(retailerPermissions, ({ one }) => ({\n  retailer: one(users, {\n    fields: [retailerPermissions.retailerId],\n    references: [users.id],\n  }),\n  createdByUser: one(users, {\n    fields: [retailerPermissions.createdBy],\n    references: [users.id],\n  }),\n  updatedByUser: one(users, {\n    fields: [retailerPermissions.updatedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const insertRetailerPermissionSchema = createInsertSchema(retailerPermissions).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport type RetailerPermission = typeof retailerPermissions.$inferSelect;\nexport type InsertRetailerPermission = z.infer<typeof insertRetailerPermissionSchema>;\n\n// Wallet Payment System\nexport const paymentTransactions = pgTable(\"payment_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 20 }).notNull(), // \"credit_card\", \"debit_card\"\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\", { length: 255 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"), // \"pending\", \"completed\", \"failed\", \"refunded\"\n  description: varchar(\"description\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  failureReason: text(\"failure_reason\"),\n});\n\nexport const userWalletPermissions = pgTable(\"user_wallet_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id).unique(),\n  canAddFunds: boolean(\"can_add_funds\").notNull().default(false),\n  maxDailyFunding: decimal(\"max_daily_funding\", { precision: 10, scale: 2 }),\n  maxMonthlyFunding: decimal(\"max_monthly_funding\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment Relations\nexport const paymentTransactionsRelations = relations(paymentTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [paymentTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userWalletPermissionsRelations = relations(userWalletPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userWalletPermissions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Payment Schemas\nexport const insertPaymentTransactionSchema = createInsertSchema(paymentTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserWalletPermissionSchema = createInsertSchema(userWalletPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const addFundsSchema = z.object({\n  amount: z.number().min(5, \"Minimum funding amount is $5\").max(5000, \"Maximum funding amount is $5000\"),\n  paymentMethod: z.enum([\"credit_card\", \"debit_card\"]),\n});\n\nexport type PaymentTransaction = typeof paymentTransactions.$inferSelect;\nexport type InsertPaymentTransaction = z.infer<typeof insertPaymentTransactionSchema>;\nexport type UserWalletPermission = typeof userWalletPermissions.$inferSelect;\nexport type InsertUserWalletPermission = z.infer<typeof insertUserWalletPermissionSchema>;\nexport type AddFundsRequest = z.infer<typeof addFundsSchema>;\n\n// Activity Tracking Tables for ICCID and Mobile Number Search\nexport const activationRecords = pgTable(\"activation_records\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  iccid: text(\"iccid\").notNull(),\n  imei: text(\"imei\"),\n  mobileNumber: text(\"mobile_number\"),\n  sku: text(\"sku\").notNull(),\n  carrier: text(\"carrier\").notNull(), // nexitel_blue, nexitel_purple, global, usa_carrier\n  serviceType: text(\"service_type\").notNull(), // nexitel, global_recharge, usa_recharge\n  customerName: text(\"customer_name\").notNull(),\n  customerAddress: text(\"customer_address\").notNull(),\n  customerAddress2: text(\"customer_address_2\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  zip: text(\"zip\"),\n  email: text(\"email\").notNull(),\n  commentsNotes: text(\"comments_notes\"),\n  autoRenew: text(\"auto_renew\"),\n  dateOfActivation: timestamp(\"date_of_activation\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, active, failed, suspended\n  activationFee: decimal(\"activation_fee\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  commission: decimal(\"commission\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Comprehensive Recharge Records for all types  \nexport const rechargeRecords = pgTable(\"recharge_records\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  mobileNumber: text(\"mobile_number\").notNull(),\n  iccid: text(\"iccid\"), // Optional for global recharges\n  country: text(\"country\").notNull(),\n  carrier: text(\"carrier\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  serviceFee: decimal(\"service_fee\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  commission: decimal(\"commission\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed\n  rechargeType: text(\"recharge_type\").notNull(), // global, usa_carrier, nexitel\n  transactionId: text(\"transaction_id\"), // External transaction ID\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Commission tracking for all activities\nexport const commissionHistory = pgTable(\"commission_history\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  entityType: text(\"entity_type\").notNull(), // activation, recharge, topup\n  entityId: integer(\"entity_id\").notNull(),\n  commissionAmount: decimal(\"commission_amount\", { precision: 10, scale: 2 }).notNull(),\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).notNull(),\n  baseAmount: decimal(\"base_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wallet topup records for reporting\nexport const walletTopupRecords = pgTable(\"wallet_topup_records\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  method: text(\"method\").notNull(), // card, bank_transfer, check, cash\n  reference: text(\"reference\"), // Transaction/check reference\n  balanceBefore: decimal(\"balance_before\", { precision: 10, scale: 2 }).notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"completed\"), // pending, completed, failed\n  processedBy: integer(\"processed_by\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for new tables\nexport const insertActivationRecordSchema = createInsertSchema(activationRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRechargeRecordSchema = createInsertSchema(rechargeRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommissionHistorySchema = createInsertSchema(commissionHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWalletTopupRecordSchema = createInsertSchema(walletTopupRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Activity search schema\nexport const activitySearchSchema = z.object({\n  searchTerm: z.string().min(1, \"Search term is required\"),\n  searchType: z.enum([\"iccid\", \"mobile_number\", \"email\", \"customer_name\"]),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n  serviceType: z.enum([\"all\", \"nexitel\", \"global_recharge\", \"usa_recharge\"]).default(\"all\"),\n  status: z.enum([\"all\", \"active\", \"pending\", \"failed\", \"completed\"]).default(\"all\"),\n});\n\n// Report generation schemas\nexport const reportGenerationSchema = z.object({\n  reportType: z.enum([\"activation\", \"recharge\", \"commission\", \"wallet_topup\"]),\n  dateFrom: z.string().min(1, \"Start date is required\"),\n  dateTo: z.string().min(1, \"End date is required\"),\n  userId: z.number().optional(), // For retailer-specific reports\n  format: z.enum([\"csv\", \"excel\"]).default(\"csv\"),\n});\n\nexport type ActivationRecord = typeof activationRecords.$inferSelect;\nexport type InsertActivationRecord = z.infer<typeof insertActivationRecordSchema>;\nexport type RechargeRecord = typeof rechargeRecords.$inferSelect;\nexport type InsertRechargeRecord = z.infer<typeof insertRechargeRecordSchema>;\nexport type CommissionHistory = typeof commissionHistory.$inferSelect;\nexport type InsertCommissionHistory = z.infer<typeof insertCommissionHistorySchema>;\nexport type WalletTopupRecord = typeof walletTopupRecords.$inferSelect;\nexport type InsertWalletTopupRecord = z.infer<typeof insertWalletTopupRecordSchema>;\nexport type ActivitySearchRequest = z.infer<typeof activitySearchSchema>;\nexport type ReportGenerationRequest = z.infer<typeof reportGenerationSchema>;\n","size_bytes":48972},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/components/AuthProvider\";\n\nimport { Layout } from \"@/components/Layout\";\nimport Home from \"@/pages/Home\";\nimport NexitelActivation from \"@/pages/NexitelActivation\";\nimport NexitelRecharge from \"@/pages/NexitelRecharge\";\nimport ATTRechargeSimple from \"@/pages/ATTRechargeSimple\";\n\nimport NexitelActivationReport from \"@/pages/NexitelActivationReport\";\nimport NexitelRechargeReport from \"@/pages/NexitelRechargeReport\";\nimport NexitelSimSwap from \"@/pages/NexitelSimSwap\";\n\nimport Login from \"@/pages/Login\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\n\nimport AdminDashboard from \"@/pages/admin/Dashboard\";\nimport RetailerDashboard from \"@/pages/retailer/Dashboard\";\nimport RetailerTransactions from \"@/pages/retailer/RetailerTransactions\";\nimport TransactionTest from \"@/pages/retailer/TransactionTest\";\nimport BulkActivation from \"@/pages/retailer/BulkActivation\";\nimport WiFiEnable from \"@/pages/retailer/WiFiEnable\";\nimport NexitelMenu from \"@/pages/retailer/NexitelMenu\";\nimport GlobalMenu from \"@/pages/retailer/GlobalMenu\";\nimport AdminRecharge from \"@/pages/admin/Recharge\";\nimport GlobalRecharge from \"@/pages/admin/GlobalRecharge\";\nimport USARecharge from \"@/pages/USARecharge\";\n\nimport EmployeeManagement from \"@/pages/admin/EmployeeManagement\";\nimport RetailerManagement from \"@/pages/admin/RetailerManagement\";\nimport UserManagement from \"@/pages/admin/UserManagement\";\nimport Analytics from \"@/pages/admin/Analytics\";\nimport Reports from \"@/pages/admin/Reports\";\nimport SystemSettings from \"@/pages/admin/SystemSettings\";\nimport PlanManagement from \"@/pages/admin/PlanManagement\";\nimport CommissionManagement from \"@/pages/admin/CommissionManagement\";\nimport CommissionGroupManagement from \"@/pages/admin/CommissionGroupManagement\";\nimport FundManagement from \"@/pages/admin/FundManagement\";\nimport EmployeeDashboard from \"@/pages/employee/Dashboard\";\nimport VoipActivation from \"@/pages/VoipActivation\";\nimport VoipBulkActivation from \"@/pages/VoipBulkActivation\";\nimport VoipMenu from \"@/pages/VoipMenu\";\nimport NexiphoneApps from \"@/pages/NexiphoneApps\";\nimport WalletFunding from \"@/pages/WalletFunding\";\nimport RetailerPermissions from \"@/pages/admin/RetailerPermissions\";\n\nimport WifiCallingActivation from \"@/pages/WifiCallingActivation\";\nimport NexitelBulkActivation from \"@/pages/NexitelBulkActivation\";\nimport NexitelWifiCalling from \"@/pages/NexitelWifiCalling\";\nimport ActivityManagement from \"@/pages/ActivityManagement\";\nimport ATTServices from \"@/pages/admin/ATTServices\";\nimport ATTActivation from \"@/pages/admin/ATTActivation\";\nimport ATTDataAddons from \"@/pages/admin/ATTDataAddons\";\nimport ATTPortInStatus from \"@/pages/admin/ATTPortInStatus\";\nimport ATTSimSwap from \"@/pages/admin/ATTSimSwap\";\nimport ATTReports from \"@/pages/admin/ATTReports\";\n\nimport NexitelDataAddons from \"@/pages/nexitel/DataAddons\";\nimport NexitelPortStatusNew from \"@/pages/nexitel/PortStatus\";\nimport NexitelBulkActivationNew from \"@/pages/nexitel/BulkActivation\";\n\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ \n  children, \n  allowedRoles \n}: { \n  children: React.ReactNode; \n  allowedRoles: string[];\n}) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  \n  // Show loading while checking authentication\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2\"></div>\n        <p className=\"text-gray-600\">Loading...</p>\n      </div>\n    </div>;\n  }\n  \n  if (!isAuthenticated || !user) {\n    return <Login />;\n  }\n  \n  // Redirect users to their appropriate dashboard if they access root after login\n  if (window.location.pathname === \"/\" && user) {\n    if (user.role === \"admin\") {\n      window.location.href = \"/admin\";\n    } else if (user.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    }\n    return null;\n  }\n  \n  if (!allowedRoles.includes(user.role)) {\n    return <NotFound />;\n  }\n  \n  return <>{children}</>;\n}\n\nfunction ConditionalLayout({ children, isPublic = false }: { children: React.ReactNode; isPublic?: boolean }) {\n  if (isPublic) {\n    return <>{children}</>;\n  }\n  return <Layout>{children}</Layout>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public Routes */}\n      <Route path=\"/\">\n        <ConditionalLayout isPublic>\n          <Home />\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\", \"customer\"]}>\n            <NexitelActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\", \"customer\"]}>\n            <NexitelRecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\", \"customer\"]}>\n            <ATTRechargeSimple />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-data-addons\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTDataAddons />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-reports\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTReports />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-port-in\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTPortInStatus />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/att-sim-swap\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTSimSwap />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/usa-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <USARecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-activation-report\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelActivationReport />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-recharge-report\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelRechargeReport />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-sim-swap\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelSimSwap />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-port-status\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelPortStatusNew />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/login\">\n        <ConditionalLayout isPublic>\n          <Login />\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/forgot-password\">\n        <ConditionalLayout isPublic>\n          <ForgotPassword />\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/dashboard\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <RetailerDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/transactions\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <RetailerTransactions />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/wallet\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <WalletFunding />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/reports\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <RetailerTransactions />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/test\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <TransactionTest />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/bulk-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <BulkActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/wifi-enable\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <WiFiEnable />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/nexitel-menu\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <NexitelMenu />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/global-menu\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <GlobalMenu />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/global-menu\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <GlobalMenu />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/global-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelRecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      \n      {/* Admin Routes */}\n      <Route path=\"/admin\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/dashboard\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminRecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/global-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <GlobalRecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/usa-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <USARecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/retailer/usa-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <USARecharge />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/users\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <UserManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/user-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <UserManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/employees\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <EmployeeManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/retailers\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <RetailerManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/analytics\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <Analytics />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/plan-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <PlanManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/att-services\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <ATTServices />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/att-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <ATTActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/att-data-addons\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <ATTDataAddons />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n\n      <Route path=\"/admin/att-recharge\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ATTRechargeSimple />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/commission-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <CommissionManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/commission-group-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <CommissionGroupManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/retailer-permissions\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <RetailerPermissions />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n\n      <Route path=\"/admin/settings\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <SystemSettings />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/bulk-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <BulkActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/wifi-enable\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <WiFiEnable />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/admin/fund-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <FundManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      \n      {/* Employee Routes */}\n      <Route path=\"/employee\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"employee\"]}>\n            <EmployeeDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/employee/dashboard\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"employee\"]}>\n            <EmployeeDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      \n      {/* VoIP Routes */}\n      <Route path=\"/voip-menu\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <VoipMenu />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/voip-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <VoipActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/voip-bulk-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <VoipBulkActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexiphone-apps\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexiphoneApps />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/wifi-calling-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <WifiCallingActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n\n      <Route path=\"/nexitel-wifi-calling\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelWifiCalling />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-bulk-activation\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelBulkActivation />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      <Route path=\"/nexitel-data-addons\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <NexitelDataAddons />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n\n\n      {/* Activity Management Route */}\n      <Route path=\"/activity-management\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"admin\", \"employee\", \"retailer\"]}>\n            <ActivityManagement />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      \n      {/* Retailer Routes */}\n      <Route path=\"/retailer\">\n        <ConditionalLayout>\n          <ProtectedRoute allowedRoles={[\"retailer\"]}>\n            <RetailerDashboard />\n          </ProtectedRoute>\n        </ConditionalLayout>\n      </Route>\n      \n\n      \n      {/* Dashboard Route - Redirect based on role */}\n      <Route path=\"/dashboard\">\n        <ConditionalLayout>\n          <RoleBasedRedirect />\n        </ConditionalLayout>\n      </Route>\n      \n      {/* Fallback */}\n      <Route>\n        <ConditionalLayout isPublic>\n          <NotFound />\n        </ConditionalLayout>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction RoleBasedRedirect() {\n  const { user } = useAuth();\n  \n  if (!user) return <Login />;\n  \n  switch (user.role) {\n    case \"admin\":\n      return <AdminDashboard />;\n    case \"employee\":\n      return <EmployeeDashboard />;\n    case \"retailer\":\n      return <RetailerDashboard />;\n\n    default:\n      return <NotFound />;\n  }\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":20285},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Print styles for customer receipts */\n@media print {\n  @page {\n    size: A4;\n    margin: 0.5in;\n  }\n  \n  body {\n    -webkit-print-color-adjust: exact !important;\n    color-adjust: exact !important;\n  }\n  \n  .print\\\\:shadow-none {\n    box-shadow: none !important;\n  }\n  \n  .print\\\\:border-none {\n    border: none !important;\n  }\n  \n  .print\\\\:hidden {\n    display: none !important;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Role-specific colors */\n  --admin: hsl(0, 73%, 41%);\n  --admin-foreground: hsl(0, 0%, 100%);\n  --employee: hsl(160, 84%, 39%);\n  --employee-foreground: hsl(0, 0%, 100%);\n  --retailer: hsl(262, 83%, 58%);\n  --retailer-foreground: hsl(0, 0%, 100%);\n  --customer: hsl(24, 94%, 50%);\n  --customer-foreground: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    overflow-x: hidden;\n  }\n\n  /* Prevent horizontal scroll on mobile */\n  html, body {\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n\n  /* Improved mobile touch targets */\n  button, a, input, select, textarea {\n    min-height: 44px;\n  }\n\n  /* Better mobile form controls */\n  input, select, textarea {\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n\n  /* Responsive utilities */\n  .container {\n    width: 100%;\n    max-width: 100%;\n  }\n\n  /* Prevent elements from causing horizontal scroll */\n  * {\n    box-sizing: border-box;\n  }\n\n  /* Responsive breakpoints helpers */\n  @media (max-width: 640px) {\n    .mobile-padding {\n      padding: 1rem;\n    }\n    \n    .mobile-text {\n      font-size: 0.875rem;\n    }\n  }\n\n  /* Chat widget responsive */\n  .chat-widget {\n    width: 320px;\n    max-width: calc(100vw - 2rem);\n  }\n\n  @media (max-width: 768px) {\n    .chat-widget {\n      width: calc(100vw - 2rem);\n      height: 70vh;\n      max-height: 500px;\n    }\n  }\n}\n\n@layer utilities {\n  .role-admin {\n    background-color: var(--admin);\n    color: var(--admin-foreground);\n  }\n\n  .role-employee {\n    background-color: var(--employee);\n    color: var(--employee-foreground);\n  }\n\n  .role-retailer {\n    background-color: var(--retailer);\n    color: var(--retailer-foreground);\n  }\n\n  .role-customer {\n    background-color: var(--customer);\n    color: var(--customer-foreground);\n  }\n\n  .border-role-admin {\n    border-color: var(--admin);\n  }\n\n  .border-role-employee {\n    border-color: var(--employee);\n  }\n\n  .border-role-retailer {\n    border-color: var(--retailer);\n  }\n\n  .border-role-customer {\n    border-color: var(--customer);\n  }\n\n  .text-role-admin {\n    color: var(--admin);\n  }\n\n  .text-role-employee {\n    color: var(--employee);\n  }\n\n  .text-role-retailer {\n    color: var(--retailer);\n  }\n\n  .text-role-customer {\n    color: var(--customer);\n  }\n\n  .bg-role-admin {\n    background-color: var(--admin);\n  }\n\n  .bg-role-employee {\n    background-color: var(--employee);\n  }\n\n  .bg-role-retailer {\n    background-color: var(--retailer);\n  }\n\n  .bg-role-customer {\n    background-color: var(--customer);\n  }\n\n  .hover\\:bg-role-admin:hover {\n    background-color: hsl(0, 73%, 35%);\n  }\n\n  .hover\\:bg-role-employee:hover {\n    background-color: hsl(160, 84%, 33%);\n  }\n\n  .hover\\:bg-role-retailer:hover {\n    background-color: hsl(262, 83%, 52%);\n  }\n\n  .hover\\:bg-role-customer:hover {\n    background-color: hsl(24, 94%, 44%);\n  }\n}\n","size_bytes":4996},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ActivitySearch.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Download, Calendar, Filter } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface ActivitySearchProps {\n  userRole: 'admin' | 'employee' | 'retailer';\n}\n\ninterface SearchFilters {\n  searchType: 'iccid' | 'mobile_number' | 'email' | 'customer_name';\n  searchTerm: string;\n  serviceType: 'all' | 'nexitel_activation' | 'nexitel_recharge' | 'global_recharge';\n  status: 'all' | 'pending' | 'completed' | 'failed';\n  dateFrom: string;\n  dateTo: string;\n}\n\ninterface ActivityRecord {\n  id: number;\n  iccid?: string;\n  mobileNumber?: string;\n  customerName?: string;\n  email?: string;\n  serviceType: string;\n  status: string;\n  createdAt: string;\n  amount?: string;\n  commission?: string;\n}\n\nexport function ActivitySearch({ userRole }: ActivitySearchProps) {\n  const { toast } = useToast();\n  const [searchFilters, setSearchFilters] = useState<SearchFilters>({\n    searchType: 'iccid',\n    searchTerm: '',\n    serviceType: 'all',\n    status: 'all',\n    dateFrom: '',\n    dateTo: ''\n  });\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [searchResults, setSearchResults] = useState<{\n    activations: ActivityRecord[];\n    recharges: ActivityRecord[];\n    total: number;\n  } | null>(null);\n\n  const searchMutation = useMutation({\n    mutationFn: async (filters: SearchFilters) => {\n      let cleanedFilters = { ...filters };\n      \n      // Clean phone numbers (remove formatting)\n      if (filters.searchType === 'mobile_number' && filters.searchTerm) {\n        cleanedFilters.searchTerm = filters.searchTerm.replace(/[\\s\\-\\(\\)]/g, '');\n      }\n      \n      if (cleanedFilters.searchTerm.length < 3) {\n        throw new Error('Search term must be at least 3 characters');\n      }\n\n      return await apiRequest(\"/api/activities/search\", {\n        method: \"POST\",\n        body: cleanedFilters\n      });\n    },\n    onSuccess: (data) => {\n      setSearchResults(data);\n      toast({\n        title: \"Search Complete\",\n        description: `Found ${data.total} results`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Search Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const quickSearchMutation = useMutation({\n    mutationFn: async ({ type, value }: { type: 'iccid' | 'mobile', value: string }) => {\n      const endpoint = type === 'iccid' \n        ? `/api/activities/search/iccid/${encodeURIComponent(value)}`\n        : `/api/activities/search/mobile/${encodeURIComponent(value)}`;\n      \n      return await apiRequest(endpoint);\n    },\n    onSuccess: (data) => {\n      setSearchResults({\n        activations: data.activations || [],\n        recharges: data.recharges || [],\n        total: (data.activations?.length || 0) + (data.recharges?.length || 0)\n      });\n      toast({\n        title: \"Quick Search Complete\",\n        description: `Found ${(data.activations?.length || 0) + (data.recharges?.length || 0)} results`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Search Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleQuickSearch = () => {\n    if (!searchFilters.searchTerm.trim()) {\n      toast({\n        title: \"Search Required\",\n        description: \"Please enter a search term\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let searchValue = searchFilters.searchTerm.trim();\n    \n    // For phone numbers, clean up formatting (remove spaces, dashes, parentheses)\n    if (searchFilters.searchType === 'mobile_number') {\n      searchValue = searchValue.replace(/[\\s\\-\\(\\)]/g, '');\n    }\n\n    if (searchFilters.searchType === 'iccid') {\n      quickSearchMutation.mutate({ type: 'iccid', value: searchValue });\n    } else if (searchFilters.searchType === 'mobile_number') {\n      quickSearchMutation.mutate({ type: 'mobile', value: searchValue });\n    } else {\n      searchMutation.mutate(searchFilters);\n    }\n  };\n\n  const handleAdvancedSearch = () => {\n    searchMutation.mutate(searchFilters);\n  };\n\n  const exportResults = () => {\n    if (!searchResults) return;\n\n    const allRecords = [\n      ...searchResults.activations.map(a => ({ ...a, type: 'activation' })),\n      ...searchResults.recharges.map(r => ({ ...r, type: 'recharge' }))\n    ];\n\n    const csv = [\n      'Type,ID,ICCID,Mobile Number,Customer Name,Email,Service Type,Status,Amount,Commission,Created At',\n      ...allRecords.map(r => \n        `\"${r.type}\",\"${r.id}\",\"${r.iccid || ''}\",\"${r.mobileNumber || ''}\",\"${r.customerName || ''}\",\"${r.email || ''}\",\"${r.serviceType}\",\"${r.status}\",\"${r.amount || ''}\",\"${r.commission || ''}\",\"${new Date(r.createdAt).toISOString()}\"`\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `activity_search_results_${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'completed': return 'default';\n      case 'pending': return 'secondary';\n      case 'failed': return 'destructive';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search Interface */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Activity Search\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"searchType\">Search By</Label>\n              <Select \n                value={searchFilters.searchType} \n                onValueChange={(value: any) => setSearchFilters(prev => ({ ...prev, searchType: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select search type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"iccid\">ICCID</SelectItem>\n                  <SelectItem value=\"mobile_number\">Mobile Number</SelectItem>\n                  <SelectItem value=\"email\">Email</SelectItem>\n                  <SelectItem value=\"customer_name\">Customer Name</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"searchTerm\">Search Term</Label>\n              <Input\n                id=\"searchTerm\"\n                value={searchFilters.searchTerm}\n                onChange={(e) => setSearchFilters(prev => ({ ...prev, searchTerm: e.target.value }))}\n                placeholder={searchFilters.searchType === 'mobile_number' \n                  ? \"Enter mobile number (any format: 5551234567, 555-123-4567, etc.)...\"\n                  : searchFilters.searchType === 'iccid'\n                  ? \"Enter ICCID...\"\n                  : `Enter ${searchFilters.searchType.replace('_', ' ')}...`}\n                onKeyPress={(e) => e.key === 'Enter' && handleQuickSearch()}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>&nbsp;</Label>\n              <Button \n                onClick={handleQuickSearch}\n                disabled={quickSearchMutation.isPending || searchMutation.isPending}\n                className=\"w-full\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>&nbsp;</Label>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAdvanced(!showAdvanced)}\n                className=\"w-full\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Advanced\n              </Button>\n            </div>\n          </div>\n\n          {showAdvanced && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 p-4 bg-muted rounded-lg\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serviceType\">Service Type</Label>\n                <Select \n                  value={searchFilters.serviceType} \n                  onValueChange={(value: any) => setSearchFilters(prev => ({ ...prev, serviceType: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Services</SelectItem>\n                    <SelectItem value=\"nexitel_activation\">Nexitel Activation</SelectItem>\n                    <SelectItem value=\"nexitel_recharge\">Nexitel Recharge</SelectItem>\n                    <SelectItem value=\"global_recharge\">Global Recharge</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\">Status</Label>\n                <Select \n                  value={searchFilters.status} \n                  onValueChange={(value: any) => setSearchFilters(prev => ({ ...prev, status: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateFrom\">Date From</Label>\n                <Input\n                  id=\"dateFrom\"\n                  type=\"date\"\n                  value={searchFilters.dateFrom}\n                  onChange={(e) => setSearchFilters(prev => ({ ...prev, dateFrom: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateTo\">Date To</Label>\n                <Input\n                  id=\"dateTo\"\n                  type=\"date\"\n                  value={searchFilters.dateTo}\n                  onChange={(e) => setSearchFilters(prev => ({ ...prev, dateTo: e.target.value }))}\n                />\n              </div>\n\n              <div className=\"md:col-span-4\">\n                <Button onClick={handleAdvancedSearch} disabled={searchMutation.isPending} className=\"w-full\">\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Advanced Search\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Search Results */}\n      {searchResults && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>\n              Search Results ({searchResults.total} records found)\n            </CardTitle>\n            {searchResults.total > 0 && (\n              <Button onClick={exportResults} variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export CSV\n              </Button>\n            )}\n          </CardHeader>\n          <CardContent>\n            {searchResults.total === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No records found matching your search criteria\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {searchResults.activations.length > 0 && (\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3\">Activations ({searchResults.activations.length})</h3>\n                    <div className=\"grid gap-3\">\n                      {searchResults.activations.map((activation) => (\n                        <div key={`activation-${activation.id}`} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm flex-1\">\n                              <div>\n                                <span className=\"font-medium\">ICCID:</span> {activation.iccid}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Customer:</span> {activation.customerName}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Email:</span> {activation.email}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Date:</span> {format(new Date(activation.createdAt), 'MMM dd, yyyy')}\n                              </div>\n                            </div>\n                            <Badge variant={getStatusBadgeVariant(activation.status)}>\n                              {activation.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {searchResults.recharges.length > 0 && (\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3\">Recharges ({searchResults.recharges.length})</h3>\n                    <div className=\"grid gap-3\">\n                      {searchResults.recharges.map((recharge) => (\n                        <div key={`recharge-${recharge.id}`} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm flex-1\">\n                              <div>\n                                <span className=\"font-medium\">Mobile:</span> {recharge.mobileNumber}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Amount:</span> ${recharge.amount}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Commission:</span> ${recharge.commission}\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Date:</span> {format(new Date(recharge.createdAt), 'MMM dd, yyyy')}\n                              </div>\n                            </div>\n                            <Badge variant={getStatusBadgeVariant(recharge.status)}>\n                              {recharge.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":15869},"client/src/components/AdminProfitDisplay.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, DollarSign, Users, Activity } from \"lucide-react\";\nimport { useAuth } from \"./AuthProvider\";\n\nexport function AdminProfitDisplay() {\n  const { user } = useAuth();\n\n  // Only show for admin users\n  if (!user || user.role !== \"admin\") {\n    return null;\n  }\n\n  const { data: allTransactions } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  // Calculate admin profits from retailer transactions\n  const profitTransactions = Array.isArray(allTransactions) \n    ? allTransactions.filter((t: any) => t.phoneNumber === \"ADMIN_PROFIT\")\n    : [];\n\n  const totalProfit = profitTransactions.reduce(\n    (sum: number, t: any) => sum + parseFloat(t.totalAmount || \"0\"), 0\n  ).toFixed(2);\n\n  const profitCount = profitTransactions.length;\n\n  // Get recent profit transactions\n  const recentProfits = profitTransactions\n    .slice(-5)\n    .reverse();\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n      {/* Total Admin Profit */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Admin Profit</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-green-600\">${totalProfit}</div>\n          <div className=\"flex items-center mt-1\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              From Retailer Transactions\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profit Transactions Count */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Profit Transactions</CardTitle>\n          <Activity className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-blue-600\">{profitCount}</div>\n          <div className=\"flex items-center mt-1\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Total Count\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profit Rate */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Admin Profit Rate</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-purple-600\">2</div>\n          <div className=\"flex items-center mt-1\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Retailer Transactions\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3024},"client/src/components/AuthProvider.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { User } from \"@shared/schema\";\nimport { getStoredAuth, setStoredAuth, clearStoredAuth } from \"@/lib/auth\";\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check server session instead of localStorage only\n    const checkServerAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include',\n        });\n        \n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData.user);\n          setIsAuthenticated(true);\n          setStoredAuth(userData.user); // Sync with localStorage\n        } else {\n          // Clear any stale localStorage data\n          clearStoredAuth();\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        clearStoredAuth();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    checkServerAuth();\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    setIsAuthenticated(true);\n    setStoredAuth(userData);\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      clearStoredAuth();\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":2280},"client/src/components/CommissionDisplay.tsx":{"content":"import { useAuth } from \"@/components/AuthProvider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, DollarSign } from \"lucide-react\";\n\nexport function CommissionDisplay() {\n  const { user } = useAuth();\n  \n  // Fetch user's commission transactions\n  const { data: transactions } = useQuery({\n    queryKey: [`/api/transactions/user/${user?.id}`],\n    enabled: !!user?.id,\n    refetchInterval: 3000, // Refresh every 3 seconds\n  });\n\n  if (!user || user.role === \"admin\") {\n    return null;\n  }\n\n  // Filter commission transactions\n  const commissionTransactions = Array.isArray(transactions) \n    ? transactions.filter((t: any) => t.phoneNumber === \"COMMISSION\")\n    : [];\n\n  // Calculate total commission earned today\n  const today = new Date().toDateString();\n  const todayCommissions = commissionTransactions.filter(\n    (t: any) => new Date(t.createdAt).toDateString() === today\n  );\n  const todayTotal = todayCommissions.reduce(\n    (sum: number, t: any) => sum + parseFloat(t.totalAmount || \"0\"), 0\n  ).toFixed(2);\n\n  // Calculate total commission earned all time\n  const totalCommission = commissionTransactions.reduce(\n    (sum: number, t: any) => sum + parseFloat(t.totalAmount || \"0\"), 0\n  ).toFixed(2);\n\n  // Commission rate removed per user request\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Today's Commission</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-green-600\">${todayTotal}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            {todayCommissions.length} transactions today\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Commission</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-blue-600\">${totalCommission}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            {commissionTransactions.length} total earnings\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2601},"client/src/components/CustomerReceipt.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Printer, Phone, Calendar, MapPin, User, CreditCard } from \"lucide-react\";\n\ninterface CustomerReceiptProps {\n  activation: {\n    id: string;\n    customerName: string;\n    phoneNumber: string;\n    iccid: string;\n    planName: string;\n    planPrice: string;\n    carrier: string;\n    activationDate: string;\n    retailerName: string;\n    address?: string;\n    city?: string;\n    state?: string;\n    zipCode?: string;\n  };\n  onPrint: () => void;\n}\n\nexport function CustomerReceipt({ activation, onPrint }: CustomerReceiptProps) {\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <div className=\"print:shadow-none print:border-none\">\n        <Card className=\"bg-white border-2 border-gray-200\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"bg-blue-600 text-white p-3 rounded-full\">\n                <Phone className=\"w-6 h-6\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-xl font-bold text-gray-800\">\n              Nexitel Services\n            </CardTitle>\n            <p className=\"text-sm text-gray-600\">Mobile Activation Receipt</p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Receipt Details */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-600\">Receipt #</span>\n                <span className=\"text-sm font-mono text-gray-800\">{activation.id}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">Date</span>\n                <span className=\"text-sm text-gray-800\">{currentDate}</span>\n              </div>\n            </div>\n\n            {/* Customer Information */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Customer Information\n              </h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Name:</span>\n                  <span className=\"font-medium\">{activation.customerName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Phone:</span>\n                  <span className=\"font-medium\">{activation.phoneNumber}</span>\n                </div>\n                {activation.address && (\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-gray-600 mb-1\">Address:</span>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">{activation.address}</div>\n                      <div className=\"font-medium\">\n                        {activation.city}, {activation.state} {activation.zipCode}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Service Details */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Service Details\n              </h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Plan:</span>\n                  <span className=\"font-medium\">{activation.planName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Carrier:</span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {activation.carrier.replace('nexitel-', 'Nexitel ').replace('purple', 'Purple').replace('blue', 'Blue')}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">ICCID:</span>\n                  <span className=\"font-mono text-xs\">{activation.iccid}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Activation Date:</span>\n                  <span className=\"font-medium\">{activation.activationDate}</span>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Billing Summary */}\n            <div>\n              <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Billing Summary\n              </h3>\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-gray-700\">Plan Cost:</span>\n                  <span className=\"font-medium\">{activation.planPrice}/month</span>\n                </div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-gray-700\">Activation Fee:</span>\n                  <span className=\"font-medium\">$0.00</span>\n                </div>\n                <Separator className=\"my-2\" />\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold text-gray-800\">Total Paid:</span>\n                  <span className=\"text-2xl font-bold text-blue-600\">{activation.planPrice}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Retailer Information */}\n            <div className=\"text-center text-xs text-gray-500 pt-4 border-t\">\n              <p>Activated by: {activation.retailerName}</p>\n              <p className=\"mt-2\">Thank you for choosing Nexitel Services!</p>\n              <p>Customer Service: 1-800-NEXITEL</p>\n            </div>\n\n            {/* Print Button - Only show on screen, not in print */}\n            <div className=\"print:hidden pt-4\">\n              <Button \n                onClick={onPrint} \n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Print Receipt\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Print-specific styles\nexport const printStyles = `\n  @media print {\n    @page {\n      size: A4;\n      margin: 0.5in;\n    }\n    \n    body {\n      -webkit-print-color-adjust: exact !important;\n      color-adjust: exact !important;\n    }\n    \n    .print\\\\:shadow-none {\n      box-shadow: none !important;\n    }\n    \n    .print\\\\:border-none {\n      border: none !important;\n    }\n    \n    .print\\\\:hidden {\n      display: none !important;\n    }\n  }\n`;","size_bytes":7425},"client/src/components/EmployeeVerificationDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge, ShieldCheck, AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst employeeVerificationSchema = z.object({\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\ntype EmployeeVerificationForm = z.infer<typeof employeeVerificationSchema>;\n\ninterface EmployeeVerificationDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onVerified: (employeeId: string) => void;\n  operationType: string; // \"activation\", \"recharge\", \"fund_transfer\", etc.\n  operationDetails?: string;\n}\n\nexport function EmployeeVerificationDialog({\n  isOpen,\n  onClose,\n  onVerified,\n  operationType,\n  operationDetails,\n}: EmployeeVerificationDialogProps) {\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [verificationError, setVerificationError] = useState<string | null>(null);\n\n  const form = useForm<EmployeeVerificationForm>({\n    resolver: zodResolver(employeeVerificationSchema),\n    defaultValues: {\n      employeeId: \"\",\n    },\n  });\n\n  const onSubmit = async (data: EmployeeVerificationForm) => {\n    setIsVerifying(true);\n    setVerificationError(null);\n\n    try {\n      // Verify employee ID with current session\n      const response = await fetch(\"/api/auth/verify-employee-id\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ employeeId: data.employeeId }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Employee ID verification failed\");\n      }\n\n      // Verification successful\n      onVerified(data.employeeId);\n      form.reset();\n      onClose();\n    } catch (error: any) {\n      setVerificationError(error.message);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const handleCancel = () => {\n    form.reset();\n    setVerificationError(null);\n    onClose();\n  };\n\n  const getOperationTypeLabel = () => {\n    switch (operationType) {\n      case \"nexitel_activation\":\n        return \"Nexitel Activation\";\n      case \"wifi_calling_enable\":\n        return \"WiFi Calling Enable\";\n      case \"fund_transfer\":\n        return \"Fund Transfer\";\n      case \"global_recharge\":\n        return \"Global Recharge\";\n      case \"usa_recharge\":\n        return \"USA Carrier Recharge\";\n      case \"voip_activation\":\n        return \"VoIP Activation\";\n      case \"bulk_activation\":\n        return \"Bulk Activation\";\n      default:\n        return \"Operation\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleCancel}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <ShieldCheck className=\"w-5 h-5 text-blue-600\" />\n            <span>Employee Verification Required</span>\n          </DialogTitle>\n          <DialogDescription>\n            Please verify your Employee ID to proceed with this operation.\n            <br />\n            <span className=\"text-xs text-gray-500 mt-1\">\n              Note: Admin-level employees have full access to all operations.\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Badge className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-900\">Operation Details</span>\n            </div>\n            <p className=\"text-sm text-blue-800\">\n              <strong>Type:</strong> {getOperationTypeLabel()}\n            </p>\n            {operationDetails && (\n              <p className=\"text-xs text-blue-700 mt-1\">{operationDetails}</p>\n            )}\n          </div>\n\n          {verificationError && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{verificationError}</AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee ID</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Enter your Employee ID\"\n                        autoComplete=\"off\"\n                        disabled={isVerifying}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter className=\"space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  disabled={isVerifying}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isVerifying}>\n                  {isVerifying ? \"Verifying...\" : \"Verify & Continue\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5841},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"./AuthProvider\";\nimport { Sidebar } from \"./Sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const { user } = useAuth();\n  const isMobile = useIsMobile();\n\n  if (!user) {\n    return <div className=\"min-h-screen bg-background\">{children}</div>;\n  }\n\n  return (\n    <div className={`${isMobile ? 'flex flex-col' : 'flex'} h-screen bg-gray-50`}>\n      <Sidebar />\n      <div className={`flex-1 overflow-y-auto ${isMobile ? 'pt-20' : ''}`}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":663},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  allowedFileTypes?: string[];\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n * @param props.allowedFileTypes - Array of allowed MIME types\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n  allowedFileTypes,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":3006},"client/src/components/PlanPerformanceSparkline.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, ResponsiveContainer, XAxis, YAxis, Tooltip } from \"recharts\";\nimport { TrendingUp, TrendingDown, Activity, DollarSign } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { type PlanPerformanceMetric } from \"@shared/schema\";\n\ninterface PlanPerformanceSparklineProps {\n  planId: number;\n  planName: string;\n  className?: string;\n}\n\nexport default function PlanPerformanceSparkline({ \n  planId, \n  planName, \n  className = \"\" \n}: PlanPerformanceSparklineProps) {\n  const { data: metrics = [], isLoading } = useQuery<PlanPerformanceMetric[]>({\n    queryKey: [\"/api/plans\", planId, \"performance\"],\n    refetchInterval: 30000, // Refresh every 30 seconds for real-time data\n  });\n\n  if (isLoading) {\n    return (\n      <Card className={`${className} animate-pulse`}>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm font-medium\">{planName}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4 pt-0\">\n          <div className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (metrics.length === 0) {\n    return (\n      <Card className={className}>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm font-medium\">{planName}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4 pt-0\">\n          <div className=\"text-center text-gray-500 text-sm\">No performance data</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Calculate trends and key metrics\n  const latestMetric = metrics[metrics.length - 1];\n  const previousMetric = metrics[metrics.length - 2];\n  \n  const revenueData = metrics.map(m => ({\n    date: new Date(m.date || new Date()).toLocaleDateString(),\n    revenue: parseFloat(m.revenue || \"0\"),\n    profit: parseFloat(m.profit || \"0\"),\n    transactions: m.transactionCount || 0,\n    successRate: parseFloat(m.successRate || \"100\"),\n  }));\n\n  const revenueTrend = previousMetric \n    ? ((parseFloat(latestMetric.revenue || \"0\") - parseFloat(previousMetric.revenue || \"0\")) / parseFloat(previousMetric.revenue || \"1\")) * 100\n    : 0;\n\n  const transactionTrend = previousMetric\n    ? (((latestMetric.transactionCount || 0) - (previousMetric.transactionCount || 0)) / (previousMetric.transactionCount || 1)) * 100\n    : 0;\n\n  const totalRevenue = metrics.reduce((sum, m) => sum + parseFloat(m.revenue || \"0\"), 0);\n  const totalTransactions = metrics.reduce((sum, m) => sum + (m.transactionCount || 0), 0);\n  const avgSuccessRate = metrics.reduce((sum, m) => sum + parseFloat(m.successRate || \"100\"), 0) / metrics.length;\n\n  return (\n    <Card className={`${className} hover:shadow-lg transition-shadow`}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium truncate\">{planName}</CardTitle>\n          <Badge \n            variant={avgSuccessRate >= 98 ? \"default\" : avgSuccessRate >= 95 ? \"secondary\" : \"destructive\"}\n            className=\"text-xs\"\n          >\n            {avgSuccessRate.toFixed(1)}%\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-4 pt-0\">\n        {/* Sparkline Chart */}\n        <div className=\"h-16 mb-3\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={revenueData}>\n              <Line \n                type=\"monotone\" \n                dataKey=\"revenue\" \n                stroke=\"#3b82f6\" \n                strokeWidth={2}\n                dot={false}\n                activeDot={{ r: 3, fill: \"#3b82f6\" }}\n              />\n              <Tooltip \n                content={({ active, payload, label }) => {\n                  if (active && payload && payload.length) {\n                    const data = payload[0].payload;\n                    return (\n                      <div className=\"bg-white dark:bg-gray-800 p-2 border rounded shadow-lg text-xs\">\n                        <p className=\"font-medium\">{label}</p>\n                        <p className=\"text-blue-600\">Revenue: ${data.revenue.toFixed(2)}</p>\n                        <p className=\"text-green-600\">Profit: ${data.profit.toFixed(2)}</p>\n                        <p className=\"text-purple-600\">Transactions: {data.transactions}</p>\n                        <p className=\"text-orange-600\">Success: {data.successRate.toFixed(1)}%</p>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n          <div className=\"flex items-center space-x-1\">\n            <DollarSign className=\"h-3 w-3 text-green-600\" />\n            <span className=\"text-gray-600 dark:text-gray-400\">Revenue:</span>\n            <span className=\"font-medium\">${totalRevenue.toFixed(0)}</span>\n            {revenueTrend !== 0 && (\n              <span className={`flex items-center ${revenueTrend > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {revenueTrend > 0 ? <TrendingUp className=\"h-3 w-3\" /> : <TrendingDown className=\"h-3 w-3\" />}\n                {Math.abs(revenueTrend).toFixed(1)}%\n              </span>\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            <Activity className=\"h-3 w-3 text-blue-600\" />\n            <span className=\"text-gray-600 dark:text-gray-400\">Txns:</span>\n            <span className=\"font-medium\">{totalTransactions}</span>\n            {transactionTrend !== 0 && (\n              <span className={`flex items-center ${transactionTrend > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                {transactionTrend > 0 ? <TrendingUp className=\"h-3 w-3\" /> : <TrendingDown className=\"h-3 w-3\" />}\n                {Math.abs(transactionTrend).toFixed(1)}%\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Performance Indicator */}\n        <div className=\"mt-2 pt-2 border-t\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-600 dark:text-gray-400\">30-day performance</span>\n            <div className=\"flex items-center space-x-1\">\n              <div \n                className={`w-2 h-2 rounded-full ${\n                  avgSuccessRate >= 98 ? 'bg-green-500' : \n                  avgSuccessRate >= 95 ? 'bg-yellow-500' : 'bg-red-500'\n                }`}\n              />\n              <span className=\"font-medium\">\n                {avgSuccessRate >= 98 ? 'Excellent' : \n                 avgSuccessRate >= 95 ? 'Good' : 'Needs Attention'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6950},"client/src/components/ReportGenerator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { FileDown, Calendar, BarChart3 } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface ReportGeneratorProps {\n  userRole: 'admin' | 'employee' | 'retailer';\n  userId?: number;\n}\n\ntype ReportType = 'activation' | 'recharge' | 'commission' | 'wallet-topup';\ntype ReportFormat = 'csv' | 'json';\n\ninterface ReportRequest {\n  reportType: ReportType;\n  dateFrom: string;\n  dateTo: string;\n  format: ReportFormat;\n  userId?: number;\n}\n\nexport function ReportGenerator({ userRole, userId }: ReportGeneratorProps) {\n  const { toast } = useToast();\n  const [reportRequest, setReportRequest] = useState<ReportRequest>({\n    reportType: 'activation',\n    dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago\n    dateTo: new Date().toISOString().split('T')[0], // today\n    format: 'csv',\n    userId: userRole === 'retailer' ? userId : undefined,\n  });\n\n  const reportMutation = useMutation({\n    mutationFn: async (request: ReportRequest) => {\n      const response = await fetch(`/api/reports/${request.reportType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Report generation failed: ${response.statusText}`);\n      }\n\n      if (request.format === 'csv') {\n        // Handle CSV download\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${request.reportType}_report_${request.dateFrom}_to_${request.dateTo}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        return { success: true, type: 'download' };\n      } else {\n        // Handle JSON response\n        const data = await response.json();\n        return { success: true, type: 'json', data };\n      }\n    },\n    onSuccess: (result) => {\n      if (result.type === 'download') {\n        toast({\n          title: \"Report Generated\",\n          description: \"Your report has been downloaded successfully\",\n        });\n      } else {\n        toast({\n          title: \"Report Generated\",\n          description: `Found ${result.data?.length || 0} records`,\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Report Generation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateReport = () => {\n    if (!reportRequest.dateFrom || !reportRequest.dateTo) {\n      toast({\n        title: \"Date Range Required\",\n        description: \"Please select both start and end dates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(reportRequest.dateFrom) > new Date(reportRequest.dateTo)) {\n      toast({\n        title: \"Invalid Date Range\",\n        description: \"Start date must be before end date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    reportMutation.mutate(reportRequest);\n  };\n\n  const reportTypes = [\n    { \n      value: 'activation', \n      label: 'Activation Report', \n      description: 'All activation records including customer details and status',\n      available: true\n    },\n    { \n      value: 'recharge', \n      label: 'Recharge Report', \n      description: 'Mobile recharge transactions with amounts and commissions',\n      available: true\n    },\n    { \n      value: 'commission', \n      label: 'Commission Report', \n      description: 'Commission earnings breakdown by service type',\n      available: userRole !== 'employee'\n    },\n    { \n      value: 'wallet-topup', \n      label: 'Wallet Top-up Report', \n      description: 'Wallet balance changes and payment methods',\n      available: userRole !== 'employee'\n    },\n  ];\n\n  const presetDateRanges = [\n    { label: 'Last 7 days', days: 7 },\n    { label: 'Last 30 days', days: 30 },\n    { label: 'Last 90 days', days: 90 },\n    { label: 'This month', days: new Date().getDate() },\n  ];\n\n  const setPresetDateRange = (days: number) => {\n    const dateTo = new Date().toISOString().split('T')[0];\n    const dateFrom = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    setReportRequest(prev => ({ ...prev, dateFrom, dateTo }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Report Generator\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Report Type Selection */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-semibold\">Report Type</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {reportTypes.filter(type => type.available).map((type) => (\n                <div \n                  key={type.value}\n                  className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                    reportRequest.reportType === type.value \n                      ? 'border-primary bg-primary/5' \n                      : 'hover:border-primary/50'\n                  }`}\n                  onClick={() => setReportRequest(prev => ({ ...prev, reportType: type.value as ReportType }))}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      <div className={`w-4 h-4 rounded-full border-2 ${\n                        reportRequest.reportType === type.value \n                          ? 'border-primary bg-primary' \n                          : 'border-gray-300'\n                      }`}>\n                        {reportRequest.reportType === type.value && (\n                          <div className=\"w-full h-full rounded-full bg-white scale-50\" />\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium text-sm\">{type.label}</h3>\n                      <p className=\"text-xs text-muted-foreground mt-1\">{type.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Date Range Selection */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-base font-semibold\">Date Range</Label>\n            \n            {/* Preset Ranges */}\n            <div className=\"flex flex-wrap gap-2\">\n              {presetDateRanges.map((preset) => (\n                <Button\n                  key={preset.label}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPresetDateRange(preset.days)}\n                  className=\"text-xs\"\n                >\n                  {preset.label}\n                </Button>\n              ))}\n            </div>\n\n            {/* Custom Date Range */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateFrom\" className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  Start Date\n                </Label>\n                <Input\n                  id=\"dateFrom\"\n                  type=\"date\"\n                  value={reportRequest.dateFrom}\n                  onChange={(e) => setReportRequest(prev => ({ ...prev, dateFrom: e.target.value }))}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateTo\" className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  End Date\n                </Label>\n                <Input\n                  id=\"dateTo\"\n                  type=\"date\"\n                  value={reportRequest.dateTo}\n                  onChange={(e) => setReportRequest(prev => ({ ...prev, dateTo: e.target.value }))}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Format Selection */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-base font-semibold\">Export Format</Label>\n            <Select \n              value={reportRequest.format} \n              onValueChange={(value: ReportFormat) => setReportRequest(prev => ({ ...prev, format: value }))}\n            >\n              <SelectTrigger className=\"w-full md:w-[200px]\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"csv\">CSV File (.csv)</SelectItem>\n                <SelectItem value=\"json\">JSON Data (.json)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Retailer Limitation Notice */}\n          {userRole === 'retailer' && (\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Note:</strong> As a retailer, you can only generate reports for your own transactions and activities.\n              </p>\n            </div>\n          )}\n\n          {/* Generate Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={handleGenerateReport}\n              disabled={reportMutation.isPending}\n              className=\"flex items-center gap-2\"\n            >\n              <FileDown className=\"w-4 h-4\" />\n              {reportMutation.isPending ? 'Generating...' : 'Generate Report'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Reports Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Report Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {reportRequest.reportType === 'activation' ? 'Activations' : \n                 reportRequest.reportType === 'recharge' ? 'Recharges' : \n                 reportRequest.reportType === 'commission' ? 'Commissions' : 'Top-ups'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Selected Report</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">\n                {Math.ceil((new Date(reportRequest.dateTo).getTime() - new Date(reportRequest.dateFrom).getTime()) / (1000 * 60 * 60 * 24))}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Days Range</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {reportRequest.format.toUpperCase()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Export Format</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {userRole === 'retailer' ? 'Personal' : 'All Users'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Data Scope</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11960},"client/src/components/RetailerDocumentUploader.tsx":{"content":"import { useState } from \"react\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  FileText, \n  Upload, \n  CheckCircle, \n  XCircle, \n  Clock,\n  Download\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DocumentType {\n  key: string;\n  label: string;\n  description: string;\n  required: boolean;\n  allowedTypes?: string[];\n}\n\ninterface RetailerDocument {\n  id: number;\n  documentType: string;\n  fileName: string;\n  originalFileName: string;\n  filePath: string;\n  status: 'pending' | 'approved' | 'rejected';\n  notes?: string;\n  createdAt: string;\n}\n\ninterface RetailerDocumentUploaderProps {\n  retailerId: number;\n  documents: RetailerDocument[];\n  onDocumentUploaded: () => void;\n  showDownloadButtons?: boolean;\n}\n\nconst DOCUMENT_TYPES: DocumentType[] = [\n  {\n    key: 'reseller_agreement',\n    label: 'Reseller Agreement',\n    description: 'Signed reseller agreement document',\n    required: true,\n    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png']\n  },\n  {\n    key: 'reseller_certificate',\n    label: 'Reseller Certificate',\n    description: 'State-issued reseller certificate',\n    required: true,\n    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png']\n  },\n  {\n    key: 'copy_of_ein',\n    label: 'Copy of EIN',\n    description: 'IRS Employer Identification Number document',\n    required: true,\n    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png']\n  },\n  {\n    key: 'state_business_certificate',\n    label: 'State Business Certificate',\n    description: 'Official state business registration certificate',\n    required: true,\n    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png']\n  },\n  {\n    key: 'retailer_photo_id',\n    label: 'Retailer Photo ID',\n    description: 'Government-issued photo identification',\n    required: true,\n    allowedTypes: ['image/jpeg', 'image/png']\n  },\n  {\n    key: 'void_check',\n    label: 'Void Check',\n    description: 'Voided check for payment verification',\n    required: true,\n    allowedTypes: ['application/pdf', 'image/jpeg', 'image/png']\n  },\n];\n\nexport function RetailerDocumentUploader({ \n  retailerId, \n  documents, \n  onDocumentUploaded,\n  showDownloadButtons = false \n}: RetailerDocumentUploaderProps) {\n  const { toast } = useToast();\n  const [uploadingDocuments, setUploadingDocuments] = useState<Set<string>>(new Set());\n\n  const getDocumentStatus = (documentType: string) => {\n    return documents.find(doc => doc.documentType === documentType);\n  };\n\n  const handleGetUploadParameters = async (documentType: string) => {\n    try {\n      const response = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get upload URL');\n      }\n\n      const { uploadURL } = await response.json();\n      return {\n        method: 'PUT' as const,\n        url: uploadURL,\n      };\n    } catch (error) {\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to initialize upload. Please try again.\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = async (\n    documentType: string, \n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => {\n    if (result.successful && result.successful.length > 0) {\n      const file = result.successful[0];\n      \n      try {\n        // Save document information to database\n        const response = await fetch('/api/retailer-documents', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            retailerId,\n            documentType,\n            fileName: file.name,\n            originalFileName: file.name,\n            filePath: file.uploadURL,\n            fileSize: file.size,\n            mimeType: file.type,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to save document information');\n        }\n\n        toast({\n          title: \"Upload Successful\",\n          description: `${DOCUMENT_TYPES.find(dt => dt.key === documentType)?.label} has been uploaded successfully.`,\n        });\n\n        onDocumentUploaded();\n      } catch (error) {\n        toast({\n          title: \"Save Error\", \n          description: \"File uploaded but failed to save information. Please contact admin.\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Document upload was not successful. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n\n    setUploadingDocuments(prev => {\n      const newSet = new Set(prev);\n      newSet.delete(documentType);\n      return newSet;\n    });\n  };\n\n  const handleStartUpload = (documentType: string) => {\n    setUploadingDocuments(prev => new Set(prev).add(documentType));\n  };\n\n  const handleDownloadDocument = async (document: RetailerDocument) => {\n    try {\n      const response = await fetch(document.filePath);\n      if (!response.ok) {\n        throw new Error('Failed to download document');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = document.originalFileName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download Started\",\n        description: `Downloading ${document.originalFileName}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download document. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"destructive\" | \"secondary\"> = {\n      approved: \"default\",\n      rejected: \"destructive\", \n      pending: \"secondary\"\n    };\n    \n    return (\n      <Badge variant={variants[status] || \"secondary\"} className=\"flex items-center gap-1\">\n        {getStatusIcon(status)}\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Required Documents</h3>\n        <p className=\"text-sm text-gray-600\">\n          Please upload all required documents. Supported formats: PDF, JPEG, PNG (max 10MB each)\n        </p>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {DOCUMENT_TYPES.map((docType) => {\n          const existingDoc = getDocumentStatus(docType.key);\n          const isUploading = uploadingDocuments.has(docType.key);\n          \n          return (\n            <Card key={docType.key} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex items-start space-x-3\">\n                    <FileText className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                    <div>\n                      <CardTitle className=\"text-base font-medium\">\n                        {docType.label}\n                        {docType.required && <span className=\"text-red-500 ml-1\">*</span>}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">{docType.description}</p>\n                    </div>\n                  </div>\n                  {existingDoc && (\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusBadge(existingDoc.status)}\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"pt-0\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-4\">\n                    {existingDoc ? (\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium text-gray-900\">{existingDoc.originalFileName}</p>\n                        <p className=\"text-gray-500\">\n                          Uploaded on {new Date(existingDoc.createdAt).toLocaleDateString()}\n                        </p>\n                        {existingDoc.notes && (\n                          <p className=\"text-red-600 text-xs mt-1\">{existingDoc.notes}</p>\n                        )}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-gray-500\">No document uploaded</p>\n                    )}\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    {existingDoc && showDownloadButtons && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDownloadDocument(existingDoc)}\n                        className=\"flex items-center space-x-1\"\n                      >\n                        <Download className=\"w-4 h-4\" />\n                        <span>Download</span>\n                      </Button>\n                    )}\n                    \n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={10485760} // 10MB\n                      allowedFileTypes={docType.allowedTypes}\n                      onGetUploadParameters={() => handleGetUploadParameters(docType.key)}\n                      onComplete={(result) => handleUploadComplete(docType.key, result)}\n                      buttonClassName={`${\n                        existingDoc?.status === 'approved' \n                          ? 'bg-green-600 hover:bg-green-700' \n                          : 'bg-blue-600 hover:bg-blue-700'\n                      } text-white`}\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      {isUploading ? 'Uploading...' : existingDoc ? 'Replace' : 'Upload'}\n                    </ObjectUploader>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n        <div className=\"flex items-start space-x-2\">\n          <Clock className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n          <div>\n            <h4 className=\"font-medium text-yellow-800\">Document Review Process</h4>\n            <p className=\"text-sm text-yellow-700 mt-1\">\n              All uploaded documents will be reviewed by our admin team. You will receive \n              notifications once documents are approved or if additional information is needed.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11451},"client/src/components/RetailerPermissionsDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { RetailerPermission, type User } from \"@shared/schema\";\nimport { \n  Shield, \n  Globe, \n  Phone, \n  Wallet, \n  Activity, \n  RefreshCw, \n  ArrowRightLeft, \n  BarChart3, \n  Users,\n  Smartphone\n} from \"lucide-react\";\n\nconst retailerPermissionSchema = z.object({\n  voipServiceAccess: z.boolean().default(false),\n  globalRechargeAccess: z.boolean().default(false),\n  usaRechargeAccess: z.boolean().default(false),\n  walletFundingAccess: z.boolean().default(false),\n  maxDailyFunding: z.string().optional(),\n  maxMonthlyFunding: z.string().optional(),\n  nexitelActivationAccess: z.boolean().default(false),\n  simSwapAccess: z.boolean().default(false),\n  portInAccess: z.boolean().default(false),\n  reportAccess: z.boolean().default(true),\n  bulkActivationAccess: z.boolean().default(false),\n  notes: z.string().optional(),\n  // AT&T permissions\n  attActivationAccess: z.boolean().default(false),\n  attRechargeAccess: z.boolean().default(false),\n  attSimSwapAccess: z.boolean().default(false),\n  attDataAddonsAccess: z.boolean().default(false),\n  attPortInAccess: z.boolean().default(false),\n  attWifiCallingAccess: z.boolean().default(false),\n  attBulkActivationAccess: z.boolean().default(false),\n  attMaxDailyActivations: z.string().default(\"50\"),\n  attMaxDailyRecharges: z.string().default(\"100\"),\n});\n\ntype RetailerPermissionFormData = z.infer<typeof retailerPermissionSchema>;\n\ninterface RetailerPermissionsDialogProps {\n  retailer: User | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst PERMISSION_CATEGORIES = [\n  {\n    title: \"Core Services\",\n    description: \"Primary service access controls\",\n    permissions: [\n      {\n        key: \"voipServiceAccess\" as keyof RetailerPermissionFormData,\n        label: \"VoIP Service Access\",\n        description: \"Access to VoIP calling activation services\",\n        icon: Phone,\n        color: \"text-blue-600\"\n      },\n      {\n        key: \"globalRechargeAccess\" as keyof RetailerPermissionFormData,\n        label: \"Global Recharge Access\",\n        description: \"International mobile recharge services\",\n        icon: Globe,\n        color: \"text-green-600\"\n      },\n      {\n        key: \"usaRechargeAccess\" as keyof RetailerPermissionFormData,\n        label: \"USA Recharge Access\", \n        description: \"Domestic US carrier recharge services\",\n        icon: Smartphone,\n        color: \"text-red-600\"\n      },\n      {\n        key: \"walletFundingAccess\" as keyof RetailerPermissionFormData,\n        label: \"Wallet Funding Access\",\n        description: \"Add funds to wallet functionality\",\n        icon: Wallet,\n        color: \"text-purple-600\"\n      }\n    ]\n  },\n  {\n    title: \"Nexitel Services\",\n    description: \"Nexitel carrier-specific services\",\n    permissions: [\n      {\n        key: \"nexitelActivationAccess\" as keyof RetailerPermissionFormData,\n        label: \"Nexitel Activation\",\n        description: \"New Nexitel service activations\",\n        icon: Activity,\n        color: \"text-orange-600\"\n      },\n      {\n        key: \"simSwapAccess\" as keyof RetailerPermissionFormData,\n        label: \"SIM Swap Access\",\n        description: \"SIM card replacement services\",\n        icon: RefreshCw,\n        color: \"text-cyan-600\"\n      },\n      {\n        key: \"portInAccess\" as keyof RetailerPermissionFormData,\n        label: \"Port-In Access\",\n        description: \"Number porting services\",\n        icon: ArrowRightLeft,\n        color: \"text-indigo-600\"\n      }\n    ]\n  },\n  {\n    title: \"AT&T Services\",\n    description: \"AT&T carrier-specific permissions\",\n    permissions: [\n      {\n        key: \"attActivationAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T Activation\",\n        description: \"AT&T new line activations\",\n        icon: Activity,\n        color: \"text-blue-700\"\n      },\n      {\n        key: \"attRechargeAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T Recharge\",\n        description: \"AT&T top-up services\",\n        icon: RefreshCw,\n        color: \"text-blue-600\"\n      },\n      {\n        key: \"attSimSwapAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T SIM Swap\",\n        description: \"AT&T SIM replacement\",\n        icon: ArrowRightLeft,\n        color: \"text-blue-500\"\n      },\n      {\n        key: \"attDataAddonsAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T Data Add-ons\",\n        description: \"AT&T data packages\",\n        icon: Smartphone,\n        color: \"text-blue-800\"\n      },\n      {\n        key: \"attPortInAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T Port-In\",\n        description: \"AT&T number porting\",\n        icon: Phone,\n        color: \"text-blue-400\"\n      },\n      {\n        key: \"attWifiCallingAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T WiFi Calling\",\n        description: \"AT&T WiFi calling features\",\n        icon: Globe,\n        color: \"text-blue-900\"\n      },\n      {\n        key: \"attBulkActivationAccess\" as keyof RetailerPermissionFormData,\n        label: \"AT&T Bulk Activation\",\n        description: \"AT&T bulk processes\",\n        icon: Users,\n        color: \"text-blue-300\"\n      }\n    ]\n  },\n  {\n    title: \"Advanced Features\",\n    description: \"Additional tools and reporting\",\n    permissions: [\n      {\n        key: \"reportAccess\" as keyof RetailerPermissionFormData,\n        label: \"Report Access\",\n        description: \"View reports and analytics\",\n        icon: BarChart3,\n        color: \"text-emerald-600\"\n      },\n      {\n        key: \"bulkActivationAccess\" as keyof RetailerPermissionFormData,\n        label: \"Bulk Activation\",\n        description: \"Bulk activation capabilities\",\n        icon: Users,\n        color: \"text-pink-600\"\n      }\n    ]\n  }\n];\n\nexport function RetailerPermissionsDialog({ retailer, open, onClose }: RetailerPermissionsDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<RetailerPermissionFormData>({\n    resolver: zodResolver(retailerPermissionSchema),\n    defaultValues: {\n      voipServiceAccess: false,\n      globalRechargeAccess: false,\n      usaRechargeAccess: false,\n      walletFundingAccess: false,\n      maxDailyFunding: \"\",\n      maxMonthlyFunding: \"\",\n      nexitelActivationAccess: false,\n      simSwapAccess: false,\n      portInAccess: false,\n      reportAccess: true,\n      bulkActivationAccess: false,\n      notes: \"\",\n      // AT&T defaults\n      attActivationAccess: false,\n      attRechargeAccess: false,\n      attSimSwapAccess: false,\n      attDataAddonsAccess: false,\n      attPortInAccess: false,\n      attWifiCallingAccess: false,\n      attBulkActivationAccess: false,\n      attMaxDailyActivations: \"50\",\n      attMaxDailyRecharges: \"100\",\n    },\n  });\n\n  // Fetch existing permissions\n  const { data: permissions, isLoading } = useQuery<RetailerPermission>({\n    queryKey: [`/api/retailer-permissions/${retailer?.id}`],\n    enabled: !!retailer?.id && open,\n  });\n\n  // Fetch AT&T permissions separately\n  const [attPermissions, setAttPermissions] = useState<any>(null);\n\n  useEffect(() => {\n    if (retailer && open) {\n      // Fetch AT&T permissions\n      fetch(`/api/att/permissions/${retailer.id}`)\n        .then(res => res.ok ? res.json() : null)\n        .then(data => setAttPermissions(data))\n        .catch(() => setAttPermissions(null));\n    }\n  }, [retailer, open]);\n\n  // Update form when permissions data is loaded\n  useEffect(() => {\n    if (permissions || attPermissions) {\n      form.reset({\n        voipServiceAccess: permissions?.voipServiceAccess || false,\n        globalRechargeAccess: permissions?.globalRechargeAccess || false,\n        usaRechargeAccess: permissions?.usaRechargeAccess || false,\n        walletFundingAccess: permissions?.walletFundingAccess || false,\n        maxDailyFunding: permissions?.maxDailyFunding?.toString() || \"\",\n        maxMonthlyFunding: permissions?.maxMonthlyFunding?.toString() || \"\",\n        nexitelActivationAccess: permissions?.nexitelActivationAccess || false,\n        simSwapAccess: permissions?.simSwapAccess || false,\n        portInAccess: permissions?.portInAccess || false,\n        reportAccess: permissions?.reportAccess !== false, // Default true\n        bulkActivationAccess: permissions?.bulkActivationAccess || false,\n        notes: permissions?.notes || \"\",\n        // AT&T permissions\n        attActivationAccess: attPermissions?.canActivate || false,\n        attRechargeAccess: attPermissions?.canRecharge || false,\n        attSimSwapAccess: attPermissions?.canSimSwap || false,\n        attDataAddonsAccess: attPermissions?.canSellDataAddons || false,\n        attPortInAccess: attPermissions?.canPortIn || false,\n        attWifiCallingAccess: attPermissions?.canEnableWifiCalling || false,\n        attBulkActivationAccess: attPermissions?.canBulkActivate || false,\n        attMaxDailyActivations: attPermissions?.maxDailyActivations?.toString() || \"50\",\n        attMaxDailyRecharges: attPermissions?.maxDailyRecharges?.toString() || \"100\",\n      });\n    }\n  }, [permissions, attPermissions, form]);\n\n  // Update permissions mutation\n  const updatePermissionsMutation = useMutation({\n    mutationFn: async (data: RetailerPermissionFormData) => {\n      // Save regular permissions\n      const regularPermissions = {\n        voipServiceAccess: data.voipServiceAccess,\n        globalRechargeAccess: data.globalRechargeAccess,\n        usaRechargeAccess: data.usaRechargeAccess,\n        walletFundingAccess: data.walletFundingAccess,\n        maxDailyFunding: data.maxDailyFunding,\n        maxMonthlyFunding: data.maxMonthlyFunding,\n        nexitelActivationAccess: data.nexitelActivationAccess,\n        simSwapAccess: data.simSwapAccess,\n        portInAccess: data.portInAccess,\n        reportAccess: data.reportAccess,\n        bulkActivationAccess: data.bulkActivationAccess,\n        notes: data.notes,\n      };\n\n      // Save AT&T permissions\n      const attPermissionsData = {\n        userId: retailer?.id,\n        canActivate: data.attActivationAccess,\n        canRecharge: data.attRechargeAccess,\n        canSimSwap: data.attSimSwapAccess,\n        canSellDataAddons: data.attDataAddonsAccess,\n        canPortIn: data.attPortInAccess,\n        canEnableWifiCalling: data.attWifiCallingAccess,\n        canBulkActivate: data.attBulkActivationAccess,\n        maxDailyActivations: parseInt(data.attMaxDailyActivations) || 50,\n        maxDailyRecharges: parseInt(data.attMaxDailyRecharges) || 100,\n      };\n\n      // Save both in parallel\n      const [regularResult, attResult] = await Promise.all([\n        apiRequest(`/api/retailer-permissions/${retailer?.id}`, { \n          method: \"PATCH\", \n          body: regularPermissions \n        }),\n        fetch(`/api/att/permissions/${retailer?.id}`, {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(attPermissionsData),\n        }).then(res => res.json())\n      ]);\n\n      return { regularResult, attResult };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/retailer-permissions/${retailer?.id}`] });\n      toast({\n        title: \"Success\",\n        description: \"Retailer permissions updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: RetailerPermissionFormData) => {\n    setIsSubmitting(true);\n    try {\n      await updatePermissionsMutation.mutateAsync(data);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const walletFundingEnabled = form.watch(\"walletFundingAccess\");\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5 text-blue-600\" />\n            Permissions Management - {retailer?.username}\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading permissions...</div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              {/* Permission Categories */}\n              {PERMISSION_CATEGORIES.map((category) => (\n                <Card key={category.title}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg\">{category.title}</CardTitle>\n                    <CardDescription>{category.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {category.permissions.map((permission) => {\n                        const Icon = permission.icon;\n                        return (\n                          <FormField\n                            key={permission.key}\n                            control={form.control}\n                            name={permission.key}\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center justify-between p-4 border rounded-lg\">\n                                <div className=\"flex items-center gap-3\">\n                                  <Icon className={`w-5 h-5 ${permission.color}`} />\n                                  <div>\n                                    <FormLabel className=\"text-sm font-medium\">\n                                      {permission.label}\n                                    </FormLabel>\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      {permission.description}\n                                    </p>\n                                  </div>\n                                </div>\n                                <FormControl>\n                                  <Switch\n                                    checked={field.value as boolean}\n                                    onCheckedChange={field.onChange}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n\n              {/* Wallet Funding Limits */}\n              {walletFundingEnabled && (\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Wallet className=\"w-5 h-5 text-purple-600\" />\n                      Wallet Funding Limits\n                    </CardTitle>\n                    <CardDescription>Set daily and monthly funding limits for this retailer</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"maxDailyFunding\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Daily Funding Limit ($)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                min=\"0\"\n                                placeholder=\"No limit\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"maxMonthlyFunding\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Monthly Funding Limit ($)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                min=\"0\"\n                                placeholder=\"No limit\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* AT&T Daily Limits */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">AT&T Daily Limits</CardTitle>\n                  <CardDescription>Set daily transaction limits for AT&T services</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"attMaxDailyActivations\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Max Daily Activations</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"1000\"\n                              placeholder=\"50\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"attMaxDailyRecharges\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Max Daily Recharges</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"1000\"\n                              placeholder=\"100\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Admin Notes */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">Admin Notes</CardTitle>\n                  <CardDescription>Optional notes about these permission settings</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Enter any notes about the permission settings...\"\n                            className=\"resize-none\"\n                            rows={3}\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end gap-3 pt-4 border-t\">\n                <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? \"Saving...\" : \"Save Permissions\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":21358},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"./AuthProvider\";\nimport { getRoleColor, getRoleBorderColor } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useState } from \"react\";\nimport {\n  BarChart3,\n  Users,\n  Store,\n  TrendingUp,\n  Settings,\n  Calculator,\n  Receipt,\n  Scale,\n  Smartphone,\n  History,\n  PieChart,\n  Wallet,\n  BookOpen,\n  UserCog,\n  Shield,\n  UserCheck,\n  LogOut,\n  Crown,\n  Menu,\n  X,\n  MessageCircle,\n  Send,\n  Percent,\n  Plus,\n  Globe,\n  Phone,\n  Search,\n  FileText\n} from \"lucide-react\";\n\ninterface NavItem {\n  href: string;\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n}\n\nexport function Sidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatOpen, setChatOpen] = useState(false);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([\n    { type: \"agent\", message: \"Hello! I'm Sarah from customer support. How can I help you today?\", time: \"Now\" }\n  ]);\n\n  if (!user) return null;\n\n  const getNavItems = (): NavItem[] => {\n    switch (user.role) {\n      case \"admin\":\n        return [\n          { href: \"/admin\", icon: BarChart3, label: \"Dashboard\" },\n          { href: \"/admin/recharge\", icon: Crown, label: \"Admin Recharge\" },\n          { href: \"/admin/global-recharge\", icon: Globe, label: \"Global Recharge\" },\n          { href: \"/admin/employees\", icon: Users, label: \"Employee Management\" },\n          { href: \"/admin/retailers\", icon: Store, label: \"Retailer Management\" },\n          { href: \"/admin/retailer-permissions\", icon: Shield, label: \"Retailer Permissions\" },\n          { href: \"/admin/analytics\", icon: TrendingUp, label: \"Analytics\" },\n          { href: \"/admin/reports\", icon: FileText, label: \"Download Reports\" },\n          { href: \"/admin/plan-management\", icon: Settings, label: \"Plan Management\" },\n          { href: \"/admin/commission-management\", icon: Percent, label: \"Commission Management\" },\n          { href: \"/admin/fund-management\", icon: Wallet, label: \"Fund Management\" },\n          { href: \"/activity-management\", icon: Search, label: \"Activity Management\" },\n          { href: \"/admin/settings\", icon: Settings, label: \"System Settings\" },\n        ];\n      case \"employee\":\n        return [\n          { href: \"/employee\", icon: BarChart3, label: \"Dashboard\" },\n          { href: \"/employee/reports\", icon: Calculator, label: \"Financial Reports\" },\n          { href: \"/employee/transactions\", icon: Receipt, label: \"Transaction Oversight\" },\n          { href: \"/employee/balance\", icon: Scale, label: \"Balance Management\" },\n          { href: \"/activity-management\", icon: Search, label: \"Activity Management\" },\n        ];\n      case \"retailer\":\n        return [\n          { href: \"/retailer/dashboard\", icon: Smartphone, label: \"Dashboard\" },\n          { href: \"/retailer/wallet\", icon: Wallet, label: \"Wallet Funding\" },\n          { href: \"/retailer/transactions\", icon: History, label: \"Transaction History\" },\n          { href: \"/retailer/reports\", icon: PieChart, label: \"Daily Reports\" },\n          { href: \"/activity-management\", icon: Search, label: \"Activity Management\" },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const getRoleIcon = () => {\n    switch (user.role) {\n      case \"admin\": return Shield;\n      case \"employee\": return UserCheck;\n      case \"retailer\": return Store;\n      default: return UserCog;\n    }\n  };\n\n  const RoleIcon = getRoleIcon();\n  const navItems = getNavItems();\n  const roleColor = getRoleColor(user.role);\n  const roleBorderColor = getRoleBorderColor(user.role);\n\n  const getRoleDisplayName = () => {\n    if (user.role === \"employee\" && user.employeeRole) {\n      return user.employeeRole.charAt(0).toUpperCase() + user.employeeRole.slice(1);\n    }\n    return user.role.charAt(0).toUpperCase() + user.role.slice(1);\n  };\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim()) return;\n    \n    const newMessage = {\n      type: \"user\",\n      message: chatMessage,\n      time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    };\n    \n    setChatMessages(prev => [...prev, newMessage]);\n    setChatMessage(\"\");\n    \n    // Simulate agent response\n    setTimeout(() => {\n      const responses = [\n        \"Thanks for reaching out! I'm looking into that for you.\",\n        \"I understand your concern. Let me check our system.\",\n        \"That's a great question! I'll get you the information you need.\",\n        \"I'm here to help! Can you provide a bit more detail about the issue?\",\n        \"Let me connect you with our technical team for this specific matter.\"\n      ];\n      \n      const agentResponse = {\n        type: \"agent\",\n        message: responses[Math.floor(Math.random() * responses.length)],\n        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n      };\n      \n      setChatMessages(prev => [...prev, agentResponse]);\n    }, 1000 + Math.random() * 2000);\n  };\n\n  // Chat Widget\n  const ChatWidget = () => {\n    if (!chatOpen) return null;\n\n    return (\n      <div className=\"fixed bottom-4 right-4 chat-widget bg-white border border-gray-300 rounded-lg shadow-xl z-50 flex flex-col\">\n        {/* Chat Header */}\n        <div className=\"bg-green-600 text-white p-3 rounded-t-lg flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-300 rounded-full animate-pulse\"></div>\n            <span className=\"font-medium\">Live Agent - Sarah</span>\n          </div>\n          <Button\n            onClick={() => setChatOpen(false)}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-white hover:bg-green-700 p-1\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Chat Messages */}\n        <div className=\"flex-1 p-3 overflow-y-auto space-y-3\">\n          {chatMessages.map((msg, index) => (\n            <div key={index} className={`flex ${msg.type === \"user\" ? \"justify-end\" : \"justify-start\"}`}>\n              <div className={`max-w-xs p-2 rounded-lg ${\n                msg.type === \"user\" \n                  ? \"bg-blue-500 text-white\" \n                  : \"bg-gray-100 text-gray-900\"\n              }`}>\n                <p className=\"text-sm\">{msg.message}</p>\n                <p className={`text-xs mt-1 ${\n                  msg.type === \"user\" ? \"text-blue-100\" : \"text-gray-500\"\n                }`}>\n                  {msg.time}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Chat Input */}\n        <div className=\"p-3 border-t border-gray-200\">\n          <div className=\"flex space-x-2\">\n            <input\n              type=\"text\"\n              value={chatMessage}\n              onChange={(e) => setChatMessage(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n              placeholder=\"Type your message...\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 text-sm\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              size=\"sm\"\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Mobile hamburger menu\n  if (isMobile) {\n    return (\n      <>\n        {/* Mobile Header */}\n        <div className=\"fixed top-0 left-0 right-0 z-50 bg-white shadow-sm border-b\">\n          <div className=\"flex items-center justify-between p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <RoleIcon className=\"w-6 h-6 text-gray-700\" />\n              <div>\n                <h2 className=\"font-semibold text-gray-900\">{getRoleDisplayName()}</h2>\n                <p className=\"text-sm text-gray-600\">{user.username}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => {\n                  logout();\n                  setIsOpen(false);\n                }}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-red-600 border-red-200 hover:bg-red-50\"\n              >\n                <LogOut className=\"w-4 h-4 mr-1\" />\n                Sign Out\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(!isOpen)}\n                className=\"p-2\"\n              >\n                {isOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Overlay */}\n        {isOpen && (\n          <div \n            className=\"fixed inset-0 z-40 bg-black bg-opacity-50\" \n            onClick={() => setIsOpen(false)}\n          />\n        )}\n\n        {/* Mobile Sidebar */}\n        <div className={`fixed top-0 left-0 h-full w-80 bg-white shadow-lg transform transition-transform duration-300 ease-in-out z-50 ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}>\n          <div className={`p-6 ${roleColor} text-white`}>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <RoleIcon className=\"w-6 h-6\" />\n                <div>\n                  <h2 className=\"font-semibold\">{getRoleDisplayName()} Portal</h2>\n                  <p className=\"text-sm opacity-90\">{user.username}</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:bg-white/20 p-1\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Mobile Customer Support Section */}\n          <div className=\"p-4 border-b border-gray-200\">\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h3 className=\"text-sm font-semibold text-blue-900 mb-2\">Customer Support</h3>\n              <div className=\"space-y-1 text-xs text-blue-800\">\n                <div className=\"flex items-center\">\n                  <UserCog className=\"w-3 h-3 mr-2\" />\n                  <span>Contact: Sarah Johnson</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"w-3 h-3 mr-2 text-center\">📞</span>\n                  <span>+1 (555) 123-4567</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"w-3 h-3 mr-2 text-center\">✉️</span>\n                  <span>support@posrecharge.com</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <nav className=\"mt-4 pb-20\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href || location.startsWith(item.href + \"/\");\n              \n              return (\n                <a\n                  key={item.href}\n                  className={`flex items-center px-6 py-4 text-gray-600 hover:bg-gray-50 transition-colors cursor-pointer ${\n                    isActive ? `text-gray-700 bg-gray-100 border-r-2 ${roleBorderColor}` : \"\"\n                  }`}\n                  onClick={() => {\n                    setIsOpen(false);\n                    window.location.href = item.href;\n                  }}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span className=\"ml-3 text-base\">{item.label}</span>\n                </a>\n              );\n            })}\n          </nav>\n          \n          {/* Live Chat Button */}\n          <div className=\"p-4 border-t border-gray-200\">\n            <Button\n              onClick={() => setChatOpen(true)}\n              className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n              size=\"sm\"\n            >\n              <MessageCircle className=\"w-4 h-4 mr-2\" />\n              Live Agent Chat\n            </Button>\n          </div>\n\n        </div>\n        \n        {/* Chat Widget */}\n        <ChatWidget />\n      </>\n    );\n  }\n\n  // Desktop sidebar\n  return (\n    <>\n      <div className=\"w-64 bg-white shadow-lg flex flex-col h-screen\">\n        <div className={`p-6 ${roleColor} text-white`}>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <RoleIcon className=\"w-6 h-6\" />\n              <div>\n                <h2 className=\"font-semibold\">{getRoleDisplayName()} Portal</h2>\n                <p className=\"text-sm opacity-90\">{user.username}</p>\n              </div>\n            </div>\n            <Button\n              onClick={logout}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20 p-2\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          {user.role === \"retailer\" && user.balance && (\n            <div className=\"mt-4 p-3 bg-white/20 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs text-white/80\">Account Balance</span>\n                <Wallet className=\"w-4 h-4 text-white\" />\n              </div>\n              <div className=\"text-lg font-bold text-white\">${user.balance}</div>\n            </div>\n          )}\n        </div>\n        \n        {/* Customer Support Section */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <h3 className=\"text-sm font-semibold text-blue-900 mb-2\">Customer Support</h3>\n            <div className=\"space-y-1 text-xs text-blue-800\">\n              <div className=\"flex items-center\">\n                <UserCog className=\"w-3 h-3 mr-2\" />\n                <span>Contact: Sarah Johnson</span>\n              </div>\n              <div className=\"flex items-center\">\n                <span className=\"w-3 h-3 mr-2 text-center\">📞</span>\n                <span>+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center\">\n                <span className=\"w-3 h-3 mr-2 text-center\">✉️</span>\n                <span>support@posrecharge.com</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"flex-1 overflow-y-auto mt-4 pb-20\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || location.startsWith(item.href + \"/\");\n            \n            return (\n              <a\n                key={item.href}\n                className={`flex items-center px-6 py-3 text-gray-600 hover:bg-gray-50 transition-colors cursor-pointer ${\n                  isActive ? `text-gray-700 bg-gray-100 border-r-2 ${roleBorderColor}` : \"\"\n                }`}\n                onClick={() => window.location.href = item.href}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span className=\"ml-3\">{item.label}</span>\n              </a>\n            );\n          })}\n        </nav>\n        \n        {/* Live Chat Button */}\n        <div className=\"p-4 border-t border-gray-200 mt-auto\">\n          <Button\n            onClick={() => setChatOpen(true)}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n            size=\"sm\"\n          >\n            <MessageCircle className=\"w-4 h-4 mr-2\" />\n            Live Agent Chat\n          </Button>\n        </div>\n\n      </div>\n      \n      {/* Chat Widget */}\n      <ChatWidget />\n    </>\n  );\n}","size_bytes":16095},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useATTPermissions.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\ninterface ATTPermissions {\n  id: number;\n  userId: number;\n  canActivate: boolean;\n  canRecharge: boolean;\n  canSimSwap: boolean;\n  canSellDataAddons: boolean;\n  canPortIn: boolean;\n  canEnableWifiCalling: boolean;\n  canBulkActivate: boolean;\n  maxDailyActivations: number;\n  maxDailyRecharges: number;\n}\n\nexport function useATTPermissions() {\n  const { user } = useAuth();\n\n  // Only fetch permissions for retailer users\n  const { data: permissions, isLoading } = useQuery<ATTPermissions>({\n    queryKey: [\"/api/att/permissions\", user?.id],\n    enabled: user?.role === \"retailer\",\n  });\n\n  // Admin and employee users have all permissions by default\n  if (user?.role === \"admin\" || user?.role === \"employee\") {\n    return {\n      permissions: {\n        canActivate: true,\n        canRecharge: true,\n        canSimSwap: true,\n        canSellDataAddons: true,\n        canPortIn: true,\n        canEnableWifiCalling: true,\n        canBulkActivate: true,\n        maxDailyActivations: 1000,\n        maxDailyRecharges: 1000,\n      },\n      isLoading: false,\n      hasPermission: (permission: keyof ATTPermissions) => true,\n    };\n  }\n\n  // For retailer users, check their specific permissions\n  const hasPermission = (permission: keyof ATTPermissions): boolean => {\n    if (!permissions) return false;\n    \n    // For boolean permissions, return the actual value\n    if (typeof permissions[permission] === \"boolean\") {\n      return permissions[permission] as boolean;\n    }\n    \n    // For numeric permissions (limits), check if they're greater than 0\n    if (typeof permissions[permission] === \"number\") {\n      return (permissions[permission] as number) > 0;\n    }\n    \n    return false;\n  };\n\n  return {\n    permissions: permissions || null,\n    isLoading,\n    hasPermission,\n  };\n}","size_bytes":1883},"client/src/hooks/useEmployeeVerification.ts":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\ninterface UseEmployeeVerificationProps {\n  operationType: string;\n  operationDetails?: string;\n}\n\nexport function useEmployeeVerification({ operationType, operationDetails }: UseEmployeeVerificationProps) {\n  const { user } = useAuth();\n  const [isVerificationOpen, setIsVerificationOpen] = useState(false);\n  const [verifiedEmployeeId, setVerifiedEmployeeId] = useState<string | null>(null);\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\n\n  const requireEmployeeVerification = (action: () => void) => {\n    // If user is not an employee, execute action immediately\n    if (!user || user.role !== \"employee\") {\n      action();\n      return;\n    }\n\n    // If user is main admin (username 'admin') or admin-level employee, give full access\n    if (user.username === \"admin\" || user.employeeRole === \"admin\") {\n      action();\n      return;\n    }\n\n    // If already verified for this session, execute action\n    if (verifiedEmployeeId) {\n      action();\n      return;\n    }\n\n    // Store the action to execute after verification\n    setPendingAction(() => action);\n    setIsVerificationOpen(true);\n  };\n\n  const handleVerificationSuccess = (employeeId: string) => {\n    setVerifiedEmployeeId(employeeId);\n    setIsVerificationOpen(false);\n    \n    // Execute the pending action\n    if (pendingAction) {\n      pendingAction();\n      setPendingAction(null);\n    }\n  };\n\n  const handleVerificationCancel = () => {\n    setIsVerificationOpen(false);\n    setPendingAction(null);\n  };\n\n  const resetVerification = () => {\n    setVerifiedEmployeeId(null);\n  };\n\n  return {\n    isVerificationOpen,\n    verifiedEmployeeId,\n    requireEmployeeVerification,\n    handleVerificationSuccess,\n    handleVerificationCancel,\n    resetVerification,\n    operationType,\n    operationDetails,\n    isEmployeeRole: user?.role === \"employee\",\n  };\n}","size_bytes":1944},"client/src/lib/auth.ts":{"content":"import { User } from \"@shared/schema\";\n\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n}\n\nexport const getStoredAuth = (): AuthState => {\n  try {\n    const stored = localStorage.getItem(\"pos_auth\");\n    if (!stored) return { user: null, isAuthenticated: false };\n    \n    const parsed = JSON.parse(stored);\n    return {\n      user: parsed.user,\n      isAuthenticated: !!parsed.user,\n    };\n  } catch {\n    return { user: null, isAuthenticated: false };\n  }\n};\n\nexport const setStoredAuth = (user: User | null): void => {\n  if (user) {\n    localStorage.setItem(\"pos_auth\", JSON.stringify({ user }));\n  } else {\n    localStorage.removeItem(\"pos_auth\");\n  }\n};\n\nexport const clearStoredAuth = (): void => {\n  localStorage.removeItem(\"pos_auth\");\n};\n\nexport const hasPermission = (user: User | null, permission: string): boolean => {\n  if (!user) return false;\n  \n  // Admin has all permissions\n  if (user.role === \"admin\") return true;\n  \n  // Role-specific permissions\n  const rolePermissions: Record<string, string[]> = {\n    employee: [\"view_financial_reports\", \"manage_transactions\"],\n    retailer: [\"create_transactions\", \"view_own_transactions\"],\n    customer: [\"create_transactions\", \"view_own_transactions\", \"manage_saved_numbers\"],\n  };\n  \n  return rolePermissions[user.role]?.includes(permission) || false;\n};\n\nexport const getRoleColor = (role: string): string => {\n  switch (role) {\n    case \"admin\": return \"role-admin\";\n    case \"employee\": return \"role-employee\";\n    case \"retailer\": return \"role-retailer\";\n    case \"customer\": return \"role-customer\";\n    default: return \"bg-gray-500\";\n  }\n};\n\nexport const getRoleBorderColor = (role: string): string => {\n  switch (role) {\n    case \"admin\": return \"border-role-admin\";\n    case \"employee\": return \"border-role-employee\";\n    case \"retailer\": return \"border-role-retailer\";\n    case \"customer\": return \"border-role-customer\";\n    default: return \"border-gray-500\";\n  }\n};\n","size_bytes":1968},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: unknown;\n  }\n): Promise<any> {\n  const method = options?.method || \"GET\";\n  const res = await fetch(url, {\n    method,\n    headers: options?.body ? { \"Content-Type\": \"application/json\" } : {},\n    body: options?.body ? JSON.stringify(options.body) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1471},"client/src/lib/subdomain.ts":{"content":"// Subdomain detection and routing utilities\n\nexport function getSubdomain(): string | null {\n  if (typeof window === 'undefined') return null;\n  \n  const hostname = window.location.hostname;\n  \n  // Handle localhost development\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return null;\n  }\n  \n  // Handle Replit domains\n  if (hostname.includes('.replit.dev') || hostname.includes('.replit.app')) {\n    // For Replit domains, check URL parameters for subdomain simulation\n    const urlParams = new URLSearchParams(window.location.search);\n    const subdomainParam = urlParams.get('subdomain');\n    if (subdomainParam) {\n      return subdomainParam;\n    }\n    return null;\n  }\n  \n  // Handle custom domains\n  const parts = hostname.split('.');\n  if (parts.length > 2) {\n    return parts[0];\n  }\n  \n  return null;\n}\n\nexport function isCustomerPortal(): boolean {\n  const subdomain = getSubdomain();\n  return subdomain === 'customer' || subdomain === 'customers' || subdomain === 'portal';\n}\n\nexport function redirectToSubdomain(subdomain: string, path: string = '/') {\n  if (typeof window === 'undefined') return;\n  \n  const hostname = window.location.hostname;\n  \n  // For development and Replit domains, use query parameter\n  if (hostname === 'localhost' || hostname === '127.0.0.1' || \n      hostname.includes('.replit.dev') || hostname.includes('.replit.app')) {\n    const baseUrl = `${window.location.protocol}//${hostname}${window.location.port ? ':' + window.location.port : ''}`;\n    window.location.href = `${baseUrl}${path}?subdomain=${subdomain}`;\n  } else {\n    // For custom domains, use actual subdomain\n    const newHostname = `${subdomain}.${hostname}`;\n    window.location.href = `${window.location.protocol}//${newHostname}${path}`;\n  }\n}\n\nexport function redirectToMainDomain(path: string = '/') {\n  if (typeof window === 'undefined') return;\n  \n  const hostname = window.location.hostname;\n  \n  // For development and Replit domains, remove query parameter\n  if (hostname === 'localhost' || hostname === '127.0.0.1' || \n      hostname.includes('.replit.dev') || hostname.includes('.replit.app')) {\n    const baseUrl = `${window.location.protocol}//${hostname}${window.location.port ? ':' + window.location.port : ''}`;\n    window.location.href = `${baseUrl}${path}`;\n  } else {\n    // For custom domains, go to main domain\n    const parts = hostname.split('.');\n    if (parts.length > 2) {\n      const mainDomain = parts.slice(1).join('.');\n      window.location.href = `${window.location.protocol}//${mainDomain}${path}`;\n    }\n  }\n}","size_bytes":2573},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ATTRechargeSimple.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Smartphone, ArrowLeft, Zap } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Plan } from \"@shared/schema\";\n\nconst attRechargeSchema = z.object({\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  carrier: z.enum([\"att-prepaid\", \"att-postpaid\"], { required_error: \"Carrier is required\" }),\n  amount: z.number().min(5, \"Minimum recharge amount is $5\").max(500, \"Maximum recharge amount is $500\"),\n});\n\ntype ATTRechargeRequest = z.infer<typeof attRechargeSchema>;\n\nconst ATT_CARRIERS = [\n  { value: \"att-prepaid\", label: \"AT&T Prepaid\" },\n  { value: \"att-postpaid\", label: \"AT&T Postpaid\" },\n];\n\nexport default function ATTRechargeSimple() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedAmount, setSelectedAmount] = useState<number>(0);\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n\n  // Fetch AT&T Recharge plans with commission pricing from database\n  const { data: allPlans = [], isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: user?.role === \"retailer\" ? [\"/api/retailer/plans\"] : [\"/api/plans\"],\n  });\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<ATTRechargeRequest>({\n    resolver: zodResolver(attRechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      carrier: undefined,\n      amount: 0,\n    },\n  });\n\n  const rechargeMutation = useMutation({\n    mutationFn: async (data: ATTRechargeRequest) => {\n      return await apiRequest(\"/api/transactions\", {\n        method: \"POST\",\n        body: {\n          ...data,\n          country: \"United States\",\n          transactionType: \"recharge\",\n          userId: user?.id,\n        },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/overview\"] });\n      toast({\n        title: \"AT&T Recharge Successful\",\n        description: `Recharge of $${form.getValues(\"amount\")} has been processed successfully.`,\n      });\n      form.reset();\n      setSelectedAmount(0);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Failed to process AT&T recharge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter for AT&T Recharge plans based on selected carrier\n  const selectedCarrierValue = form.watch('carrier');\n  const attRechargePlans = allPlans ? allPlans.filter(plan => \n    plan.serviceType === \"att\" && \n    plan.carrier === selectedCarrierValue\n  ) : [];\n\n  const onSubmit = (data: ATTRechargeRequest) => {\n    rechargeMutation.mutate(data);\n  };\n\n  const selectedCarrier = ATT_CARRIERS.find(c => c.value === form.watch(\"carrier\"));\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Smartphone className=\"w-8 h-8 text-orange-600 mr-3\" />\n            AT&T Recharge\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Top up your AT&T phone instantly</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recharge Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"w-5 h-5 text-orange-600 mr-2\" />\n                  Recharge Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Phone Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter AT&T phone number...\" \n                              {...field}\n                              className=\"text-lg\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Carrier Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>AT&T Service Type</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select your AT&T service type...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {ATT_CARRIERS.map((carrier) => (\n                                <SelectItem key={carrier.value} value={carrier.value}>\n                                  {carrier.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Plan Selection */}\n                    <div>\n                      <FormLabel className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                        Select Recharge Plan\n                      </FormLabel>\n                      \n                      {plansLoading ? (\n                        <div className=\"text-center py-4\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-orange-600 mx-auto\"></div>\n                          <p className=\"text-sm text-gray-500 mt-2\">Loading plans...</p>\n                        </div>\n                      ) : !form.watch('carrier') ? (\n                        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n                          <Zap className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-gray-500\">Please select an AT&T carrier first</p>\n                          <p className=\"text-sm text-gray-400\">Choose Prepaid or Postpaid to see available plans</p>\n                        </div>\n                      ) : attRechargePlans.length > 0 ? (\n                        <div className=\"space-y-3 mb-4\">\n                          {attRechargePlans.map((plan) => (\n                            <Button\n                              key={plan.id}\n                              type=\"button\"\n                              variant={selectedPlan?.id === plan.id ? \"default\" : \"outline\"}\n                              className={`h-auto p-4 flex items-center justify-between w-full ${\n                                selectedPlan?.id === plan.id \n                                  ? \"bg-orange-600 hover:bg-orange-700 text-white\" \n                                  : \"hover:bg-orange-50\"\n                              }`}\n                              onClick={() => {\n                                setSelectedPlan(plan);\n                                \n                                // Calculate the correct price based on promotional pricing\n                                let planPrice;\n                                if (plan.isPromotional && plan.originalPrice && plan.discountPercentage) {\n                                  // Use promotional price for promotional plans (both admin and retailer)\n                                  const originalPrice = parseFloat(plan.originalPrice);\n                                  const discount = parseFloat(plan.discountPercentage) / 100;\n                                  planPrice = originalPrice * (1 - discount);\n                                } else if (user?.role === \"retailer\") {\n                                  // Use retailer price or fall back to our cost for non-promotional plans\n                                  planPrice = parseFloat(plan.retailerPrice || plan.ourCost);\n                                } else {\n                                  // Admin sees our cost for non-promotional plans\n                                  planPrice = parseFloat(plan.ourCost);\n                                }\n                                \n                                setSelectedAmount(planPrice);\n                                form.setValue(\"amount\", planPrice);\n                                form.setValue(\"carrier\", plan.carrier as \"att-prepaid\" | \"att-postpaid\");\n                              }}\n                            >\n                              <div className=\"flex-1 text-left pr-4\">\n                                <div className=\"font-semibold text-sm leading-tight\">\n                                  {plan.name.replace(/-\\$\\d+/, '').replace(/\\$\\d+/, '').trim()}\n                                </div>\n                                <div className=\"text-xs opacity-75 mt-1\">\n                                  {plan.durationMonths && plan.durationMonths > 1 ? `${plan.durationMonths} month plan` : '1 month plan'}\n                                </div>\n                                {plan.isPromotional && plan.promotionalLabel && (\n                                  <div className=\"text-xs text-green-600 font-medium mt-1\">🎉 {plan.promotionalLabel}</div>\n                                )}\n                                {plan.description && (\n                                  <div className=\"text-xs opacity-60 mt-1 line-clamp-2\">{plan.description}</div>\n                                )}\n                              </div>\n                              <div className=\"flex flex-col items-end gap-1\">\n                                <div className=\"flex flex-col items-end\">\n                                  {plan.isPromotional && plan.originalPrice && (\n                                    <div className=\"text-xs text-gray-500 line-through\">\n                                      ${parseFloat(plan.originalPrice).toFixed(2)}\n                                    </div>\n                                  )}\n                                  <div className=\"font-bold text-lg\">\n                                    ${(() => {\n                                      if (plan.isPromotional && plan.originalPrice && plan.discountPercentage) {\n                                        // Show promotional price for promotional plans (both admin and retailer)\n                                        const originalPrice = parseFloat(plan.originalPrice);\n                                        const discount = parseFloat(plan.discountPercentage) / 100;\n                                        return (originalPrice * (1 - discount)).toFixed(2);\n                                      } else if (user?.role === \"retailer\") {\n                                        // Use retailer price or fall back to our cost for non-promotional plans\n                                        return (plan.retailerPrice ? parseFloat(plan.retailerPrice).toFixed(2) : parseFloat(plan.ourCost).toFixed(2));\n                                      } else {\n                                        // Admin sees our cost for non-promotional plans\n                                        return parseFloat(plan.ourCost).toFixed(2);\n                                      }\n                                    })()}\n                                  </div>\n                                </div>\n                                <Badge \n                                  variant=\"secondary\" \n                                  className={`text-xs whitespace-nowrap ${\n                                    plan.carrier === \"att-prepaid\" \n                                      ? \"bg-orange-100 text-orange-800\" \n                                      : \"bg-orange-200 text-orange-900\"\n                                  }`}\n                                >\n                                  {plan.carrier === \"att-prepaid\" ? \"Prepaid\" : \"Postpaid\"}\n                                </Badge>\n                              </div>\n                            </Button>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n                          <Zap className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-gray-500\">No AT&T recharge plans available</p>\n                          <p className=\"text-sm text-gray-400\">Please create AT&T recharge plans in Plan Management</p>\n                        </div>\n                      )}\n\n                      <FormField\n                        control={form.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Recharge Amount</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\"\n                                placeholder=\"Amount will be set by selected plan...\"\n                                {...field}\n                                value={selectedAmount || field.value || ''}\n                                disabled={true}\n                                className=\"text-lg bg-gray-50\"\n                              />\n                            </FormControl>\n                            <p className=\"text-xs text-gray-500 mt-1\">Amount is determined by the selected plan</p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-orange-600 hover:bg-orange-700 text-white py-3 text-lg\"\n                      disabled={rechargeMutation.isPending}\n                    >\n                      {rechargeMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Processing...\n                        </>\n                      ) : (\n                        `Complete Recharge - $${form.watch(\"amount\") || 0}`\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary */}\n          <div className=\"space-y-6\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle>Recharge Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Phone:</span>\n                    <span className=\"font-medium\">\n                      {form.watch(\"phoneNumber\") || \"Not entered\"}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Carrier:</span>\n                    <span className=\"font-medium\">\n                      {selectedCarrier?.label || \"Not selected\"}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Plan:</span>\n                    <div className=\"text-right\">\n                      {selectedPlan ? (\n                        <span className=\"font-medium\">{selectedPlan.name.replace(/-\\$\\d+/, '').replace(/\\$\\d+/, '').trim()}</span>\n                      ) : (\n                        <span className=\"text-gray-400\">Not selected</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Amount:</span>\n                    <span className=\"text-lg font-semibold text-orange-600\">\n                      ${form.watch(\"amount\") || 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center text-lg font-semibold\">\n                      <span>Total:</span>\n                      <span className=\"text-orange-600\">${form.watch(\"amount\") || 0}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Features */}\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle>Why Choose AT&T?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Instant Top-up</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Smartphone className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">24/7 Availability</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Secure Payments</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">No Hidden Fees</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19803},"client/src/pages/ActivityManagement.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, FileText, Activity, TrendingUp } from \"lucide-react\";\nimport { ActivitySearch } from \"@/components/ActivitySearch\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nexport default function ActivityManagement() {\n  const { user } = useAuth();\n\n  // Get basic statistics for dashboard (mocked for now)\n  const stats = {\n    totalActivations: 0,\n    totalRecharges: 0,\n    pendingCount: 0,\n    totalCommissions: '0.00'\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground\">Please log in to access activity management</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Activity Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Search activations and recharges\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          {user.role.charAt(0).toUpperCase() + user.role.slice(1)} Access\n        </Badge>\n      </div>\n\n      {/* Quick Stats */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{stats.totalActivations || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Activations</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{stats.totalRecharges || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Recharges</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Search className=\"w-5 h-5 text-purple-600\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{stats.pendingCount || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Pending Items</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5 text-orange-600\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">${stats.totalCommissions || '0.00'}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Commissions</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Activity Search - Main Content */}\n      <ActivitySearch userRole={user.role as 'admin' | 'employee' | 'retailer'} />\n\n      {/* Help Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"w-5 h-5\" />\n            Quick Help\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Activity Search</h4>\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                <li>• Search by ICCID to find all related activations and recharges</li>\n                <li>• Search by mobile number to track customer history</li>\n                <li>• Use email or customer name for broader searches</li>\n                <li>• Apply filters for service type, status, and date ranges</li>\n                <li>• Export search results to CSV for offline analysis</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-2\">Download Reports</h4>\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                <li>• Use the dedicated \"Download Reports\" page for comprehensive reporting</li>\n                <li>• Generate daily, monthly, and custom date range reports</li>\n                <li>• Download in CSV or JSON format for analysis</li>\n                <li>• Access wallet transactions, recharge history, and retailer performance</li>\n                <li>• Find Reports in the main navigation sidebar</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5254},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { forgotUsernameSchema, forgotPasswordSchema, type ForgotUsernameRequest, type ForgotPasswordRequest } from \"@shared/schema\";\nimport { ArrowLeft, Mail, User, KeyRound, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ForgotPassword() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"username\");\n  const [response, setResponse] = useState<string | null>(null);\n  const [tempPassword, setTempPassword] = useState<string | null>(null);\n\n  const forgotUsernameForm = useForm<ForgotUsernameRequest>({\n    resolver: zodResolver(forgotUsernameSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordRequest>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n    },\n  });\n\n  const forgotUsernameMutation = useMutation({\n    mutationFn: async (data: ForgotUsernameRequest) => {\n      return await apiRequest(\"/api/auth/forgot-username\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: (data) => {\n      setResponse(data.message);\n      toast({\n        title: \"Success\",\n        description: \"Check your email for username recovery instructions\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process username recovery\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordRequest) => {\n      return await apiRequest(\"/api/auth/forgot-password\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: (data) => {\n      setResponse(data.message);\n      if (data.tempPassword) {\n        setTempPassword(data.tempPassword);\n      }\n      toast({\n        title: \"Success\",\n        description: \"Temporary password has been generated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process password reset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleForgotUsername = (data: ForgotUsernameRequest) => {\n    forgotUsernameMutation.mutate(data);\n  };\n\n  const handleForgotPassword = (data: ForgotPasswordRequest) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  const resetForms = () => {\n    setResponse(null);\n    setTempPassword(null);\n    forgotUsernameForm.reset();\n    forgotPasswordForm.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Back to Login Link */}\n        <div className=\"mb-6\">\n          <Link href=\"/login\">\n            <Button variant=\"ghost\" className=\"gap-2 text-muted-foreground hover:text-foreground\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Login\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle className=\"text-2xl font-bold\">Account Recovery</CardTitle>\n            <CardDescription>\n              Recover your retailer account username or password\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {response ? (\n              <div className=\"space-y-4\">\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{response}</AlertDescription>\n                </Alert>\n                \n                {tempPassword && (\n                  <Alert>\n                    <KeyRound className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Temporary Password:</strong> {tempPassword}\n                      <br />\n                      <span className=\"text-sm text-muted-foreground\">\n                        Please save this and change it after logging in\n                      </span>\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"flex gap-2\">\n                  <Button onClick={resetForms} variant=\"outline\" className=\"flex-1\">\n                    Try Again\n                  </Button>\n                  <Link href=\"/login\" className=\"flex-1\">\n                    <Button className=\"w-full\">\n                      Go to Login\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            ) : (\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"username\" className=\"gap-2\">\n                    <User className=\"h-4 w-4\" />\n                    Username\n                  </TabsTrigger>\n                  <TabsTrigger value=\"password\" className=\"gap-2\">\n                    <KeyRound className=\"h-4 w-4\" />\n                    Password\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"username\" className=\"space-y-4 mt-6\">\n                  <div className=\"text-center mb-4\">\n                    <Mail className=\"h-12 w-12 mx-auto text-blue-500 mb-2\" />\n                    <h3 className=\"font-semibold\">Forgot Username?</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enter your email address to recover your username\n                    </p>\n                  </div>\n\n                  <form onSubmit={forgotUsernameForm.handleSubmit(handleForgotUsername)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Enter your registered email\"\n                        {...forgotUsernameForm.register(\"email\")}\n                      />\n                      {forgotUsernameForm.formState.errors.email && (\n                        <p className=\"text-sm text-red-500\">\n                          {forgotUsernameForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={forgotUsernameMutation.isPending}\n                    >\n                      {forgotUsernameMutation.isPending ? \"Sending...\" : \"Recover Username\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n                <TabsContent value=\"password\" className=\"space-y-4 mt-6\">\n                  <div className=\"text-center mb-4\">\n                    <KeyRound className=\"h-12 w-12 mx-auto text-green-500 mb-2\" />\n                    <h3 className=\"font-semibold\">Forgot Password?</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enter your username and email to get a temporary password\n                    </p>\n                  </div>\n\n                  <form onSubmit={forgotPasswordForm.handleSubmit(handleForgotPassword)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        placeholder=\"Enter your username\"\n                        {...forgotPasswordForm.register(\"username\")}\n                      />\n                      {forgotPasswordForm.formState.errors.username && (\n                        <p className=\"text-sm text-red-500\">\n                          {forgotPasswordForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email-password\">Email Address</Label>\n                      <Input\n                        id=\"email-password\"\n                        type=\"email\"\n                        placeholder=\"Enter your registered email\"\n                        {...forgotPasswordForm.register(\"email\")}\n                      />\n                      {forgotPasswordForm.formState.errors.email && (\n                        <p className=\"text-sm text-red-500\">\n                          {forgotPasswordForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={forgotPasswordMutation.isPending}\n                    >\n                      {forgotPasswordMutation.isPending ? \"Sending...\" : \"Get Temporary Password\"}\n                    </Button>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            )}\n\n            <div className=\"mt-6 pt-4 border-t\">\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-xs\">\n                  <strong>For Retailers Only:</strong> This recovery system is available only for retailer accounts. \n                  Admins and employees should contact system administrators for password assistance.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10305},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Smartphone, Users, ArrowRight } from \"lucide-react\";\nimport nexitelLogo from \"@assets/ChatGPT Image Aug 11, 2025 at 04_17_52 PM_1755567830590.png\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4 py-8\">\n      <div className=\"container mx-auto\">\n        <div className=\"max-w-sm sm:max-w-md mx-auto bg-white rounded-xl shadow-lg p-6 sm:p-8 text-center\">\n          <div className=\"flex flex-col items-center mb-6\">\n            <div className=\"mb-4\">\n              <img \n                src={nexitelLogo} \n                alt=\"Nexitel Logo\" \n                className=\"w-16 h-16 sm:w-20 sm:h-20 mx-auto object-contain\"\n              />\n            </div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-600 to-green-500 bg-clip-text text-transparent\">\n              Welcome to Nexitel\n            </h1>\n            <p className=\"text-base sm:text-lg text-gray-600 font-medium mt-2\">\n              Next Generation Network\n            </p>\n          </div>\n          \n\n          \n          <div className=\"space-y-4\">\n            <Link href=\"/login\">\n              <Button className=\"w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white py-3 sm:py-4 rounded-xl shadow-lg text-base min-h-[44px]\">\n                <Users className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n                Login\n                <ArrowRight className=\"w-4 h-4 sm:w-5 sm:h-5 ml-2\" />\n              </Button>\n            </Link>\n            \n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1722},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport logoUrl from \"@assets/ChatGPT Image Aug 11, 2025 at 04_17_52 PM_1755567830590.png\";\n\n\nexport default function Login() {\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\", // Ensure cookies are sent and received\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Login failed\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome, ${data.user.username}!`,\n      });\n      // Immediate redirect to avoid session issues\n      switch (data.user.role) {\n        case \"admin\":\n          window.location.href = \"/admin\";\n          break;\n        case \"employee\":\n          window.location.href = \"/employee/dashboard\";\n          break;\n        case \"retailer\":\n          window.location.href = \"/retailer/dashboard\";\n          break;\n        default:\n          window.location.href = \"/\";\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-sm\">\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mb-4 flex justify-center\">\n              <img \n                src={logoUrl} \n                alt=\"Nexitel Logo\" \n                className=\"w-24 h-24 object-contain\"\n              />\n            </div>\n            <CardTitle className=\"text-center text-2xl font-bold text-gray-800\">\n              Nexitel POS System\n            </CardTitle>\n            <p className=\"text-sm text-gray-600 mt-2\">Sign in to your account</p>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4629},"client/src/pages/NexiphoneApps.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  Download, \n  Smartphone, \n  ChevronRight, \n  Star, \n  Users, \n  Shield, \n  Zap,\n  Phone,\n  MessageSquare,\n  Settings,\n  BarChart3,\n  ArrowRight,\n  Plus\n} from \"lucide-react\";\n\nexport default function NexiphoneApps() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [, setLocation] = useLocation();\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      setLocation(\"/retailer/dashboard\");\n    } else if (user?.role === \"employee\") {\n      setLocation(\"/employee/dashboard\");\n    } else if (user?.role === \"admin\") {\n      setLocation(\"/admin\");\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            onClick={handleBackNavigation}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <Phone className=\"w-8 h-8 text-blue-600 mr-3\" />\n                NexiPhone VoIP Services\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Complete VoIP solution: mobile apps, activation & service management</p>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                <Star className=\"w-3 h-3 mr-1\" />\n                4.8 Rating\n              </Badge>\n              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                50K+ Downloads\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"features\">Features</TabsTrigger>\n            <TabsTrigger value=\"voip-services\">VoIP Services</TabsTrigger>\n            <TabsTrigger value=\"download\">Download</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            {/* App Overview */}\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-blue-700\">\n                    <Smartphone className=\"w-6 h-6 mr-2\" />\n                    Nexiphone for Business\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Transform your smartphone into a powerful business communication tool. \n                    Nexiphone delivers crystal-clear VoIP calls, advanced call management, \n                    and seamless integration with your business workflow.\n                  </p>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <Shield className=\"w-4 h-4 text-green-600 mr-2\" />\n                      <span>Enterprise-grade security & encryption</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Zap className=\"w-4 h-4 text-orange-600 mr-2\" />\n                      <span>HD voice quality with noise cancellation</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Phone className=\"w-4 h-4 text-blue-600 mr-2\" />\n                      <span>Multiple VoIP number management</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-600 mr-2\" />\n                      <span>Real-time analytics & call reporting</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>What's New</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"border-l-4 border-blue-500 pl-4\">\n                      <div className=\"font-medium text-sm\">Version 2.1.0</div>\n                      <div className=\"text-sm text-gray-600\">Enhanced call quality and stability improvements</div>\n                    </div>\n                    <div className=\"border-l-4 border-green-500 pl-4\">\n                      <div className=\"font-medium text-sm\">New Features</div>\n                      <div className=\"text-sm text-gray-600\">Added conference calling and call recording</div>\n                    </div>\n                    <div className=\"border-l-4 border-orange-500 pl-4\">\n                      <div className=\"font-medium text-sm\">UI Updates</div>\n                      <div className=\"text-sm text-gray-600\">Redesigned interface for better user experience</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"features\" className=\"space-y-8\">\n            {/* Features Grid */}\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"border-blue-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-blue-700 text-lg\">\n                    <Phone className=\"w-5 h-5 mr-2\" />\n                    Call Management\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-blue-500\" />\n                    Make & receive VoIP calls\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-blue-500\" />\n                    Call forwarding & transfer\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-blue-500\" />\n                    Conference calling (up to 10 participants)\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-blue-500\" />\n                    Call recording & playback\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-green-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-green-700 text-lg\">\n                    <MessageSquare className=\"w-5 h-5 mr-2\" />\n                    Messaging & SMS\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-green-500\" />\n                    Send & receive SMS messages\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-green-500\" />\n                    Group messaging support\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-green-500\" />\n                    Message templates & auto-replies\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-green-500\" />\n                    Rich media attachments\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-purple-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-purple-700 text-lg\">\n                    <Settings className=\"w-5 h-5 mr-2\" />\n                    Account Management\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-purple-500\" />\n                    Multiple VoIP number management\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-purple-500\" />\n                    Usage analytics & reports\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-purple-500\" />\n                    Contact sync & management\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2 text-purple-500\" />\n                    Custom ringtones & notifications\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Technical Specifications */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Technical Specifications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <div>\n                    <h4 className=\"font-medium mb-3\">iOS Requirements</h4>\n                    <div className=\"space-y-2 text-sm text-gray-600\">\n                      <div>• iOS 12.0 or later</div>\n                      <div>• Compatible with iPhone, iPad, and iPod touch</div>\n                      <div>• 50MB storage space</div>\n                      <div>• Wi-Fi or cellular data connection</div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Android Requirements</h4>\n                    <div className=\"space-y-2 text-sm text-gray-600\">\n                      <div>• Android 6.0 (API level 23) or higher</div>\n                      <div>• 45MB storage space</div>\n                      <div>• Microphone and speaker permissions</div>\n                      <div>• Internet connection required</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"voip-services\" className=\"space-y-8\">\n            {/* VoIP Services Grid */}\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {/* VoIP Activation */}\n              <Card className=\"border-orange-200 hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center text-orange-700\">\n                    <Phone className=\"w-6 h-6 mr-2\" />\n                    VoIP Activation\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Set up individual VoIP phone services for customers with automatic email notifications and setup instructions.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                      Choose from available VoIP plans\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                      Generate phone numbers automatically\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                      Send setup instructions via email\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                      Commission-based earnings\n                    </div>\n                  </div>\n                  <Link href=\"/voip-activation\">\n                    <Button className=\"w-full bg-orange-600 hover:bg-orange-700 mt-4\">\n                      Start VoIP Activation\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* Bulk VoIP Activation */}\n              <Card className=\"border-amber-200 hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center text-amber-700\">\n                    <Users className=\"w-6 h-6 mr-2\" />\n                    Bulk VoIP Activation\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Process multiple VoIP activations at once with CSV export capabilities and bulk email notifications.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                      Activate multiple lines simultaneously\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                      Export activation data to CSV\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                      Bulk email notifications\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                      Streamlined workflow\n                    </div>\n                  </div>\n                  <Link href=\"/voip-bulk-activation\">\n                    <Button className=\"w-full bg-amber-600 hover:bg-amber-700 mt-4\">\n                      Start Bulk Activation\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              {/* VoIP Analytics */}\n              <Card className=\"border-purple-200 hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center text-purple-700\">\n                    <BarChart3 className=\"w-6 h-6 mr-2\" />\n                    VoIP Analytics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Track VoIP service performance, usage patterns, and revenue analytics for better business insights.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-purple-500\" />\n                      Active line monitoring\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-purple-500\" />\n                      Revenue tracking\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-purple-500\" />\n                      Usage statistics\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4 mr-2 text-purple-500\" />\n                      Performance reports\n                    </div>\n                  </div>\n                  <Button className=\"w-full bg-purple-600 hover:bg-purple-700 mt-4\" disabled>\n                    Coming Soon\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* VoIP Service Stats */}\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Active VoIP Lines</p>\n                      <p className=\"text-2xl font-bold text-orange-600\">247</p>\n                    </div>\n                    <Phone className=\"w-8 h-8 text-orange-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">This Month</p>\n                      <p className=\"text-2xl font-bold text-amber-600\">89</p>\n                    </div>\n                    <Users className=\"w-8 h-8 text-amber-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600\">Revenue</p>\n                      <p className=\"text-2xl font-bold text-green-600\">$2,847</p>\n                    </div>\n                    <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"download\">\n            {/* Download Section */}\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <Card className=\"border-gray-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-black rounded-xl flex items-center justify-center mr-3\">\n                      <Smartphone className=\"w-6 h-6 text-white\" />\n                    </div>\n                    iOS App Store\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Download Nexiphone for iPhone and iPad from the official App Store.\n                  </p>\n                  \n                  <a \n                    href=\"https://apps.apple.com/app/nexiphone\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"block\"\n                  >\n                    <div className=\"flex items-center justify-between p-4 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-white rounded-lg flex items-center justify-center mr-3\">\n                          <Smartphone className=\"w-6 h-6 text-black\" />\n                        </div>\n                        <div>\n                          <div className=\"text-sm\">Download on the</div>\n                          <div className=\"text-xl font-bold\">App Store</div>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"w-6 h-6\" />\n                    </div>\n                  </a>\n\n                  <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                    <span>Version 2.1.0</span>\n                    <span>45.2 MB</span>\n                    <div className=\"flex items-center\">\n                      <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n                      <span>4.8</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-gray-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-green-600 rounded-xl flex items-center justify-center mr-3\">\n                      <Smartphone className=\"w-6 h-6 text-white\" />\n                    </div>\n                    Google Play Store\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Get Nexiphone for Android devices from Google Play Store.\n                  </p>\n                  \n                  <a \n                    href=\"https://play.google.com/store/apps/details?id=com.nexitel.nexiphone\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"block\"\n                  >\n                    <div className=\"flex items-center justify-between p-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-white rounded-lg flex items-center justify-center mr-3\">\n                          <Smartphone className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <div>\n                          <div className=\"text-sm\">Get it on</div>\n                          <div className=\"text-xl font-bold\">Google Play</div>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"w-6 h-6\" />\n                    </div>\n                  </a>\n\n                  <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                    <span>Version 2.1.0</span>\n                    <span>42.8 MB</span>\n                    <div className=\"flex items-center\">\n                      <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n                      <span>4.9</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Installation Instructions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Installation & Setup Guide</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <div>\n                    <h4 className=\"font-medium mb-3 text-blue-700\">For iOS Users</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">1</span>\n                        <span className=\"text-sm\">Open the App Store on your iPhone or iPad</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">2</span>\n                        <span className=\"text-sm\">Search for \"Nexiphone\" or use the download link</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">3</span>\n                        <span className=\"text-sm\">Tap \"Get\" to download and install the app</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">4</span>\n                        <span className=\"text-sm\">Open the app and sign in with your VoIP credentials</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-3 text-green-700\">For Android Users</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">1</span>\n                        <span className=\"text-sm\">Open Google Play Store on your Android device</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">2</span>\n                        <span className=\"text-sm\">Search for \"Nexiphone\" or use the download link</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">3</span>\n                        <span className=\"text-sm\">Tap \"Install\" to download the app</span>\n                      </div>\n                      <div className=\"flex items-start space-x-2\">\n                        <span className=\"bg-green-100 text-green-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">4</span>\n                        <span className=\"text-sm\">Launch the app and configure your VoIP settings</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":27481},"client/src/pages/NexitelActivation.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Zap, ArrowLeft, User, Phone, CreditCard, Check, Wifi, MapPin, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEmployeeVerification } from \"@/hooks/useEmployeeVerification\";\nimport { EmployeeVerificationDialog } from \"@/components/EmployeeVerificationDialog\";\nimport { CustomerReceipt } from \"@/components/CustomerReceipt\";\nimport { US_STATES, DEVICE_TYPES, US_CARRIERS, handleBackNavigation } from \"@shared/constants\";\n\n// Create base schema without employeeId\nconst baseNexitelActivationSchema = z.object({\n  iccid: z.string().min(19, \"ICCID must be at least 19 digits\").max(22, \"ICCID must be at most 22 digits\"),\n  simType: z.enum([\"physical\", \"esim\"], { required_error: \"SIM type is required\" }),\n  nexitelNetwork: z.enum([\"nexitel-purple\", \"nexitel-blue\"], { required_error: \"Nexitel network is required\" }),\n  plan: z.string().min(1, \"Plan selection is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  state: z.string().min(2, \"State is required\"),\n  zipCode: z.string().min(5, \"Valid ZIP code is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  portNumber: z.boolean().optional(),\n  existingPhoneNumber: z.string().optional(),\n  accountNumber: z.string().optional(),\n  pinNumber: z.string().optional(),\n  portingZipCode: z.string().optional(),\n  // WiFi Calling fields\n  enableWifiCalling: z.boolean().optional(),\n  useDifferentEmergencyAddress: z.boolean().optional(),\n  emergencyAddress: z.string().optional(),\n  emergencyCity: z.string().optional(),\n  emergencyState: z.string().optional(),\n  emergencyZipCode: z.string().optional(),\n  employeeId: z.string().optional(),\n}).refine((data) => {\n  // If WiFi calling is enabled and user wants different emergency address, all emergency fields are required\n  if (data.enableWifiCalling && data.useDifferentEmergencyAddress) {\n    return data.emergencyAddress && data.emergencyCity && data.emergencyState && data.emergencyZipCode;\n  }\n  return true;\n}, {\n  message: \"All emergency address fields are required when using different address for WiFi calling\",\n  path: [\"emergencyAddress\"]\n});\n\n// Create schema with conditional employeeId requirement based on user role\nconst createNexitelActivationSchema = (userRole: string) => {\n  const baseSchema = z.object({\n    iccid: z.string().min(19, \"ICCID must be at least 19 digits\").max(22, \"ICCID must be at most 22 digits\"),\n    simType: z.enum([\"physical\", \"esim\"], { required_error: \"SIM type is required\" }),\n    nexitelNetwork: z.enum([\"nexitel-purple\", \"nexitel-blue\"], { required_error: \"Nexitel network is required\" }),\n    plan: z.string().min(1, \"Plan selection is required\"),\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    address: z.string().min(1, \"Address is required\"),\n    state: z.string().min(2, \"State is required\"),\n    zipCode: z.string().min(5, \"Valid ZIP code is required\"),\n    email: z.string().email(\"Valid email is required\"),\n    portNumber: z.boolean().optional(),\n    existingPhoneNumber: z.string().optional(),\n    accountNumber: z.string().optional(),\n    pinNumber: z.string().optional(),\n    portingZipCode: z.string().optional(),\n    // WiFi Calling fields\n    enableWifiCalling: z.boolean().optional(),\n    useDifferentEmergencyAddress: z.boolean().optional(),\n    emergencyAddress: z.string().optional(),\n    emergencyCity: z.string().optional(),\n    emergencyState: z.string().optional(),\n    emergencyZipCode: z.string().optional(),\n    employeeId: userRole === 'admin' ? z.string().min(1, \"Employee ID is required\") : z.string().optional(),\n  });\n\n  return baseSchema.refine((data) => {\n    // If WiFi calling is enabled and user wants different emergency address, all emergency fields are required\n    if (data.enableWifiCalling && data.useDifferentEmergencyAddress) {\n      return data.emergencyAddress && data.emergencyCity && data.emergencyState && data.emergencyZipCode;\n    }\n    return true;\n  }, {\n    message: \"All emergency address fields are required when using different address for WiFi calling\",\n    path: [\"emergencyAddress\"]\n  });\n};\n\nconst nexitelActivationSchema = baseNexitelActivationSchema;\n\ntype NexitelActivationRequest = z.infer<typeof nexitelActivationSchema>;\n\n// Plans are now fetched from API instead of hardcoded\n// Constants moved to shared/constants.ts\n\n\n\nexport default function NexitelActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<string>(\"\");\n  const [wantPorting, setWantPorting] = useState<boolean>(false);\n  const [enableWifiCalling, setEnableWifiCalling] = useState<boolean>(false);\n  const [useDifferentEmergencyAddress, setUseDifferentEmergencyAddress] = useState<boolean>(false);\n  const [showReceipt, setShowReceipt] = useState<boolean>(false);\n  const [activationData, setActivationData] = useState<any>(null);\n\n  // Fetch Nexitel plans from API\n  const { data: plans = [], isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/plans\", \"nexitel\"],\n    queryFn: () => apiRequest(\"/api/plans?serviceType=nexitel\"),\n  });\n\n  // Employee verification hook\n  const employeeVerification = useEmployeeVerification({\n    operationType: \"nexitel_activation\",\n    operationDetails: \"Processing Nexitel activation with customer information and plan details\"\n  });\n\n  const handleBackNavigationClick = () => {\n    handleBackNavigation(user?.role);\n  };\n\n  const form = useForm<NexitelActivationRequest>({\n    resolver: zodResolver(createNexitelActivationSchema(user?.role || 'retailer')),\n    defaultValues: {\n      iccid: \"\",\n      simType: undefined,\n      nexitelNetwork: undefined,\n      plan: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      state: \"\",\n      zipCode: \"\",\n      email: \"\",\n      portNumber: false,\n      existingPhoneNumber: \"\",\n      accountNumber: \"\",\n      pinNumber: \"\",\n      portingZipCode: \"\",\n      enableWifiCalling: false,\n      useDifferentEmergencyAddress: false,\n      emergencyAddress: \"\",\n      emergencyCity: \"\",\n      emergencyState: \"\",\n      emergencyZipCode: \"\",\n      employeeId: \"\",\n    },\n  });\n\n  // Activation mutation\n  const activationMutation = useMutation({\n    mutationFn: async (data: NexitelActivationRequest) => {\n      // First, submit the main activation\n      const activationResponse = await apiRequest('/api/nexitel/activate', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n\n      // If WiFi calling is enabled, activate it\n      if (data.enableWifiCalling) {\n        const emergencyAddress = data.useDifferentEmergencyAddress\n          ? {\n              street: data.emergencyAddress!,\n              city: data.emergencyCity!,\n              state: data.emergencyState!,\n              zipCode: data.emergencyZipCode!,\n            }\n          : {\n              street: data.address,\n              city: \"\", // Extract from address if needed\n              state: data.state,\n              zipCode: data.zipCode,\n            };\n\n        const wifiCallingRequest = {\n          iccid: data.iccid,\n          customerName: `${data.firstName} ${data.lastName}`,\n          phoneNumber: \"\", // Will be assigned after activation\n          emergencyAddress: emergencyAddress,\n        };\n\n        await apiRequest('/api/nexitel/wifi-calling/enable', {\n          method: 'POST',\n          body: JSON.stringify(wifiCallingRequest),\n        });\n      }\n\n      return activationResponse;\n    },\n    onSuccess: (data, variables) => {\n      const selectedPlanDetails = plans.find((p: any) => p.id === parseInt(variables.plan));\n      \n      // Prepare receipt data\n      const receiptData = {\n        id: `ACT-${Date.now()}`,\n        customerName: `${variables.firstName} ${variables.lastName}`,\n        phoneNumber: data.phoneNumber || \"To be assigned\",\n        iccid: variables.iccid,\n        planName: selectedPlanDetails?.name || \"Selected Plan\",\n        planPrice: selectedPlanDetails?.denomination?.toString().startsWith('$') \n          ? selectedPlanDetails.denomination \n          : `$${selectedPlanDetails?.denomination}`,\n        carrier: variables.nexitelNetwork,\n        activationDate: new Date().toLocaleDateString(),\n        retailerName: user?.username || \"System\",\n        address: variables.address,\n        city: \"\", // Could be extracted from address if needed\n        state: variables.state,\n        zipCode: variables.zipCode,\n      };\n      \n      setActivationData(receiptData);\n      setShowReceipt(true);\n      \n      toast({\n        title: \"Activation Successful\",\n        description: `Nexitel activation completed${enableWifiCalling ? ' with WiFi Calling enabled' : ''}`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Activation error:\", error);\n      toast({\n        title: \"Activation Failed\",\n        description: error.message || \"Failed to complete Nexitel activation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: NexitelActivationRequest) => {\n    // Address validation for WiFi Calling\n    if (data.enableWifiCalling) {\n      if (data.useDifferentEmergencyAddress) {\n        if (!data.emergencyAddress || !data.emergencyCity || !data.emergencyState || !data.emergencyZipCode) {\n          toast({\n            title: \"Emergency Address Required\",\n            description: \"Please provide a complete emergency address for WiFi calling activation\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      } else {\n        // Validate that activation address is complete\n        if (!data.address || !data.state || !data.zipCode) {\n          toast({\n            title: \"Address Required\",\n            description: \"A valid address is required for WiFi calling activation\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n    }\n\n    // Use employee verification only for admin users\n    if (user?.role === 'admin') {\n      employeeVerification.requireEmployeeVerification(() => {\n        activationMutation.mutate(data);\n      });\n    } else {\n      // For retailers, submit directly without employee verification\n      activationMutation.mutate(data);\n    }\n  };\n\n  const selectedPlanDetails = plans.find((plan: any) => plan.id.toString() === selectedPlan);\n\n  // Print function for customer receipt\n  const handlePrintReceipt = () => {\n    window.print();\n  };\n\n  // Close receipt and reset form\n  const handleCloseReceipt = () => {\n    setShowReceipt(false);\n    setActivationData(null);\n    \n    // Reset form after receipt is closed\n    form.reset();\n    setSelectedPlan(\"\");\n    setWantPorting(false);\n    setEnableWifiCalling(false);\n    setUseDifferentEmergencyAddress(false);\n  };\n\n  if (!user) {\n    return <div>Please log in to access this page.</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6 pb-20\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigationClick}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Zap className=\"w-8 h-8 text-blue-600 mr-3\" />\n            Nexitel Activation\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Activate your new Nexitel wireless service</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Activation Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"w-5 h-5 text-blue-600 mr-2\" />\n                  Customer Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required - Only for admin users */}\n                    {user?.role === 'admin' ? (\n                      <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                        <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                          <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                          Employee Verification Required\n                        </h3>\n                        <FormField\n                          control={form.control}\n                          name=\"employeeId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Enter your employee ID\" \n                                  {...field} \n                                  className=\"font-mono h-8\"\n                                  size={20}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    ) : null}\n\n                    {/* ICCID and SIM Information */}\n                    <div className=\"border-b pb-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                        <Phone className=\"w-5 h-5 text-blue-600 mr-2\" />\n                        SIM Card Information\n                      </h3>\n                      \n                      <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"iccid\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>ICCID Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"89014103211118510720\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"simType\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SIM Type</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select SIM type...\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"physical\">Physical SIM</SelectItem>\n                                    <SelectItem value=\"esim\">eSIM</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"nexitelNetwork\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Nexitel Network</FormLabel>\n                                <Select onValueChange={(value) => {\n                                  field.onChange(value);\n                                  // Clear plan selection when network changes\n                                  form.setValue('plan', '');\n                                  setSelectedPlan('');\n                                }} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select network...\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"nexitel-purple\">Nexitel Purple</SelectItem>\n                                    <SelectItem value=\"nexitel-blue\">Nexitel Blue</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Plan Selection */}\n                    <div className=\"border-b pb-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                        <CreditCard className=\"w-5 h-5 text-blue-600 mr-2\" />\n                        Plan Selection\n                      </h3>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"plan\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Select Plan</FormLabel>\n                            <Select onValueChange={(value) => { field.onChange(value); setSelectedPlan(value); }} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Choose a plan...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {plansLoading ? (\n                                  <SelectItem value=\"loading\" disabled>Loading plans...</SelectItem>\n                                ) : !form.watch('nexitelNetwork') ? (\n                                  <SelectItem value=\"no-network\" disabled>Please select Nexitel network first</SelectItem>\n                                ) : (() => {\n                                  const filteredPlans = plans.filter((plan: any) => \n                                    plan.carrier === form.watch('nexitelNetwork')\n                                  );\n                                  return filteredPlans.length === 0 ? (\n                                    <SelectItem value=\"no-plans\" disabled>No plans available for selected network</SelectItem>\n                                  ) : (\n                                    filteredPlans.map((plan: any) => (\n                                      <SelectItem key={plan.id} value={plan.id.toString()}>\n                                        {plan.name.replace(/-\\$\\d+/, '').replace(/\\$\\d+/, '').trim()} - ${plan.denomination.replace('$', '')} ({plan.durationMonths && plan.durationMonths > 1 ? `${plan.durationMonths} months` : '1 month'})\n                                      </SelectItem>\n                                    ))\n                                  );\n                                })()}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Customer Information */}\n                    <div className=\"border-b pb-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                        <User className=\"w-5 h-5 text-blue-600 mr-2\" />\n                        Customer Information\n                      </h3>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"firstName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>First Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"John\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"lastName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Last Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Doe\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Address</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"123 Main Street\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"state\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>State</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select state...\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {US_STATES.map((state) => (\n                                      <SelectItem key={state} value={state}>\n                                        {state}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"zipCode\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>ZIP Code</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"12345\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email Address</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"john.doe@email.com\" type=\"email\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    {/* WiFi Calling Section */}\n                    <div className=\"border-b pb-6\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                        <Wifi className=\"w-5 h-5 text-blue-600 mr-2\" />\n                        WiFi Calling (Optional)\n                      </h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            id=\"enableWifiCalling\"\n                            checked={enableWifiCalling}\n                            onCheckedChange={(checked) => {\n                              setEnableWifiCalling(!!checked);\n                              form.setValue(\"enableWifiCalling\", !!checked);\n                              if (!checked) {\n                                // Reset emergency address options if WiFi calling is disabled\n                                setUseDifferentEmergencyAddress(false);\n                                form.setValue(\"useDifferentEmergencyAddress\", false);\n                              }\n                            }}\n                            className=\"h-4 w-4\"\n                          />\n                          <label htmlFor=\"enableWifiCalling\" className=\"text-sm font-medium text-gray-700\">\n                            Enable WiFi Calling for this activation\n                          </label>\n                        </div>\n                        \n                        {enableWifiCalling && (\n                          <div className=\"ml-6 space-y-4 p-4 bg-blue-50 rounded-lg border\">\n                            <div className=\"flex items-start space-x-3\">\n                              <MapPin className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm font-medium text-blue-900 mb-2\">\n                                  Emergency Address Required for WiFi Calling\n                                </p>\n                                <p className=\"text-xs text-blue-700 mb-3\">\n                                  WiFi calling requires a valid emergency address for E911 services. By default, we'll use the activation address you provided above.\n                                </p>\n                                \n                                <div className=\"flex items-center space-x-3 mb-4\">\n                                  <Checkbox\n                                    id=\"useDifferentEmergencyAddress\"\n                                    checked={useDifferentEmergencyAddress}\n                                    onCheckedChange={(checked) => {\n                                      setUseDifferentEmergencyAddress(!!checked);\n                                      form.setValue(\"useDifferentEmergencyAddress\", !!checked);\n                                    }}\n                                    className=\"h-4 w-4\"\n                                  />\n                                  <label htmlFor=\"useDifferentEmergencyAddress\" className=\"text-sm text-blue-800\">\n                                    Use a different emergency address\n                                  </label>\n                                </div>\n\n                                {useDifferentEmergencyAddress && (\n                                  <div className=\"space-y-4 p-3 bg-white rounded border border-blue-200\">\n                                    <p className=\"text-xs font-medium text-gray-700 mb-2\">\n                                      Emergency Address (All fields required)\n                                    </p>\n                                    \n                                    <FormField\n                                      control={form.control}\n                                      name=\"emergencyAddress\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel className=\"text-xs\">Street Address</FormLabel>\n                                          <FormControl>\n                                            <Input placeholder=\"123 Emergency Street\" {...field} className=\"text-sm\" />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    \n                                    <div className=\"grid grid-cols-3 gap-3\">\n                                      <FormField\n                                        control={form.control}\n                                        name=\"emergencyCity\"\n                                        render={({ field }) => (\n                                          <FormItem>\n                                            <FormLabel className=\"text-xs\">City</FormLabel>\n                                            <FormControl>\n                                              <Input placeholder=\"City\" {...field} className=\"text-sm\" />\n                                            </FormControl>\n                                            <FormMessage />\n                                          </FormItem>\n                                        )}\n                                      />\n                                      <FormField\n                                        control={form.control}\n                                        name=\"emergencyState\"\n                                        render={({ field }) => (\n                                          <FormItem>\n                                            <FormLabel className=\"text-xs\">State</FormLabel>\n                                            <Select onValueChange={field.onChange} value={field.value}>\n                                              <FormControl>\n                                                <SelectTrigger className=\"text-sm\">\n                                                  <SelectValue placeholder=\"State\" />\n                                                </SelectTrigger>\n                                              </FormControl>\n                                              <SelectContent>\n                                                {US_STATES.map((state) => (\n                                                  <SelectItem key={state} value={state}>\n                                                    {state}\n                                                  </SelectItem>\n                                                ))}\n                                              </SelectContent>\n                                            </Select>\n                                            <FormMessage />\n                                          </FormItem>\n                                        )}\n                                      />\n                                      <FormField\n                                        control={form.control}\n                                        name=\"emergencyZipCode\"\n                                        render={({ field }) => (\n                                          <FormItem>\n                                            <FormLabel className=\"text-xs\">ZIP Code</FormLabel>\n                                            <FormControl>\n                                              <Input placeholder=\"12345\" {...field} className=\"text-sm\" />\n                                            </FormControl>\n                                            <FormMessage />\n                                          </FormItem>\n                                        )}\n                                      />\n                                    </div>\n                                  </div>\n                                )}\n\n                                {!useDifferentEmergencyAddress && (\n                                  <div className=\"p-3 bg-green-50 rounded border border-green-200\">\n                                    <div className=\"flex items-center\">\n                                      <Check className=\"w-4 h-4 text-green-600 mr-2\" />\n                                      <p className=\"text-sm text-green-800\">\n                                        Using activation address as emergency address\n                                      </p>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Number Porting */}\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                        Number Porting (Optional)\n                      </h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"portNumber\"\n                            checked={wantPorting}\n                            onChange={(e) => {\n                              setWantPorting(e.target.checked);\n                              form.setValue(\"portNumber\", e.target.checked);\n                            }}\n                            className=\"w-4 h-4 text-blue-600\"\n                          />\n                          <label htmlFor=\"portNumber\" className=\"text-sm text-gray-700\">\n                            I want to keep my existing phone number\n                          </label>\n                        </div>\n\n                        {wantPorting && (\n                          <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <FormField\n                                control={form.control}\n                                name=\"existingPhoneNumber\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Current Phone Number</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name=\"accountNumber\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Account Number</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"Account number\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <FormField\n                                control={form.control}\n                                name=\"pinNumber\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>PIN Number</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"PIN\" type=\"password\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name=\"portingZipCode\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Billing ZIP Code</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"12345\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"pt-6 pb-8\">\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full bg-blue-600 hover:bg-blue-700 text-lg py-6\"\n                        disabled={activationMutation.isPending}\n                      >\n                        {activationMutation.isPending ? (\n                          <>Processing Activation...</>\n                        ) : (\n                          <>\n                            <Check className=\"w-5 h-5 mr-2\" />\n                            Complete Activation\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Plan Details Sidebar */}\n          <div>\n            {selectedPlanDetails && (\n              <Card className=\"bg-white shadow-lg mb-6\">\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    {selectedPlanDetails.name}\n                  </CardTitle>\n                  <div className=\"text-center\">\n                    {selectedPlanDetails.isPromotional && selectedPlanDetails.originalPrice ? (\n                      <div>\n                        <span className=\"text-3xl font-bold text-green-600\">\n                          {selectedPlanDetails.denomination.toString().startsWith('$') ? selectedPlanDetails.denomination : `$${selectedPlanDetails.denomination}`}\n                        </span>\n                        <div className=\"text-sm text-gray-500 mt-1\">\n                          <span className=\"line-through\">${selectedPlanDetails.originalPrice}</span>\n                          {selectedPlanDetails.discountPercentage && (\n                            <span className=\"text-green-600 ml-2\">Save {selectedPlanDetails.discountPercentage}%!</span>\n                          )}\n                        </div>\n                        {selectedPlanDetails.durationMonths && selectedPlanDetails.durationMonths > 1 && (\n                          <div className=\"text-sm text-gray-600 mt-1\">\n                            {selectedPlanDetails.durationMonths} month plan\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <div>\n                        <span className=\"text-3xl font-bold text-blue-600\">\n                          {selectedPlanDetails.denomination.toString().startsWith('$') ? selectedPlanDetails.denomination : `$${selectedPlanDetails.denomination}`}\n                        </span>\n                        {selectedPlanDetails.durationMonths && selectedPlanDetails.durationMonths > 1 ? (\n                          <span className=\"text-gray-600\">/{selectedPlanDetails.durationMonths} months</span>\n                        ) : (\n                          <span className=\"text-gray-600\">/month</span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700\">Carrier:</span>\n                      <Badge variant=\"secondary\">{selectedPlanDetails.carrier}</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700\">Type:</span>\n                      <Badge variant=\"secondary\">{selectedPlanDetails.planType}</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700\">Duration:</span>\n                      <Badge variant=\"outline\" className={\n                        selectedPlanDetails.durationMonths === 1 ? \"bg-gray-100 text-gray-800\" :\n                        selectedPlanDetails.durationMonths === 3 ? \"bg-blue-100 text-blue-800\" :\n                        selectedPlanDetails.durationMonths === 6 ? \"bg-purple-100 text-purple-800\" :\n                        selectedPlanDetails.durationMonths === 12 ? \"bg-yellow-100 text-yellow-800\" :\n                        \"bg-gray-100 text-gray-800\"\n                      }>\n                        {selectedPlanDetails.durationMonths || 1} Month{(selectedPlanDetails.durationMonths || 1) > 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700\">Customer Price:</span>\n                      <div className=\"flex flex-col items-end\">\n                        {selectedPlanDetails.isPromotional && selectedPlanDetails.originalPrice ? (\n                          <>\n                            <Badge variant=\"secondary\" className=\"text-green-600\">\n                              {selectedPlanDetails.denomination.toString().startsWith('$') ? selectedPlanDetails.denomination : `$${selectedPlanDetails.denomination}`}\n                            </Badge>\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              <span className=\"line-through\">${selectedPlanDetails.originalPrice}</span>\n                              {selectedPlanDetails.discountPercentage && (\n                                <span className=\"text-green-600 ml-1\">({selectedPlanDetails.discountPercentage}% off)</span>\n                              )}\n                            </div>\n                            {selectedPlanDetails.promotionalLabel && (\n                              <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-800 text-xs mt-1\">\n                                {selectedPlanDetails.promotionalLabel}\n                              </Badge>\n                            )}\n                          </>\n                        ) : (\n                          <Badge variant=\"secondary\">{selectedPlanDetails.denomination.toString().startsWith('$') ? selectedPlanDetails.denomination : `$${selectedPlanDetails.denomination}`}</Badge>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700\">Your Cost:</span>\n                      <Badge variant=\"outline\">${selectedPlanDetails.retailerPrice}</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-700 font-semibold\">Your Commission:</span>\n                      <Badge variant=\"default\" className=\"bg-green-600 text-white\">${selectedPlanDetails.profit}</Badge>\n                    </div>\n                    {selectedPlanDetails.description && (\n                      <div className=\"mt-3\">\n                        <span className=\"text-gray-700 text-sm\">{selectedPlanDetails.description}</span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Features */}\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle>What's Included</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-green-600\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">5G Network Access</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">No Contract Required</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Nationwide Coverage</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Free Number Porting</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">24/7 Customer Support</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        \n        {/* Extra bottom spacing to ensure form is fully visible */}\n        <div className=\"h-20\"></div>\n      </div>\n\n      {/* Employee Verification Dialog - Only for admin users */}\n      {user?.role === 'admin' && (\n        <EmployeeVerificationDialog\n          isOpen={employeeVerification.isVerificationOpen}\n          onClose={employeeVerification.handleVerificationCancel}\n          onVerified={employeeVerification.handleVerificationSuccess}\n          operationType={employeeVerification.operationType}\n          operationDetails={employeeVerification.operationDetails}\n        />\n      )}\n\n      {/* Customer Receipt Modal */}\n      <Dialog open={showReceipt} onOpenChange={setShowReceipt}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Customer Receipt</DialogTitle>\n          </DialogHeader>\n          {activationData && (\n            <CustomerReceipt\n              activation={activationData}\n              onPrint={handlePrintReceipt}\n            />\n          )}\n          <div className=\"flex justify-between mt-4\">\n            <Button variant=\"outline\" onClick={handleCloseReceipt}>\n              Close\n            </Button>\n            <Button onClick={handlePrintReceipt} className=\"bg-blue-600 hover:bg-blue-700\">\n              Print Receipt\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":49206},"client/src/pages/NexitelActivationReport.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Search, FileText, Calendar, Phone } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface ActivationRecord {\n  id: number;\n  iccid: string;\n  customerInfo: {\n    name: string;\n    phone: string;\n    email: string;\n    address: string;\n  };\n  carrier: string;\n  plan: string;\n  status: string;\n  activationDate: string;\n  createdAt: string;\n}\n\nexport default function NexitelActivationReport() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  // Fetch real activation data from database\n  const { data: activations = [], isLoading, error } = useQuery<ActivationRecord[]>({\n    queryKey: ['/api/nexitel-activations'],\n    retry: 2,\n  });\n\n  // Clean phone number for search (remove formatting)\n  const cleanPhoneNumber = (phone: string) => {\n    return phone.replace(/[\\s\\-\\(\\)+]/g, '');\n  };\n\n  // Filter activations based on search term\n  const filteredActivations = activations.filter((activation: ActivationRecord) => {\n    if (!searchTerm) return true;\n    \n    const searchTermClean = cleanPhoneNumber(searchTerm);\n    const phoneClean = cleanPhoneNumber(activation.customerInfo?.phone || '');\n    \n    return phoneClean.includes(searchTermClean) ||\n           activation.customerInfo?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           activation.iccid.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           activation.id.toString().includes(searchTerm);\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-lg\">Loading activation records...</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-red-600 text-lg mb-2\">Error loading activation records</div>\n              <div className=\"text-gray-600\">Please try refreshing the page</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <FileText className=\"w-8 h-8 text-blue-600 mr-3\" />\n            Nexitel Activation Report\n          </h1>\n          <p className=\"text-gray-600 mt-2\">View and manage activation records</p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by phone number (any format: 5551234567, 555-123-4567, etc.), customer name, or ICCID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Filter by Date\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Summary */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"pt-4\">\n            <p className=\"text-sm text-gray-600\">\n              Showing {filteredActivations.length} of {activations.length} activation records\n              {searchTerm && ` matching \"${searchTerm}\"`}\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Activations List */}\n        <div className=\"space-y-4\">\n          {filteredActivations.map((activation: ActivationRecord) => (\n            <Card key={activation.id} className=\"bg-white shadow-lg hover:shadow-xl transition-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center\">\n                  <div>\n                    <p className=\"font-semibold text-gray-900\">ACT-{activation.id}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {activation.activationDate ? new Date(activation.activationDate).toLocaleDateString() : \n                       new Date(activation.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"font-medium\">{activation.customerInfo?.name || 'N/A'}</p>\n                    <p className=\"text-sm text-gray-600 flex items-center\">\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      {activation.customerInfo?.phone || 'N/A'}\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Badge className={activation.carrier === \"Nexitel Purple\" ? \"bg-purple-100 text-purple-800\" : \"bg-blue-100 text-blue-800\"}>\n                      {activation.carrier}\n                    </Badge>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-sm font-medium\">{activation.plan}</p>\n                    <p className=\"text-xs text-gray-500\">Plan</p>\n                  </div>\n                  \n                  <div>\n                    <Badge className={getStatusColor(activation.status)}>\n                      {activation.status}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-500 mb-1\">ICCID</p>\n                    <p className=\"text-sm font-mono text-gray-700\">{activation.iccid}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredActivations.length === 0 && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No records found</h3>\n              <p className=\"text-gray-500\">\n                {searchTerm \n                  ? `No activation records found matching \"${searchTerm}\"`\n                  : \"No activation records available yet\"}\n              </p>\n              {searchTerm && (\n                <Button \n                  variant=\"outline\" \n                  className=\"mt-4\"\n                  onClick={() => setSearchTerm(\"\")}\n                >\n                  Clear search\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8430},"client/src/pages/NexitelBulkActivation.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Upload, FileText, Download, AlertCircle, CheckCircle, X, Clock, Users, Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function NexitelBulkActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [selectedCarrier, setSelectedCarrier] = useState<string>(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n  const [progress, setProgress] = useState(0);\n  const [currentRow, setCurrentRow] = useState(0);\n  const [totalRows, setTotalRows] = useState(0);\n  const [processingStats, setProcessingStats] = useState({\n    successful: 0,\n    failed: 0,\n    total: 0\n  });\n\n  if (!user || ![\"admin\", \"employee\", \"retailer\"].includes(user.role)) {\n    return <div>Access denied</div>;\n  }\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"text/csv\" && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a CSV file only.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setUploadedFile(file);\n      setResults([]);\n    }\n  };\n\n  const processBulkActivation = async () => {\n    if (!uploadedFile || !selectedCarrier) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a carrier and upload a CSV file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      // Read and parse CSV file\n      const text = await uploadedFile.text();\n      const lines = text.split('\\n').filter(line => line.trim());\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      // Validate CSV format - check for required columns (case insensitive)\n      const normalizedHeaders = headers.map(h => h.toLowerCase().trim());\n      const requiredHeaders = ['iccid', 'sku', 'customer name', 'customer address', 'email'];\n      const optionalHeaders = [\n        'imei (optional)', 'date of activation (optional)', 'customer address 2', \n        'city', 'state', 'zip', 'comments/ notes', 'auto renew'\n      ];\n      \n      const missingHeaders = requiredHeaders.filter(required => \n        !normalizedHeaders.some(header => \n          header.includes(required.toLowerCase()) || \n          (required === 'customer name' && header.includes('customer name')) ||\n          (required === 'customer address' && (header.includes('customer address') && !header.includes('2')))\n        )\n      );\n      \n      if (missingHeaders.length > 0) {\n        toast({\n          title: \"Invalid CSV Format\",\n          description: `Missing required columns: ${missingHeaders.join(', ')}`,\n          variant: \"destructive\",\n        });\n        setIsProcessing(false);\n        return;\n      }\n\n      const dataRows = lines.slice(1);\n      setTotalRows(dataRows.length);\n      setProcessingStats({ successful: 0, failed: 0, total: dataRows.length });\n      \n      const results: any[] = [];\n\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i].split(',').map(cell => cell.trim());\n        const rowData: any = {};\n        \n        headers.forEach((header, index) => {\n          rowData[header.toLowerCase().trim()] = row[index] || '';\n        });\n\n        setCurrentRow(i + 1);\n        setProgress(((i + 1) / dataRows.length) * 100);\n\n        try {\n          // Simulate API call for bulk activation\n          // In production, this would be replaced with actual API call\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const activationResult = {\n            row: i + 1,\n            iccid: rowData.iccid,\n            imei: rowData['imei (optional)'] || '',\n            sku: rowData.sku,\n            customer_name: rowData['customer name'],\n            customer_address: rowData['customer address'],\n            customer_address_2: rowData['customer address 2'] || '',\n            city: rowData.city || '',\n            state: rowData.state || '',\n            zip: rowData.zip || '',\n            email: rowData.email,\n            comments_notes: rowData['comments/ notes'] || '',\n            auto_renew: rowData['auto renew'] || '',\n            date_of_activation: rowData['date of activation (optional)'] || '',\n            carrier: selectedCarrier,\n            status: Math.random() > 0.1 ? 'success' : 'failed', // 90% success rate simulation\n            message: Math.random() > 0.1 ? 'Activation successful' : 'Invalid ICCID or SKU',\n            timestamp: new Date().toISOString()\n          };\n\n          results.push(activationResult);\n          \n          if (activationResult.status === 'success') {\n            setProcessingStats(prev => ({ ...prev, successful: prev.successful + 1 }));\n          } else {\n            setProcessingStats(prev => ({ ...prev, failed: prev.failed + 1 }));\n          }\n\n        } catch (error) {\n          results.push({\n            row: i + 1,\n            iccid: rowData.iccid,\n            imei: rowData['imei (optional)'] || '',\n            sku: rowData.sku,\n            customer_name: rowData['customer name'],\n            customer_address: rowData['customer address'],\n            customer_address_2: rowData['customer address 2'] || '',\n            city: rowData.city || '',\n            state: rowData.state || '',\n            zip: rowData.zip || '',\n            email: rowData.email,\n            comments_notes: rowData['comments/ notes'] || '',\n            auto_renew: rowData['auto renew'] || '',\n            date_of_activation: rowData['date of activation (optional)'] || '',\n            carrier: selectedCarrier,\n            status: 'failed',\n            message: 'Processing error',\n            timestamp: new Date().toISOString()\n          });\n          setProcessingStats(prev => ({ ...prev, failed: prev.failed + 1 }));\n        }\n      }\n\n      setResults(results);\n      toast({\n        title: \"Bulk Activation Complete\",\n        description: `Processed ${results.length} records. ${processingStats.successful} successful, ${processingStats.failed} failed.`,\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Processing Error\",\n        description: \"Failed to process the CSV file. Please check the format and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const downloadResults = () => {\n    if (results.length === 0) return;\n\n    const csv = [\n      'Row,ICCID,IMEI,SKU,Customer Name,Customer Address,Customer Address 2,City,State,ZIP,Email,Comments/Notes,Auto Renew,Date of Activation,Carrier,Status,Message,Timestamp',\n      ...results.map(r => \n        `${r.row},\"${r.iccid}\",\"${r.imei || ''}\",\"${r.sku}\",\"${r.customer_name}\",\"${r.customer_address}\",\"${r.customer_address_2 || ''}\",\"${r.city || ''}\",\"${r.state || ''}\",\"${r.zip || ''}\",\"${r.email}\",\"${r.comments_notes || ''}\",\"${r.auto_renew || ''}\",\"${r.date_of_activation || ''}\",\"${r.carrier}\",\"${r.status}\",\"${r.message}\",\"${r.timestamp}\"`\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `nexitel_bulk_activation_results_${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const downloadTemplate = () => {\n    const template = [\n      'ICCID,IMEI (Optional),SKU,Date of Activation (Optional),Customer Name,Customer Address,Customer Address 2,City,State,ZIP,Email,Comments/ Notes,Auto Renew',\n      '8901240412341234123F,,usvtd-30day-GSMT-0MB-750Minutes Unl SMS,,Test Customer,123 Main Street,Unit A,Seattle,WA,98101,test@example.com,Sample activation,Yes',\n      '8901240412341234124F,123456789012345,usvtd-unlimited-GSMT-5GB-UnlMinutes UnlSMS,2024-01-15,John Smith,456 Oak Avenue,,Spokane,WA,99201,john.smith@example.com,Premium plan,No',\n      '8901240412341234125F,,usvtd-basic-GSMT-1GB-500Minutes 1000SMS,,Jane Doe,789 Pine Street,Apt 2B,Tacoma,WA,98402,jane.doe@example.com,,Yes'\n    ].join('\\n');\n\n    const blob = new Blob([template], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'nexitel_bulk_activation_template.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Zap className=\"w-8 h-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Nexitel Bulk Activation</h1>\n                <p className=\"text-sm text-gray-500\">Upload CSV file for batch SIM activations</p>\n              </div>\n            </div>\n            <Button onClick={handleBackNavigation} variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Upload Section */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"w-5 h-5 mr-2\" />\n                  Upload CSV File\n                </CardTitle>\n                <CardDescription>\n                  Select Nexitel carrier and upload a CSV file with activation details\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Carrier Selection */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Nexitel Carrier *\n                  </label>\n                  <Select value={selectedCarrier} onValueChange={setSelectedCarrier}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Nexitel carrier\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"nexitel_blue\">Nexitel Blue</SelectItem>\n                      <SelectItem value=\"nexitel_purple\">Nexitel Purple</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* File Upload */}\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    CSV File *\n                  </label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        type=\"file\"\n                        accept=\".csv\"\n                        onChange={handleFileUpload}\n                        ref={fileInputRef}\n                        className=\"file:mr-4 file:py-2 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={downloadTemplate}\n                      >\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        Template\n                      </Button>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      Supported format: CSV files with headers matching the required columns below\n                    </div>\n                  </div>\n                </div>\n\n                {uploadedFile && (\n                  <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-4 h-4 text-green-500 mr-2\" />\n                      <span className=\"text-sm text-green-700\">\n                        File: {uploadedFile.name} ({Math.round(uploadedFile.size / 1024)} KB)\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={processBulkActivation}\n                  disabled={!uploadedFile || !selectedCarrier || isProcessing}\n                  className=\"w-full\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Processing...\n                    </>\n                  ) : (\n                    <>\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Start Bulk Activation\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* CSV Format Guide */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  CSV Format Requirements\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div>\n                    <strong>Required Columns:</strong>\n                    <ul className=\"list-disc list-inside ml-4 text-gray-600\">\n                      <li>ICCID - SIM card ICCID number</li>\n                      <li>SKU - Service plan SKU identifier</li>\n                      <li>Customer Name - Customer full name</li>\n                      <li>Customer Address - Customer full address</li>\n                      <li>Email - Customer email address</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <strong>Optional Columns:</strong>\n                    <ul className=\"list-disc list-inside ml-4 text-gray-600\">\n                      <li>IMEI (Optional) - Device IMEI number</li>\n                      <li>Date of Activation (Optional) - Activation date (YYYY-MM-DD)</li>\n                      <li>Customer Address 2 - Secondary address line</li>\n                      <li>City - Customer city</li>\n                      <li>State - Customer state</li>\n                      <li>ZIP - Customer ZIP code</li>\n                      <li>Comments/ Notes - Additional notes</li>\n                      <li>Auto Renew - Auto renewal preference</li>\n                    </ul>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n                    <div className=\"flex items-start space-x-2\">\n                      <AlertCircle className=\"w-4 h-4 text-blue-500 mt-0.5\" />\n                      <div className=\"text-xs text-blue-700\">\n                        <strong>Note:</strong> Your CSV file should match the format exactly as shown in the template. \n                        The system will automatically map columns based on header names (case-insensitive).\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results Section */}\n          <div>\n            {isProcessing && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Processing Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Progress value={progress} className=\"w-full\" />\n                    <div className=\"flex justify-between text-sm text-gray-600\">\n                      <span>Processing row {currentRow} of {totalRows}</span>\n                      <span>{Math.round(progress)}%</span>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-green-600\">{processingStats.successful}</div>\n                        <div className=\"text-sm text-gray-500\">Successful</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-red-600\">{processingStats.failed}</div>\n                        <div className=\"text-sm text-gray-500\">Failed</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-blue-600\">{processingStats.total}</div>\n                        <div className=\"text-sm text-gray-500\">Total</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {results.length > 0 && !isProcessing && (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <CardTitle>Activation Results</CardTitle>\n                    <Button onClick={downloadResults} variant=\"outline\" size=\"sm\">\n                      <Download className=\"w-4 h-4 mr-1\" />\n                      Export Results\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    <div className=\"space-y-2\">\n                      {results.map((result, index) => (\n                        <div\n                          key={index}\n                          className={`p-3 rounded-md border ${\n                            result.status === 'success'\n                              ? 'bg-green-50 border-green-200'\n                              : 'bg-red-50 border-red-200'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              {result.status === 'success' ? (\n                                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                              ) : (\n                                <X className=\"w-4 h-4 text-red-500\" />\n                              )}\n                              <span className=\"font-medium\">\n                                Row {result.row}: {result.customer_name}\n                              </span>\n                            </div>\n                            <Badge\n                              variant={result.status === 'success' ? 'default' : 'destructive'}\n                            >\n                              {result.status}\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-gray-600 mt-1\">\n                            ICCID: {result.iccid} | SKU: {result.sku}\n                          </div>\n                          <div className=\"text-sm text-gray-600 mt-1\">\n                            {result.city && result.state ? `${result.city}, ${result.state}` : 'Address'} | {result.email}\n                          </div>\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            {result.message}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21019},"client/src/pages/NexitelPortStatus.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Search, Phone, Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nconst SAMPLE_PORT_REQUESTS = [\n  {\n    id: \"PORT-2025-001\",\n    phoneNumber: \"+1 (555) 123-4567\",\n    fromCarrier: \"Verizon\",\n    toNetwork: \"Nexitel Purple\",\n    status: \"Completed\",\n    submittedDate: \"2025-01-10\",\n    completedDate: \"2025-01-12\",\n    estimatedCompletion: \"2025-01-12\",\n    customerName: \"John Doe\"\n  },\n  {\n    id: \"PORT-2025-002\",\n    phoneNumber: \"+1 (555) 987-6543\",\n    fromCarrier: \"T-Mobile\",\n    toNetwork: \"Nexitel Blue\",\n    status: \"In Progress\",\n    submittedDate: \"2025-01-11\",\n    completedDate: null,\n    estimatedCompletion: \"2025-01-13\",\n    customerName: \"Jane Smith\"\n  },\n  {\n    id: \"PORT-2025-003\",\n    phoneNumber: \"+1 (555) 456-7890\",\n    fromCarrier: \"AT&T\",\n    toNetwork: \"Nexitel Purple\",\n    status: \"Pending Validation\",\n    submittedDate: \"2025-01-12\",\n    completedDate: null,\n    estimatedCompletion: \"2025-01-14\",\n    customerName: \"Mike Johnson\"\n  },\n  {\n    id: \"PORT-2025-004\",\n    phoneNumber: \"+1 (555) 321-0987\",\n    fromCarrier: \"Sprint\", \n    toNetwork: \"Nexitel Blue\",\n    status: \"Failed\",\n    submittedDate: \"2025-01-09\",\n    completedDate: null,\n    estimatedCompletion: \"2025-01-11\",\n    customerName: \"Sarah Wilson\"\n  }\n];\n\nexport default function NexitelPortStatus() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n  \n  const filteredRequests = SAMPLE_PORT_REQUESTS.filter(request =>\n    request.phoneNumber.includes(searchTerm) ||\n    request.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    request.customerName.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"Completed\": return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"In Progress\": return <Clock className=\"w-5 h-5 text-blue-600\" />;\n      case \"Pending Validation\": return <AlertCircle className=\"w-5 h-5 text-yellow-600\" />;\n      case \"Failed\": return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default: return <Clock className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Completed\": return \"bg-green-100 text-green-800\";\n      case \"In Progress\": return \"bg-blue-100 text-blue-800\";\n      case \"Pending Validation\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Failed\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-teal-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Phone className=\"w-8 h-8 text-green-600 mr-3\" />\n            Nexitel Port-In Status\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Track your number porting requests</p>\n        </div>\n\n        {/* Status Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRequests.filter(r => r.status === \"Completed\").length}</p>\n                  <p className=\"text-gray-600\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"w-8 h-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRequests.filter(r => r.status === \"In Progress\").length}</p>\n                  <p className=\"text-gray-600\">In Progress</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <AlertCircle className=\"w-8 h-8 text-yellow-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRequests.filter(r => r.status === \"Pending Validation\").length}</p>\n                  <p className=\"text-gray-600\">Pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <XCircle className=\"w-8 h-8 text-red-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRequests.filter(r => r.status === \"Failed\").length}</p>\n                  <p className=\"text-gray-600\">Failed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"pt-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search by phone number, request ID, or customer name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Port Requests List */}\n        <div className=\"space-y-4\">\n          {filteredRequests.map((request) => (\n            <Card key={request.id} className=\"bg-white shadow-lg\">\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {/* Request Info */}\n                  <div>\n                    <div className=\"flex items-center mb-2\">\n                      {getStatusIcon(request.status)}\n                      <span className=\"ml-2 font-semibold\">{request.id}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">{request.customerName}</p>\n                    <p className=\"text-sm text-gray-600\">{request.phoneNumber}</p>\n                  </div>\n\n                  {/* Carrier Info */}\n                  <div>\n                    <p className=\"text-sm text-gray-500 mb-1\">From → To</p>\n                    <p className=\"font-medium\">{request.fromCarrier}</p>\n                    <p className=\"text-sm\">↓</p>\n                    <Badge className={request.toNetwork === \"Nexitel Purple\" ? \"bg-purple-100 text-purple-800\" : \"bg-blue-100 text-blue-800\"}>\n                      {request.toNetwork}\n                    </Badge>\n                  </div>\n\n                  {/* Status and Dates */}\n                  <div>\n                    <Badge className={getStatusColor(request.status)}>\n                      {request.status}\n                    </Badge>\n                    <div className=\"mt-2 text-sm text-gray-600\">\n                      <p>Submitted: {request.submittedDate}</p>\n                      <p>Expected: {request.estimatedCompletion}</p>\n                      {request.completedDate && (\n                        <p className=\"text-green-600\">Completed: {request.completedDate}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex flex-col gap-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Details\n                    </Button>\n                    {request.status === \"Failed\" && (\n                      <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                        Retry Request\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                {/* Progress Timeline */}\n                {request.status !== \"Failed\" && (\n                  <div className=\"mt-6 pt-4 border-t\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className={`w-3 h-3 rounded-full ${request.status === \"Completed\" || request.status === \"In Progress\" || request.status === \"Pending Validation\" ? \"bg-green-600\" : \"bg-gray-300\"}`}></div>\n                        <div className={`h-0.5 w-16 ${request.status === \"Completed\" || request.status === \"In Progress\" ? \"bg-green-600\" : \"bg-gray-300\"}`}></div>\n                        <div className={`w-3 h-3 rounded-full ${request.status === \"Completed\" || request.status === \"In Progress\" ? \"bg-green-600\" : \"bg-gray-300\"}`}></div>\n                        <div className={`h-0.5 w-16 ${request.status === \"Completed\" ? \"bg-green-600\" : \"bg-gray-300\"}`}></div>\n                        <div className={`w-3 h-3 rounded-full ${request.status === \"Completed\" ? \"bg-green-600\" : \"bg-gray-300\"}`}></div>\n                      </div>\n                      <div className=\"flex text-xs text-gray-500 space-x-12\">\n                        <span>Submitted</span>\n                        <span>Validating</span>\n                        <span>Complete</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredRequests.length === 0 && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <Phone className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No port-in requests found matching your search.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10878},"client/src/pages/NexitelRecharge.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Smartphone, ArrowLeft, CreditCard, Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Plan } from \"@shared/schema\";\n\nconst nexitelRechargeSchema = z.object({\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  carrier: z.enum([\"nexitel-purple\", \"nexitel-blue\"], { required_error: \"Carrier is required\" }),\n  amount: z.number().min(5, \"Minimum recharge amount is $5\").max(500, \"Maximum recharge amount is $500\"),\n});\n\ntype NexitelRechargeRequest = z.infer<typeof nexitelRechargeSchema>;\n\n// We'll fetch recharge plans from the database instead of using preset amounts\n\nconst NEXITEL_CARRIERS = [\n  { value: \"nexitel-purple\", label: \"Nexitel Purple\", color: \"bg-purple-100 text-purple-800\" },\n  { value: \"nexitel-blue\", label: \"Nexitel Blue\", color: \"bg-blue-100 text-blue-800\" },\n];\n\nexport default function NexitelRecharge() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedAmount, setSelectedAmount] = useState<number>(0);\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n\n  // Fetch Nexitel Recharge plans with commission pricing from database\n  const { data: allPlans = [], isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: user?.role === \"retailer\" ? [\"/api/retailer/plans\"] : [\"/api/plans\"],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 2\n  });\n\n  const getBackUrl = () => {\n    if (user?.role === \"retailer\") {\n      return \"/retailer/dashboard\";\n    }\n    return \"/\";\n  };\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<NexitelRechargeRequest>({\n    resolver: zodResolver(nexitelRechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      carrier: undefined,\n      amount: 0,\n    },\n  });\n\n  const rechargeMutation = useMutation({\n    mutationFn: async (data: NexitelRechargeRequest) => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      \n      const serviceFee = (data.amount * 0.1).toFixed(2); // 10 service fee\n      \n      return apiRequest(\"/api/recharge/process\", {\n        method: \"POST\",\n        body: {\n          userId: user.id,\n          phoneNumber: data.phoneNumber,\n          country: \"us\", // Nexitel is US-based\n          carrier: data.carrier,\n          planPrice: data.amount.toString(),\n          serviceFee: serviceFee,\n          planId: null // Can be linked to specific Nexitel plans later\n        }\n      });\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Recharge Successful!\",\n        description: `Commission earned: $${result.commission}. New balance: $${result.newBalance}`,\n        variant: \"default\",\n      });\n      \n      // Reset form\n      form.reset();\n      \n      // Refresh balance data\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/transactions/user/${user?.id}`] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter for Nexitel Recharge plans based on selected carrier\n  const selectedCarrierValue = form.watch('carrier');\n  const nexitelRechargePlans = allPlans.filter(plan => \n    plan.serviceType === \"nexitel_recharge\" && \n    plan.carrier === selectedCarrierValue\n  );\n\n  const onSubmit = (data: NexitelRechargeRequest) => {\n    rechargeMutation.mutate(data);\n  };\n\n  const selectedCarrier = NEXITEL_CARRIERS.find(c => c.value === form.watch(\"carrier\"));\n\n  // Add error boundary check\n  if (plansLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-20\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading Nexitel Recharge...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : user?.role === \"admin\" ? \"Back to Dashboard\" : user?.role === \"employee\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Smartphone className=\"w-8 h-8 text-purple-600 mr-3\" />\n            Nexitel Recharge\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Top up your Nexitel phone instantly</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recharge Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"w-5 h-5 text-purple-600 mr-2\" />\n                  Recharge Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Phone Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Carrier Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nexitel Network</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select your Nexitel network...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {NEXITEL_CARRIERS.map((carrier) => (\n                                <SelectItem key={carrier.value} value={carrier.value}>\n                                  {carrier.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Plan Selection */}\n                    <div>\n                      <FormLabel className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                        Select Recharge Plan\n                      </FormLabel>\n                      \n                      {plansLoading ? (\n                        <div className=\"text-center py-4\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600 mx-auto\"></div>\n                          <p className=\"text-sm text-gray-500 mt-2\">Loading plans...</p>\n                        </div>\n                      ) : !form.watch('carrier') ? (\n                        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n                          <Zap className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-gray-500\">Please select a Nexitel network first</p>\n                          <p className=\"text-sm text-gray-400\">Choose Purple or Blue network to see available plans</p>\n                        </div>\n                      ) : nexitelRechargePlans.length > 0 ? (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mb-4\">\n                          {nexitelRechargePlans.map((plan) => (\n                            <Button\n                              key={plan.id}\n                              type=\"button\"\n                              variant={selectedPlan?.id === plan.id ? \"default\" : \"outline\"}\n                              className={`h-auto p-4 flex flex-col items-start ${\n                                selectedPlan?.id === plan.id \n                                  ? \"bg-purple-600 hover:bg-purple-700 text-white\" \n                                  : \"hover:bg-purple-50\"\n                              }`}\n                              onClick={() => {\n                                setSelectedPlan(plan);\n                                \n                                // Calculate the correct price based on promotional pricing\n                                let planPrice;\n                                if (plan.isPromotional && plan.originalPrice && plan.discountPercentage) {\n                                  // Use promotional price for promotional plans (both admin and retailer)\n                                  const originalPrice = parseFloat(plan.originalPrice);\n                                  const discount = parseFloat(plan.discountPercentage) / 100;\n                                  planPrice = originalPrice * (1 - discount);\n                                } else if (user?.role === \"retailer\") {\n                                  // Use retailer price or fall back to our cost for non-promotional plans\n                                  planPrice = parseFloat(plan.retailerPrice || plan.ourCost);\n                                } else {\n                                  // Admin sees our cost for non-promotional plans\n                                  planPrice = parseFloat(plan.ourCost);\n                                }\n                                \n                                setSelectedAmount(planPrice);\n                                form.setValue(\"amount\", planPrice);\n                                form.setValue(\"carrier\", plan.carrier as \"nexitel-purple\" | \"nexitel-blue\");\n                              }}\n                            >\n                              <div className=\"flex justify-between items-start w-full\">\n                                <div className=\"text-left\">\n                                  <div className=\"font-semibold\">{plan.name.replace(/-\\$\\d+/, '').replace(/\\$\\d+/, '').trim()}</div>\n                                  <div className=\"text-sm opacity-75\">\n                                    {plan.durationMonths && plan.durationMonths > 1 ? `${plan.durationMonths} month plan` : '1 month plan'}\n                                  </div>\n                                  {plan.isPromotional && plan.promotionalLabel && (\n                                    <div className=\"text-xs text-green-600 font-medium mt-1\">🎉 {plan.promotionalLabel}</div>\n                                  )}\n                                  {plan.description && (\n                                    <div className=\"text-xs opacity-60 mt-1\">{plan.description}</div>\n                                  )}\n                                </div>\n                                <div className=\"text-right\">\n                                  <div className=\"flex flex-col items-end\">\n                                    {plan.isPromotional && plan.originalPrice && (\n                                      <div className=\"text-xs text-gray-500 line-through\">\n                                        ${parseFloat(plan.originalPrice).toFixed(2)}\n                                      </div>\n                                    )}\n                                    <div className=\"font-bold\">\n                                      ${(() => {\n                                        if (plan.isPromotional && plan.originalPrice && plan.discountPercentage) {\n                                          // Show promotional price for promotional plans (both admin and retailer)\n                                          const originalPrice = parseFloat(plan.originalPrice);\n                                          const discount = parseFloat(plan.discountPercentage) / 100;\n                                          return (originalPrice * (1 - discount)).toFixed(2);\n                                        } else if (user?.role === \"retailer\") {\n                                          // Use retailer price or fall back to our cost for non-promotional plans\n                                          return (plan.retailerPrice ? parseFloat(plan.retailerPrice).toFixed(2) : parseFloat(plan.ourCost).toFixed(2));\n                                        } else {\n                                          // Admin sees our cost for non-promotional plans\n                                          return parseFloat(plan.ourCost).toFixed(2);\n                                        }\n                                      })()}\n                                    </div>\n                                  </div>\n                                  <Badge \n                                    variant=\"secondary\" \n                                    className={`text-xs mt-1 ${\n                                      plan.carrier === \"nexitel-purple\" \n                                        ? \"bg-purple-100 text-purple-800\" \n                                        : \"bg-blue-100 text-blue-800\"\n                                    }`}\n                                  >\n                                    {plan.carrier === \"nexitel-purple\" ? \"Purple\" : \"Blue\"}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </Button>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n                          <Zap className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-gray-500\">No recharge plans available</p>\n                          <p className=\"text-sm text-gray-400\">Please contact admin to add recharge plans</p>\n                        </div>\n                      )}\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Recharge Amount</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"Amount will be set by selected plan...\"\n                                value={selectedAmount || field.value || ''}\n                                disabled={true}\n                                className=\"text-lg bg-gray-50\"\n                              />\n                            </FormControl>\n                            <p className=\"text-xs text-gray-500 mt-1\">Amount is determined by the selected plan</p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-purple-600 hover:bg-purple-700 text-lg py-6\"\n                      disabled={rechargeMutation.isPending}\n                    >\n                      <CreditCard className=\"w-5 h-5 mr-2\" />\n                      {rechargeMutation.isPending ? \"Processing...\" : form.watch(\"amount\") > 0 ? `Recharge $${form.watch(\"amount\")}` : \"Enter Amount to Recharge\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg mb-6\">\n              <CardHeader>\n                <CardTitle>Recharge Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Phone Number:</span>\n                    <span className=\"font-medium\">\n                      {form.watch(\"phoneNumber\") || \"Not entered\"}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Network:</span>\n                    <div>\n                      {selectedCarrier ? (\n                        <Badge className={selectedCarrier.color}>\n                          {selectedCarrier.label}\n                        </Badge>\n                      ) : (\n                        <span className=\"text-gray-400\">Not selected</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Amount:</span>\n                    <span className=\"text-2xl font-bold text-purple-600\">\n                      ${form.watch(\"amount\")}\n                    </span>\n                  </div>\n                  \n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between items-center text-lg font-semibold\">\n                      <span>Total:</span>\n                      <span className=\"text-purple-600\">${form.watch(\"amount\")}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Features */}\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle>Why Choose Nexitel?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Instant Top-up</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">24/7 Availability</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Secure Payments</span>\n                  </div>\n                  <div className=\"flex items-center text-green-600\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">No Hidden Fees</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20620},"client/src/pages/NexitelRechargeReport.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Search, CreditCard, Calendar, Phone, DollarSign } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nconst SAMPLE_RECHARGES = [\n  {\n    id: \"RCH-2025-001\",\n    phoneNumber: \"+1 (555) 123-4567\",\n    network: \"Nexitel Purple\",\n    amount: 50,\n    status: \"Completed\",\n    rechargeDate: \"2025-01-12 14:30\",\n    transactionId: \"TXN-123456789\"\n  },\n  {\n    id: \"RCH-2025-002\",\n    phoneNumber: \"+1 (555) 987-6543\",\n    network: \"Nexitel Blue\", \n    amount: 25,\n    status: \"Pending\",\n    rechargeDate: \"2025-01-12 15:45\",\n    transactionId: \"TXN-123456790\"\n  },\n  {\n    id: \"RCH-2025-003\",\n    phoneNumber: \"+1 (555) 456-7890\",\n    network: \"Nexitel Purple\",\n    amount: 100,\n    status: \"Failed\",\n    rechargeDate: \"2025-01-12 10:15\",\n    transactionId: \"TXN-123456791\"\n  },\n  {\n    id: \"RCH-2025-004\",\n    phoneNumber: \"+1 (555) 321-0987\",\n    network: \"Nexitel Blue\",\n    amount: 75,\n    status: \"Completed\",\n    rechargeDate: \"2025-01-11 16:20\",\n    transactionId: \"TXN-123456792\"\n  }\n];\n\nexport default function NexitelRechargeReport() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n  \n  const filteredRecharges = SAMPLE_RECHARGES.filter(recharge =>\n    recharge.phoneNumber.includes(searchTerm) ||\n    recharge.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    recharge.transactionId.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Completed\": return \"bg-green-100 text-green-800\";\n      case \"Pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Failed\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const totalAmount = filteredRecharges\n    .filter(r => r.status === \"Completed\")\n    .reduce((sum, r) => sum + r.amount, 0);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <CreditCard className=\"w-8 h-8 text-purple-600 mr-3\" />\n            Nexitel Recharge Report\n          </h1>\n          <p className=\"text-gray-600 mt-2\">View and manage recharge transactions</p>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"w-8 h-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">${totalAmount}</p>\n                  <p className=\"text-gray-600\">Total Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"w-8 h-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRecharges.length}</p>\n                  <p className=\"text-gray-600\">Total Transactions</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRecharges.filter(r => r.status === \"Completed\").length}</p>\n                  <p className=\"text-gray-600\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-yellow-600 rounded-full\"></div>\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{filteredRecharges.filter(r => r.status === \"Pending\").length}</p>\n                  <p className=\"text-gray-600\">Pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by phone number, recharge ID, or transaction ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Filter by Date\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recharges List */}\n        <div className=\"space-y-4\">\n          {filteredRecharges.map((recharge) => (\n            <Card key={recharge.id} className=\"bg-white shadow-lg\">\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center\">\n                  <div>\n                    <p className=\"font-semibold text-gray-900\">{recharge.id}</p>\n                    <p className=\"text-sm text-gray-500\">{recharge.rechargeDate}</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"font-medium flex items-center\">\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      {recharge.phoneNumber}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">{recharge.transactionId}</p>\n                  </div>\n                  \n                  <div>\n                    <Badge className={recharge.network === \"Nexitel Purple\" ? \"bg-purple-100 text-purple-800\" : \"bg-blue-100 text-blue-800\"}>\n                      {recharge.network}\n                    </Badge>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-lg font-bold text-green-600\">${recharge.amount}</p>\n                    <p className=\"text-xs text-gray-500\">Amount</p>\n                  </div>\n                  \n                  <div>\n                    <Badge className={getStatusColor(recharge.status)}>\n                      {recharge.status}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredRecharges.length === 0 && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <CreditCard className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No recharge records found matching your search.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8631},"client/src/pages/NexitelRechargeSimple.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Smartphone } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nexport default function NexitelRechargeSimple() {\n  const { user } = useAuth();\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Smartphone className=\"w-8 h-8 text-purple-600 mr-3\" />\n            Nexitel Recharge (Simple)\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Top up your Nexitel phone instantly</p>\n        </div>\n\n        <Card className=\"bg-white shadow-lg\">\n          <CardHeader>\n            <CardTitle>Recharge Service</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-12\">\n              <div className=\"text-6xl mb-4\">📱</div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Nexitel Recharge Available</h3>\n              <p className=\"text-gray-600 mb-4\">\n                This simplified page confirms the component can load properly.\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                User: {user?.username} ({user?.role})\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":2121},"client/src/pages/NexitelRechargeTest.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function NexitelRechargeTest() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Nexitel Recharge Test\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Testing component render</p>\n        </div>\n\n        <Card className=\"bg-white shadow-lg\">\n          <CardHeader>\n            <CardTitle>Test Component</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>If you see this, the component is rendering correctly.</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":1052},"client/src/pages/NexitelSimSwap.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, RefreshCw, Phone, CreditCard, AlertTriangle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nconst simSwapSchema = z.object({\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  currentIccid: z.string().min(19, \"Current ICCID must be at least 19 digits\").max(22, \"Current ICCID must be at most 22 digits\"),\n  newIccid: z.string().min(19, \"New ICCID must be at least 19 digits\").max(22, \"New ICCID must be at most 22 digits\"),\n  network: z.enum([\"nexitel-purple\", \"nexitel-blue\"], { required_error: \"Network is required\" }),\n  reason: z.enum([\"damaged\", \"lost\", \"stolen\", \"upgrade\"], { required_error: \"Reason is required\" }),\n});\n\ntype SimSwapRequest = z.infer<typeof simSwapSchema>;\n\nconst NEXITEL_NETWORKS = [\n  { value: \"nexitel-purple\", label: \"Nexitel Purple\", color: \"bg-purple-100 text-purple-800\" },\n  { value: \"nexitel-blue\", label: \"Nexitel Blue\", color: \"bg-blue-100 text-blue-800\" },\n];\n\nconst SWAP_REASONS = [\n  { value: \"damaged\", label: \"SIM Card Damaged\" },\n  { value: \"lost\", label: \"SIM Card Lost\" },\n  { value: \"stolen\", label: \"SIM Card Stolen\" },\n  { value: \"upgrade\", label: \"Upgrade to eSIM\" },\n];\n\nexport default function NexitelSimSwap() {\n  const { user } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<SimSwapRequest>({\n    resolver: zodResolver(simSwapSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      currentIccid: \"\",\n      newIccid: \"\",\n      network: undefined,\n      reason: undefined,\n    },\n  });\n\n  const onSubmit = async (data: SimSwapRequest) => {\n    setIsSubmitting(true);\n    console.log(\"SIM Swap Request:\", data);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setIsSubmitting(false);\n    // Handle success/error states here\n  };\n\n  const selectedNetwork = NEXITEL_NETWORKS.find(n => n.value === form.watch(\"network\"));\n  const selectedReason = SWAP_REASONS.find(r => r.value === form.watch(\"reason\"));\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Home\"}\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <RefreshCw className=\"w-8 h-8 text-orange-600 mr-3\" />\n            Nexitel SIM Swap\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Replace your SIM card and transfer your service</p>\n        </div>\n\n        {/* Warning Alert */}\n        <Card className=\"mb-8 border-orange-200 bg-orange-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start\">\n              <AlertTriangle className=\"w-6 h-6 text-orange-600 mr-3 mt-0.5\" />\n              <div>\n                <h3 className=\"font-semibold text-orange-800 mb-2\">Important Notice</h3>\n                <p className=\"text-orange-700 text-sm\">\n                  SIM swap will temporarily interrupt your service. Please ensure you have access to your new SIM card before proceeding. \n                  The process typically takes 5-10 minutes to complete.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* SIM Swap Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Phone className=\"w-5 h-5 text-orange-600 mr-2\" />\n                  SIM Swap Request\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Phone Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Network Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"network\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nexitel Network</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select your network...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {NEXITEL_NETWORKS.map((network) => (\n                                <SelectItem key={network.value} value={network.value}>\n                                  {network.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Current ICCID */}\n                    <FormField\n                      control={form.control}\n                      name=\"currentIccid\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Current SIM ICCID</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"89014103211118510720\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* New ICCID */}\n                    <FormField\n                      control={form.control}\n                      name=\"newIccid\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>New SIM ICCID</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"89014103211118510721\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Reason for Swap */}\n                    <FormField\n                      control={form.control}\n                      name=\"reason\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Reason for SIM Swap</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select reason...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {SWAP_REASONS.map((reason) => (\n                                <SelectItem key={reason.value} value={reason.value}>\n                                  {reason.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-orange-600 hover:bg-orange-700 text-lg py-6\"\n                      disabled={isSubmitting}\n                    >\n                      {isSubmitting ? (\n                        <>\n                          <RefreshCw className=\"w-5 h-5 mr-2 animate-spin\" />\n                          Processing Swap...\n                        </>\n                      ) : (\n                        <>\n                          <RefreshCw className=\"w-5 h-5 mr-2\" />\n                          Request SIM Swap\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Summary Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg mb-6\">\n              <CardHeader>\n                <CardTitle>Swap Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Phone:</span>\n                    <span className=\"font-medium\">\n                      {form.watch(\"phoneNumber\") || \"Not entered\"}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Network:</span>\n                    <div>\n                      {selectedNetwork ? (\n                        <Badge className={selectedNetwork.color}>\n                          {selectedNetwork.label}\n                        </Badge>\n                      ) : (\n                        <span className=\"text-gray-400\">Not selected</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Reason:</span>\n                    <span className=\"font-medium\">\n                      {selectedReason?.label || \"Not selected\"}\n                    </span>\n                  </div>\n                  \n                  <div className=\"border-t pt-4\">\n                    <div className=\"text-sm text-gray-600\">\n                      <p className=\"font-semibold mb-2\">Process Time:</p>\n                      <p>5-10 minutes</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Instructions */}\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle>Instructions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-start\">\n                    <div className=\"w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center mr-3 mt-0.5\">\n                      <span className=\"text-orange-600 font-bold text-xs\">1</span>\n                    </div>\n                    <p>Have your new SIM card ready</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center mr-3 mt-0.5\">\n                      <span className=\"text-orange-600 font-bold text-xs\">2</span>\n                    </div>\n                    <p>Submit the swap request</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center mr-3 mt-0.5\">\n                      <span className=\"text-orange-600 font-bold text-xs\">3</span>\n                    </div>\n                    <p>Insert new SIM when notified</p>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center mr-3 mt-0.5\">\n                      <span className=\"text-orange-600 font-bold text-xs\">4</span>\n                    </div>\n                    <p>Restart your device</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13661},"client/src/pages/NexitelWifiCalling.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Wifi, Upload, FileText, CheckCircle, AlertCircle, Phone, Search, MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEmployeeVerification } from \"@/hooks/useEmployeeVerification\";\nimport { EmployeeVerificationDialog } from \"@/components/EmployeeVerificationDialog\";\n\ninterface WifiCallingRequest {\n  iccid: string;\n  customerName: string;\n  phoneNumber: string;\n  emergencyAddress: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n  };\n}\n\nexport default function NexitelWifiCalling() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"single\");\n  \n  // Single activation form\n  const [singleForm, setSingleForm] = useState<WifiCallingRequest>({\n    iccid: \"\",\n    customerName: \"\",\n    phoneNumber: \"\",\n    emergencyAddress: {\n      street: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\"\n    }\n  });\n\n  // Address lookup functionality\n  const [lookupValue, setLookupValue] = useState(\"\");\n  const [useExistingAddress, setUseExistingAddress] = useState(false);\n  const [foundCustomer, setFoundCustomer] = useState<any>(null);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // Bulk activation\n  const [csvFile, setCsvFile] = useState<File | null>(null);\n  const [bulkResults, setBulkResults] = useState<any[]>([]);\n\n  // Employee verification hooks for different operations\n  const singleActivationVerification = useEmployeeVerification({\n    operationType: \"wifi_calling_activation\",\n    operationDetails: \"Single WiFi Calling activation\"\n  });\n\n  const bulkActivationVerification = useEmployeeVerification({\n    operationType: \"bulk_wifi_calling_activation\",\n    operationDetails: \"Bulk WiFi Calling activations via CSV\"\n  });\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else {\n      window.location.href = \"/admin\";\n    }\n  };\n\n  // Search for existing customer by ICCID or Mobile Number\n  const searchCustomer = async () => {\n    if (!lookupValue.trim()) {\n      toast({\n        title: \"Search Required\",\n        description: \"Please enter an ICCID or mobile number to search\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Try searching by ICCID first\n      let searchUrl = `/api/activities/search/iccid/${lookupValue}`;\n      let response = await apiRequest(searchUrl);\n      \n      // If no results by ICCID, try by mobile number\n      if (!response || response.length === 0) {\n        searchUrl = `/api/activities/search/mobile/${lookupValue}`;\n        response = await apiRequest(searchUrl);\n      }\n\n      if (response && response.length > 0) {\n        const customerRecord = response[0]; // Get most recent record\n        setFoundCustomer(customerRecord);\n        \n        // Pre-fill the form with found customer data\n        setSingleForm({\n          iccid: customerRecord.iccid || lookupValue,\n          customerName: customerRecord.customerName || \"\",\n          phoneNumber: customerRecord.mobileNumber || customerRecord.phoneNumber || lookupValue,\n          emergencyAddress: {\n            street: customerRecord.customerAddress?.split(',')[0]?.trim() || \"\",\n            city: customerRecord.city || customerRecord.customerAddress?.split(',')[1]?.trim() || \"\",\n            state: customerRecord.state || customerRecord.customerAddress?.split(',')[2]?.trim()?.split(' ')[0] || \"\",\n            zipCode: customerRecord.zip || customerRecord.customerAddress?.split(',')[2]?.trim()?.split(' ')[1] || \"\"\n          }\n        });\n\n        toast({\n          title: \"Customer Found\",\n          description: `Found existing customer: ${customerRecord.customerName}`,\n        });\n      } else {\n        setFoundCustomer(null);\n        toast({\n          title: \"No Customer Found\",\n          description: \"No existing customer found with this ICCID or mobile number. Please enter details manually.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      toast({\n        title: \"Search Error\",\n        description: \"Failed to search for customer. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Single WiFi Calling activation\n  const singleActivationMutation = useMutation({\n    mutationFn: async (data: WifiCallingRequest) => {\n      return await apiRequest(\"/api/nexitel/wifi-calling/enable\", {\n        method: \"POST\",\n        body: data\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"WiFi Calling Enabled\",\n        description: \"WiFi Calling has been successfully enabled for this number\",\n      });\n      // Reset form\n      setSingleForm({\n        iccid: \"\",\n        customerName: \"\",\n        phoneNumber: \"\",\n        emergencyAddress: { street: \"\", city: \"\", state: \"\", zipCode: \"\" }\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Activation Failed\",\n        description: error.message || \"Failed to enable WiFi Calling\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk WiFi Calling activation\n  const bulkActivationMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"csvFile\", file);\n      \n      const response = await fetch(\"/api/nexitel/wifi-calling/bulk-enable\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (results) => {\n      setBulkResults(results);\n      toast({\n        title: \"Bulk Activation Complete\",\n        description: `Processed ${results.length} WiFi Calling enable requests`,\n      });\n      setCsvFile(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Bulk Activation Failed\",\n        description: error.message || \"Failed to process bulk WiFi Calling activation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSingleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Use employee verification for single activation\n    singleActivationVerification.requireEmployeeVerification(() => {\n      singleActivationMutation.mutate(singleForm);\n    });\n  };\n\n  const handleBulkSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!csvFile) return;\n    \n    // Use employee verification for bulk activation\n    bulkActivationVerification.requireEmployeeVerification(() => {\n      bulkActivationMutation.mutate(csvFile);\n    });\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setCsvFile(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            {user?.role === \"retailer\" ? \"Back to Dashboard\" : \"Back to Admin\"}\n          </Button>\n          <div className=\"flex items-center mb-2\">\n            <Wifi className=\"w-8 h-8 text-blue-600 mr-3\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Nexitel WiFi Calling Enable</h1>\n          </div>\n          <p className=\"text-gray-600\">Enable WiFi Calling service for Nexitel customers</p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"single\" className=\"flex items-center gap-2\">\n              <Phone className=\"w-4 h-4\" />\n              Single Activation\n            </TabsTrigger>\n            <TabsTrigger value=\"bulk\" className=\"flex items-center gap-2\">\n              <Upload className=\"w-4 h-4\" />\n              Bulk Activation\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Single WiFi Calling Enable */}\n          <TabsContent value=\"single\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Wifi className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  Enable WiFi Calling - Single Customer\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {/* Customer Lookup Section */}\n                <div className=\"mb-8 p-4 bg-gray-50 rounded-lg border\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Search className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Search Existing Customer (Optional)\n                  </h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Search by ICCID or mobile number to auto-fill customer information and address from previous activation\n                  </p>\n                  \n                  <div className=\"flex gap-4\">\n                    <div className=\"flex-1\">\n                      <Input\n                        placeholder=\"Enter ICCID or mobile number to search\"\n                        value={lookupValue}\n                        onChange={(e) => setLookupValue(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            e.preventDefault();\n                            searchCustomer();\n                          }\n                        }}\n                      />\n                    </div>\n                    <Button \n                      type=\"button\" \n                      onClick={searchCustomer}\n                      disabled={isSearching}\n                      variant=\"outline\"\n                    >\n                      {isSearching ? (\n                        <>Searching...</>\n                      ) : (\n                        <>\n                          <Search className=\"w-4 h-4 mr-2\" />\n                          Search\n                        </>\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Found Customer Display */}\n                  {foundCustomer && (\n                    <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                        <span className=\"font-medium text-green-800\">Customer Found!</span>\n                      </div>\n                      <div className=\"mt-2 text-sm text-green-700\">\n                        <p><strong>Name:</strong> {foundCustomer.customerName}</p>\n                        <p><strong>ICCID:</strong> {foundCustomer.iccid}</p>\n                        <p><strong>Address:</strong> {foundCustomer.customerAddress || `${foundCustomer.city}, ${foundCustomer.state} ${foundCustomer.zip}`}</p>\n                        <p className=\"text-xs mt-2 text-green-600\">\n                          Form has been auto-filled with existing customer information\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <form onSubmit={handleSingleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"iccid\">ICCID Number *</Label>\n                      <Input\n                        id=\"iccid\"\n                        placeholder=\"Enter ICCID (e.g., 8901260123456789012)\"\n                        value={singleForm.iccid}\n                        onChange={(e) => setSingleForm({...singleForm, iccid: e.target.value})}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"customerName\">Customer Name *</Label>\n                      <Input\n                        id=\"customerName\"\n                        placeholder=\"Enter customer full name\"\n                        value={singleForm.customerName}\n                        onChange={(e) => setSingleForm({...singleForm, customerName: e.target.value})}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phoneNumber\">Phone Number *</Label>\n                    <Input\n                      id=\"phoneNumber\"\n                      placeholder=\"Enter phone number (e.g., 5551234567)\"\n                      value={singleForm.phoneNumber}\n                      onChange={(e) => setSingleForm({...singleForm, phoneNumber: e.target.value})}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label className=\"text-base font-semibold\">Emergency Address (Required for WiFi Calling) *</Label>\n                      {foundCustomer && (\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"useNewAddress\"\n                            checked={!useExistingAddress}\n                            onCheckedChange={(checked) => {\n                              setUseExistingAddress(!checked);\n                              if (checked && foundCustomer) {\n                                // Clear address fields to enter new address\n                                setSingleForm({\n                                  ...singleForm,\n                                  emergencyAddress: {\n                                    street: \"\",\n                                    city: \"\",\n                                    state: \"\",\n                                    zipCode: \"\"\n                                  }\n                                });\n                              }\n                            }}\n                          />\n                          <Label htmlFor=\"useNewAddress\" className=\"text-sm\">\n                            Use different emergency address\n                          </Label>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"street\">Street Address</Label>\n                        <Input\n                          id=\"street\"\n                          placeholder=\"123 Main Street\"\n                          value={singleForm.emergencyAddress.street}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            emergencyAddress: {...singleForm.emergencyAddress, street: e.target.value}\n                          })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"city\">City</Label>\n                        <Input\n                          id=\"city\"\n                          placeholder=\"New York\"\n                          value={singleForm.emergencyAddress.city}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            emergencyAddress: {...singleForm.emergencyAddress, city: e.target.value}\n                          })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"state\">State</Label>\n                        <Input\n                          id=\"state\"\n                          placeholder=\"NY\"\n                          value={singleForm.emergencyAddress.state}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            emergencyAddress: {...singleForm.emergencyAddress, state: e.target.value}\n                          })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                        <Input\n                          id=\"zipCode\"\n                          placeholder=\"10001\"\n                          value={singleForm.emergencyAddress.zipCode}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            emergencyAddress: {...singleForm.emergencyAddress, zipCode: e.target.value}\n                          })}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    disabled={singleActivationMutation.isPending}\n                  >\n                    {singleActivationMutation.isPending ? (\n                      <>Enabling WiFi Calling...</>\n                    ) : (\n                      <>Enable WiFi Calling</>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Bulk WiFi Calling Enable */}\n          <TabsContent value=\"bulk\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Upload className=\"w-5 h-5 mr-2 text-green-600\" />\n                    Bulk WiFi Calling Enable - CSV Upload\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleBulkSubmit} className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label>CSV File Format Requirements</Label>\n                        <div className=\"text-sm text-gray-600 space-y-1\">\n                          <p>• CSV must contain headers: ICCID, CustomerName, PhoneNumber, Street, City, State, ZipCode</p>\n                          <p>• All fields are required for each row</p>\n                          <p>• Emergency address is mandatory for WiFi Calling activation</p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"csvFile\">Upload CSV File *</Label>\n                        <Input\n                          id=\"csvFile\"\n                          type=\"file\"\n                          accept=\".csv\"\n                          onChange={handleFileChange}\n                          required\n                        />\n                        {csvFile && (\n                          <p className=\"text-sm text-green-600\">\n                            Selected: {csvFile.name} ({Math.round(csvFile.size / 1024)} KB)\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-green-600 hover:bg-green-700\"\n                      disabled={bulkActivationMutation.isPending || !csvFile}\n                    >\n                      {bulkActivationMutation.isPending ? (\n                        <>Processing Bulk WiFi Calling...</>\n                      ) : (\n                        <>Process Bulk WiFi Calling Enable</>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n\n              {/* Bulk Results */}\n              {bulkResults.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <FileText className=\"w-5 h-5 mr-2 text-blue-600\" />\n                      Bulk Activation Results\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {bulkResults.map((result, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            {result.success ? (\n                              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                            ) : (\n                              <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                            )}\n                            <div>\n                              <p className=\"font-medium\">{result.customerName}</p>\n                              <p className=\"text-sm text-gray-600\">ICCID: {result.iccid}</p>\n                            </div>\n                          </div>\n                          <Badge variant={result.success ? \"default\" : \"destructive\"}>\n                            {result.success ? \"Enabled\" : \"Failed\"}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Employee Verification Dialogs */}\n        <EmployeeVerificationDialog\n          isOpen={singleActivationVerification.isVerificationOpen}\n          onClose={singleActivationVerification.handleVerificationCancel}\n          onVerified={singleActivationVerification.handleVerificationSuccess}\n          operationType={singleActivationVerification.operationType}\n          operationDetails={singleActivationVerification.operationDetails}\n        />\n        \n        <EmployeeVerificationDialog\n          isOpen={bulkActivationVerification.isVerificationOpen}\n          onClose={bulkActivationVerification.handleVerificationCancel}\n          onVerified={bulkActivationVerification.handleVerificationSuccess}\n          operationType={bulkActivationVerification.operationType}\n          operationDetails={bulkActivationVerification.operationDetails}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":23479},"client/src/pages/VoipActivation.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Phone, Users, Mail, Download, FileText, Zap, AlertCircle } from \"lucide-react\";\nimport { voipActivationSchema, type VoipActivationRequest, type VoipPlan } from \"@shared/schema\";\n\nexport default function VoipActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<VoipPlan | null>(null);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  // Fetch VoIP plans\n  const { data: voipPlans = [], isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/voip/plans\"],\n  });\n  \n  // Ensure voipPlans is always an array\n  const safeVoipPlans = Array.isArray(voipPlans) ? voipPlans : [];\n\n  // Fetch recent activations\n  const { data: recentActivations = [] } = useQuery({\n    queryKey: [\"/api/voip/activations\", user?.id],\n    enabled: !!user?.id,\n  });\n  \n  // Ensure recentActivations is always an array\n  const safeRecentActivations = Array.isArray(recentActivations) ? recentActivations : [];\n\n  const form = useForm<VoipActivationRequest>({\n    resolver: zodResolver(voipActivationSchema),\n    defaultValues: {\n      planId: 0,\n      customerEmail: \"\",\n      customerName: \"\",\n      customerPhone: \"\",\n      notes: \"\",\n      employeeId: \"\",\n    },\n  });\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: VoipActivationRequest) => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      \n      return apiRequest(\"/api/voip/activate\", {\n        method: \"POST\",\n        body: {\n          ...data,\n          userId: user.id,\n        }\n      });\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"VoIP Activation Successful!\",\n        description: `VoIP number ${result.voipNumber} activated for ${result.customerName}. Setup email sent automatically.`,\n        variant: \"default\",\n      });\n      \n      form.reset();\n      setSelectedPlan(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/voip/activations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Activation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportMutation = useMutation({\n    mutationFn: async (format: 'csv' | 'excel') => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      \n      const response = await fetch(`/api/voip/export/${format}?userId=${user.id}`);\n      if (!response.ok) throw new Error(\"Export failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `voip-activations-${new Date().toISOString().split('T')[0]}.${format === 'csv' ? 'csv' : 'xlsx'}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: (_, format) => {\n      toast({\n        title: \"Export Successful\",\n        description: `VoIP activations exported as ${format.toUpperCase()} file.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Export Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: VoipActivationRequest) => {\n    activationMutation.mutate(data);\n  };\n\n  const handlePlanChange = (planId: string) => {\n    const plan = safeVoipPlans.find((p: VoipPlan) => p.id === parseInt(planId));\n    setSelectedPlan(plan || null);\n    form.setValue(\"planId\", parseInt(planId));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <Phone className=\"w-8 h-8 text-blue-600 mr-3\" />\n                VoIP Activation\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Activate VoIP phone numbers with automatic setup instructions</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => exportMutation.mutate('csv')}\n                disabled={exportMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export CSV\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => exportMutation.mutate('excel')}\n                disabled={exportMutation.isPending}\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Export Excel\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Activation Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"w-5 h-5 text-blue-600 mr-2\" />\n                  VoIP Number Activation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Plan Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"planId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>VoIP Plan</FormLabel>\n                          <Select onValueChange={handlePlanChange}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a VoIP plan\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {plansLoading ? (\n                                <SelectItem value=\"loading\" disabled>Loading plans...</SelectItem>\n                              ) : (\n                                safeVoipPlans.map((plan: VoipPlan) => (\n                                  <SelectItem key={plan.id} value={plan.id.toString()}>\n                                    {plan.name} - ${plan.monthlyPrice}/month\n                                  </SelectItem>\n                                ))\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Customer Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter customer name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"customer@example.com\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Customer Phone (Optional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Customer contact number\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notes (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Additional notes or instructions\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                      disabled={activationMutation.isPending}\n                    >\n                      {activationMutation.isPending ? \"Activating...\" : \"Activate VoIP Number\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Plan Details & Recent Activations */}\n          <div className=\"space-y-6\">\n            {/* Selected Plan Details */}\n            {selectedPlan && (\n              <Card className=\"bg-white shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Plan Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h3 className=\"font-semibold text-lg text-blue-600\">{selectedPlan.name}</h3>\n                      <p className=\"text-2xl font-bold text-green-600\">${selectedPlan.monthlyPrice}/month</p>\n                    </div>\n                    {selectedPlan.description && (\n                      <p className=\"text-gray-600\">{selectedPlan.description}</p>\n                    )}\n                    {selectedPlan.features && selectedPlan.features.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium text-sm text-gray-700 mb-2\">Features:</h4>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {selectedPlan.features.map((feature, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {feature}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Users className=\"w-4 h-4 mr-1\" />\n                      Max Users: {selectedPlan.maxUsers}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Activations */}\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Activations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {safeRecentActivations && safeRecentActivations.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {safeRecentActivations.slice(0, 5).map((activation: any) => (\n                      <div key={activation.id} className=\"border-l-4 border-blue-500 pl-3 py-2\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-medium text-sm\">{activation.customerName}</p>\n                            <p className=\"text-xs text-gray-500\">{activation.voipNumber}</p>\n                            <p className=\"text-xs text-gray-500\">{activation.customerEmail}</p>\n                          </div>\n                          <Badge variant={activation.status === 'active' ? 'default' : 'secondary'}>\n                            {activation.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500 text-sm\">No recent activations</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15716},"client/src/pages/VoipBulkActivation.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Users, Upload, FileText, Download, AlertCircle, CheckCircle, X } from \"lucide-react\";\nimport { type VoipPlan } from \"@shared/schema\";\n\nexport default function VoipBulkActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n  const [selectedPlan, setSelectedPlan] = useState<VoipPlan | null>(null);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  // Fetch VoIP plans\n  const { data: voipPlans = [], isLoading: plansLoading } = useQuery({\n    queryKey: [\"/api/voip/plans\"],\n  });\n  \n  // Ensure voipPlans is always an array\n  const safeVoipPlans = Array.isArray(voipPlans) ? voipPlans : [];\n\n  // Fetch recent bulk activations\n  const { data: recentActivations = [] } = useQuery({\n    queryKey: [\"/api/voip/bulk-activations\", user?.id],\n    enabled: !!user?.id,\n  });\n  \n  // Ensure recentActivations is always an array\n  const safeRecentActivations = Array.isArray(recentActivations) ? recentActivations : [];\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"text/csv\" && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a CSV file only.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setUploadedFile(file);\n      setResults([]);\n    }\n  };\n\n  const processVoipBulkActivation = async () => {\n    if (!uploadedFile || !selectedPlan) {\n      toast({\n        title: \"Missing Requirements\",\n        description: \"Please select a VoIP plan and upload a CSV file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      // Read and parse CSV file\n      const text = await uploadedFile.text();\n      const lines = text.split('\\n').filter(line => line.trim());\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      // Validate CSV format\n      const requiredHeaders = ['customer_name', 'customer_email', 'customer_phone'];\n      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\n      \n      if (missingHeaders.length > 0) {\n        toast({\n          title: \"Invalid CSV Format\",\n          description: `Missing required columns: ${missingHeaders.join(', ')}`,\n          variant: \"destructive\",\n        });\n        setIsProcessing(false);\n        return;\n      }\n\n      // Process each row\n      const activationResults = [];\n      for (let i = 1; i < lines.length; i++) {\n        const values = lines[i].split(',').map(v => v.trim());\n        const row: any = {};\n        headers.forEach((header, index) => {\n          row[header] = values[index];\n        });\n\n        // Generate VoIP number and activation code\n        const voipNumber = `+1-${Math.floor(Math.random() * 900 + 100)}-${Math.floor(Math.random() * 900 + 100)}-${Math.floor(Math.random() * 9000 + 1000)}`;\n        const activationCode = Math.random().toString(36).substr(2, 8).toUpperCase();\n        \n        // Simulate VoIP activation process\n        const success = Math.random() > 0.05; // 95% success rate for demo\n        activationResults.push({\n          row: i,\n          customerName: row.customer_name,\n          customerEmail: row.customer_email,\n          customerPhone: row.customer_phone,\n          voipNumber,\n          activationCode,\n          planName: selectedPlan.name,\n          status: success ? 'active' : 'failed',\n          message: success ? 'VoIP activated successfully' : 'Activation failed - please retry'\n        });\n\n        // Add small delay for demo\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      setResults(activationResults);\n      \n      // Send bulk activation to backend\n      await apiRequest(\"/api/voip/bulk-activate\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          userId: user?.id,\n          planId: selectedPlan.id,\n          activations: activationResults.filter(r => r.status === 'active'),\n          totalProcessed: activationResults.length\n        })\n      });\n\n      toast({\n        title: \"Bulk VoIP Activation Complete\",\n        description: `Processed ${activationResults.length} VoIP activations. Setup emails sent to customers.`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/voip/bulk-activations\"] });\n    } catch (error) {\n      toast({\n        title: \"Processing Error\",\n        description: \"Failed to process the CSV file\",\n        variant: \"destructive\",\n      });\n    }\n    setIsProcessing(false);\n  };\n\n  const downloadTemplate = () => {\n    const csvContent = \"customer_name,customer_email,customer_phone,notes\\n\" +\n      \"John Doe,john.doe@email.com,+1-555-0123,Priority customer\\n\" +\n      \"Jane Smith,jane.smith@email.com,+1-555-0124,Corporate account\\n\" +\n      \"Bob Johnson,bob.johnson@email.com,+1-555-0125,Standard activation\";\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'voip-bulk-activation-template.csv';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    toast({\n      title: \"Template Downloaded\",\n      description: \"CSV template downloaded successfully. Fill it out and upload to start bulk activation.\",\n    });\n  };\n\n  const exportResults = () => {\n    if (results.length === 0) return;\n    \n    const csvContent = \"customer_name,customer_email,customer_phone,voip_number,activation_code,plan_name,status,message\\n\" +\n      results.map(r => \n        `${r.customerName},${r.customerEmail},${r.customerPhone},${r.voipNumber},${r.activationCode},${r.planName},${r.status},${r.message}`\n      ).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `voip-bulk-results-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  const handlePlanChange = (planId: string) => {\n    const plan = safeVoipPlans.find((p: VoipPlan) => p.id === parseInt(planId));\n    setSelectedPlan(plan || null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-4 sm:p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" className=\"mb-4\" onClick={handleBackNavigation}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 flex items-center\">\n                <Users className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600 mr-3\" />\n                VoIP Bulk Activation\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Activate multiple VoIP numbers using CSV file upload</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Bulk Activation Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"w-5 h-5 text-purple-600 mr-2\" />\n                  Bulk VoIP Activation\n                </CardTitle>\n                <CardDescription>\n                  Upload a CSV file with customer information to activate multiple VoIP services at once\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Plan Selection */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Select VoIP Plan</label>\n                  <Select onValueChange={handlePlanChange} disabled={plansLoading}>\n                    <SelectTrigger>\n                      <SelectValue placeholder={plansLoading ? \"Loading plans...\" : \"Choose a VoIP plan\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {safeVoipPlans.map((plan: VoipPlan) => (\n                        <SelectItem key={plan.id} value={plan.id.toString()}>\n                          {plan.name} - ${plan.monthlyPrice}/month\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedPlan && (\n                    <div className=\"mt-2 p-3 bg-purple-50 rounded-lg\">\n                      <h4 className=\"font-medium text-purple-900\">{selectedPlan.name}</h4>\n                      <p className=\"text-sm text-purple-700\">{selectedPlan.description}</p>\n                      <p className=\"text-sm font-medium text-purple-900 mt-1\">\n                        ${selectedPlan.monthlyPrice}/month per activation\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                {/* CSV Upload Section */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-gray-700\">Upload Customer Data (CSV)</label>\n                    <Button variant=\"outline\" size=\"sm\" onClick={downloadTemplate}>\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download Template\n                    </Button>\n                  </div>\n                  \n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                    <div className=\"space-y-2\">\n                      {uploadedFile ? (\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <FileText className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"text-green-600 font-medium\">{uploadedFile.name}</span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setUploadedFile(null)}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ) : (\n                        <>\n                          <p className=\"text-gray-600\">Click to upload CSV file or drag and drop</p>\n                          <p className=\"text-xs text-gray-500\">CSV files only</p>\n                        </>\n                      )}\n                    </div>\n                    <Input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\".csv\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                    />\n                    {!uploadedFile && (\n                      <Button\n                        variant=\"outline\"\n                        className=\"mt-3\"\n                        onClick={() => fileInputRef.current?.click()}\n                      >\n                        Select CSV File\n                      </Button>\n                    )}\n                  </div>\n\n                  <div className=\"text-xs text-gray-500 space-y-1\">\n                    <p><strong>Required columns:</strong> customer_name, customer_email, customer_phone</p>\n                    <p><strong>Optional columns:</strong> notes</p>\n                  </div>\n                </div>\n\n                {/* Process Button */}\n                <Button\n                  onClick={processVoipBulkActivation}\n                  disabled={!uploadedFile || !selectedPlan || isProcessing}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                  size=\"lg\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Processing VoIP Activations...\n                    </>\n                  ) : (\n                    <>\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Process Bulk Activation\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            {results.length > 0 && (\n              <Card className=\"mt-6 bg-white shadow-lg\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                      Activation Results\n                    </CardTitle>\n                    <Button onClick={exportResults} variant=\"outline\" size=\"sm\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Results\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {results.map((result, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">{result.customerName}</p>\n                          <p className=\"text-xs text-gray-600\">{result.customerEmail}</p>\n                          {result.status === 'active' && (\n                            <p className=\"text-xs text-gray-600\">VoIP: {result.voipNumber}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={result.status === 'active' ? 'default' : 'destructive'}>\n                            {result.status}\n                          </Badge>\n                          <p className=\"text-xs text-gray-600 mt-1\">{result.message}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"mt-4 flex items-center justify-between text-sm text-gray-600\">\n                    <span>Total processed: {results.length}</span>\n                    <span>\n                      Success: {results.filter(r => r.status === 'active').length} | \n                      Failed: {results.filter(r => r.status === 'failed').length}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Recent Batches</span>\n                  <Badge variant=\"secondary\">{safeRecentActivations.length}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Available Plans</span>\n                  <Badge variant=\"secondary\">{safeVoipPlans.length}</Badge>\n                </div>\n                {results.length > 0 && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Last Batch</span>\n                    <Badge variant=\"outline\">{results.length} processed</Badge>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Activations */}\n            {safeRecentActivations.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Recent Batches</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {safeRecentActivations.slice(0, 3).map((batch: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                        <div>\n                          <p className=\"font-medium text-sm\">Batch #{batch.id}</p>\n                          <p className=\"text-xs text-gray-600\">{batch.quantity} activations</p>\n                        </div>\n                        <Badge variant=\"secondary\">{batch.status}</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Instructions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <AlertCircle className=\"w-5 h-5 text-blue-600 mr-2\" />\n                  Instructions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-gray-600\">\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">1</span>\n                    <span>Select a VoIP plan for all activations</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">2</span>\n                    <span>Download the CSV template and fill with customer data</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">3</span>\n                    <span>Upload the completed CSV file</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">4</span>\n                    <span>Click \"Process Bulk Activation\" to start</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"bg-blue-100 text-blue-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium\">5</span>\n                    <span>Export results and send VoIP details to customers</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20424},"client/src/pages/VoipMenu.tsx":{"content":"import { Phone, Users, ArrowRight, ChevronRight, Download, Smartphone } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function VoipMenu() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Phone className=\"w-8 h-8 text-orange-600 mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">VoIP Services</h1>\n                <p className=\"text-sm text-gray-500\">Business phone system management</p>\n              </div>\n            </div>\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\">\n                Back to Dashboard\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {/* Nexiphone App Downloads */}\n          <Card className=\"border-blue-200 hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-blue-700\">\n                <Download className=\"w-6 h-6 mr-2\" />\n                Nexiphone Apps\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                Download the Nexiphone mobile apps for iOS and Android to manage VoIP services on the go.\n              </p>\n              <div className=\"space-y-3\">\n                <a \n                  href=\"https://apps.apple.com/app/nexiphone\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center justify-between p-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\"\n                >\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-white rounded-md flex items-center justify-center mr-3\">\n                      <Smartphone className=\"w-5 h-5 text-black\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium\">Download on the</div>\n                      <div className=\"text-lg font-bold\">App Store</div>\n                    </div>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5\" />\n                </a>\n                \n                <a \n                  href=\"https://play.google.com/store/apps/details?id=com.nexitel.nexiphone\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center justify-between p-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                >\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-white rounded-md flex items-center justify-center mr-3\">\n                      <Smartphone className=\"w-5 h-5 text-green-600\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium\">Get it on</div>\n                      <div className=\"text-lg font-bold\">Google Play</div>\n                    </div>\n                  </div>\n                  <ChevronRight className=\"w-5 h-5\" />\n                </a>\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">App Features:</h4>\n                <div className=\"space-y-1 text-sm text-blue-800\">\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2\" />\n                    Make & receive calls\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2\" />\n                    Manage VoIP numbers\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2\" />\n                    Check call history\n                  </div>\n                  <div className=\"flex items-center\">\n                    <ChevronRight className=\"w-3 h-3 mr-2\" />\n                    Account management\n                  </div>\n                </div>\n              </div>\n              \n              <Link href=\"/nexiphone-apps\">\n                <Button className=\"w-full mt-3 bg-blue-600 hover:bg-blue-700\">\n                  View More Details\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* VoIP Activation */}\n          <Card className=\"border-orange-200 hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-orange-700\">\n                <Phone className=\"w-6 h-6 mr-2\" />\n                VoIP Activation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                Set up individual VoIP phone services for customers with automatic email notifications and setup instructions.\n              </p>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                  Choose from available VoIP plans\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                  Generate phone numbers automatically\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                  Send setup instructions via email\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-orange-500\" />\n                  Commission-based earnings\n                </div>\n              </div>\n              <Link href=\"/voip-activation\">\n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700 mt-4\">\n                  Start VoIP Activation\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Bulk VoIP Activation */}\n          <Card className=\"border-amber-200 hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center text-amber-700\">\n                <Users className=\"w-6 h-6 mr-2\" />\n                Bulk VoIP Activation\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                Process multiple VoIP activations at once with CSV export capabilities and bulk email notifications.\n              </p>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                  Activate multiple lines simultaneously\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                  Export activation data to CSV\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                  Bulk email notifications\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <ChevronRight className=\"w-4 h-4 mr-2 text-amber-500\" />\n                  Streamlined workflow\n                </div>\n              </div>\n              <Link href=\"/voip-bulk-activation\">\n                <Button className=\"w-full bg-amber-600 hover:bg-amber-700 mt-4\">\n                  Start Bulk Activation\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"mt-8 grid md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Active VoIP Lines</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">247</p>\n                </div>\n                <Phone className=\"w-8 h-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">This Month</p>\n                  <p className=\"text-2xl font-bold text-amber-600\">89</p>\n                </div>\n                <Users className=\"w-8 h-8 text-amber-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">$2,847</p>\n                </div>\n                <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n                </svg>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10614},"client/src/pages/WalletFunding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { addFundsSchema, type AddFundsRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Wallet, CreditCard, DollarSign, AlertTriangle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || \"\");\n\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useEmployeeVerification } from \"@/hooks/useEmployeeVerification\";\nimport { EmployeeVerificationDialog } from \"@/components/EmployeeVerificationDialog\";\n\ninterface WalletFundingProps {\n  userId?: number;\n  currentBalance?: string;\n  onBalanceUpdate?: () => void;\n}\n\nconst CheckoutForm = ({ userId, amount, paymentMethod, onSuccess }: {\n  userId: number;\n  amount: number;\n  paymentMethod: string;\n  onSuccess: () => void;\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create payment intent\n      const response = await apiRequest(`/api/wallet/create-payment-intent?userId=${userId}`, {\n        method: \"POST\",\n        body: { amount, paymentMethod }\n      });\n\n      const responseData = await response.json();\n      const { clientSecret, transactionId } = responseData;\n\n      // Confirm payment\n      const result = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement)!,\n        },\n      });\n\n      if (result.error) {\n        toast({\n          title: \"Payment Failed\",\n          description: result.error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        // Confirm payment on backend\n        await apiRequest(\"/api/wallet/confirm-payment\", {\n          method: \"POST\",\n          body: {\n            transactionId,\n            paymentIntentId: result.paymentIntent.id,\n          }\n        });\n\n        toast({\n          title: \"Payment Successful\",\n          description: `$${amount.toFixed(2)} has been added to your wallet`,\n        });\n\n        onSuccess();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"Failed to process payment\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"p-4 border rounded-lg\">\n        <CardElement\n          options={{\n            style: {\n              base: {\n                fontSize: \"16px\",\n                color: \"#424770\",\n                \"::placeholder\": {\n                  color: \"#aab7c4\",\n                },\n              },\n            },\n          }}\n        />\n      </div>\n      \n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing} \n        className=\"w-full\"\n      >\n        {isProcessing ? \"Processing...\" : `Add $${amount.toFixed(2)} to Wallet`}\n      </Button>\n    </form>\n  );\n};\n\nexport default function WalletFunding({ userId: propUserId, currentBalance: propCurrentBalance, onBalanceUpdate }: WalletFundingProps) {\n  const { user } = useAuth();\n  const userId = propUserId || user?.id;\n  const currentBalance = propCurrentBalance || user?.balance || \"0.00\";\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n  const [fundingData, setFundingData] = useState<AddFundsRequest | null>(null);\n\n  // Employee verification hook\n  const employeeVerification = useEmployeeVerification({\n    operationType: \"fund_transfer\",\n    operationDetails: propUserId ? `Adding funds to retailer account (ID: ${propUserId})` : \"Adding funds to own wallet\"\n  });\n\n  const form = useForm<AddFundsRequest>({\n    resolver: zodResolver(addFundsSchema),\n    defaultValues: {\n      amount: 50,\n      paymentMethod: \"credit_card\",\n    },\n  });\n\n  // Fetch wallet permissions\n  const { data: permissions = { canAddFunds: false, maxDailyFunding: 0, maxMonthlyFunding: 0 }, isLoading: permissionsLoading } = useQuery({\n    queryKey: [`/api/wallet/permissions/${userId}`],\n    enabled: !!userId,\n  });\n\n  // Fetch payment transactions  \n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [`/api/wallet/transactions/${userId}`],\n    enabled: !!userId,\n  });\n  \n  // Ensure transactions is always an array\n  const safeTransactions = Array.isArray(transactions) ? transactions : [];\n  \n  // Ensure permissions has proper defaults and types\n  const safePermissions = {\n    canAddFunds: (permissions as any)?.canAddFunds ?? false,\n    maxDailyFunding: (permissions as any)?.maxDailyFunding ?? 0,\n    maxMonthlyFunding: (permissions as any)?.maxMonthlyFunding ?? 0\n  };\n\n  const onSubmit = (data: AddFundsRequest) => {\n    if (!safePermissions.canAddFunds) {\n      toast({\n        title: \"Access Denied\",\n        description: \"You do not have permission to add funds to your wallet\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Use employee verification if required (especially for employees managing retailer funds)\n    employeeVerification.requireEmployeeVerification(() => {\n      setFundingData(data);\n      setShowPaymentForm(true);\n    });\n  };\n\n  const handlePaymentSuccess = () => {\n    setShowPaymentForm(false);\n    setFundingData(null);\n    form.reset();\n    queryClient.invalidateQueries({ queryKey: [\"/api/wallet/transactions\", userId] });\n    if (onBalanceUpdate) {\n      onBalanceUpdate();\n    }\n  };\n\n  if (permissionsLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Wallet Funding\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div>Loading wallet permissions...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!safePermissions.canAddFunds) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Wallet Funding\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              You do not have permission to add funds to your wallet. Please contact your administrator.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Wallet Funding\n          </CardTitle>\n          <CardDescription>\n            Add funds to your wallet using your debit or credit card\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6 p-4 bg-muted rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Current Balance:</span>\n              <span className=\"text-lg font-bold text-green-600\">\n                ${parseFloat(currentBalance).toFixed(2)}\n              </span>\n            </div>\n          </div>\n\n          {safePermissions.maxDailyFunding && (\n            <div className=\"mb-4 text-sm text-muted-foreground\">\n              Daily funding limit: ${parseFloat(safePermissions.maxDailyFunding.toString()).toFixed(2)}\n            </div>\n          )}\n\n          {safePermissions.maxMonthlyFunding && (\n            <div className=\"mb-4 text-sm text-muted-foreground\">\n              Monthly funding limit: ${parseFloat(safePermissions.maxMonthlyFunding.toString()).toFixed(2)}\n            </div>\n          )}\n\n          {!showPaymentForm ? (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"5\" \n                          max=\"5000\" \n                          step=\"0.01\"\n                          placeholder=\"Enter amount\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Method</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select payment method\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                          <SelectItem value=\"debit_card\">Debit Card</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\">\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Continue to Payment\n                </Button>\n              </form>\n            </Form>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-muted rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span>Amount:</span>\n                  <span className=\"font-bold\">${fundingData?.amount.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span>Payment Method:</span>\n                  <span className=\"capitalize\">{fundingData?.paymentMethod.replace(\"_\", \" \")}</span>\n                </div>\n              </div>\n\n              <Elements stripe={stripePromise}>\n                <CheckoutForm\n                  userId={userId || 0}\n                  amount={fundingData?.amount || 0}\n                  paymentMethod={fundingData?.paymentMethod || \"credit_card\"}\n                  onSuccess={handlePaymentSuccess}\n                />\n              </Elements>\n\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowPaymentForm(false)}\n                className=\"w-full\"\n              >\n                Back\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Transaction History */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            Recent Transactions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {transactionsLoading ? (\n            <div>Loading transactions...</div>\n          ) : !safeTransactions || safeTransactions.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-4\">\n              No transactions found\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {safeTransactions.slice(0, 5).map((transaction: any) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex justify-between items-center p-3 bg-muted rounded-lg\"\n                >\n                  <div>\n                    <div className=\"font-medium\">${parseFloat(transaction.amount).toFixed(2)}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {transaction.description}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-sm font-medium ${\n                      transaction.status === \"completed\" ? \"text-green-600\" :\n                      transaction.status === \"failed\" ? \"text-red-600\" :\n                      \"text-yellow-600\"\n                    }`}>\n                      {transaction.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(transaction.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Employee Verification Dialog */}\n      <EmployeeVerificationDialog\n        isOpen={employeeVerification.isVerificationOpen}\n        onClose={employeeVerification.handleVerificationCancel}\n        onVerified={employeeVerification.handleVerificationSuccess}\n        operationType={employeeVerification.operationType}\n        operationDetails={employeeVerification.operationDetails}\n      />\n    </div>\n  );\n}","size_bytes":14396},"client/src/pages/WifiCallingActivation.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Wifi, Phone, Smartphone, CheckCircle, AlertCircle, Clock } from \"lucide-react\";\nimport { z } from \"zod\";\n\n// WiFi Calling activation schema\nconst wifiCallingActivationSchema = z.object({\n  customerName: z.string().min(1, \"Customer name is required\"),\n  customerEmail: z.string().email(\"Valid email is required\"),\n  customerPhone: z.string().min(1, \"Phone number is required\"),\n  deviceType: z.string().min(1, \"Device type is required\"),\n  carrierName: z.string().min(1, \"Carrier name is required\"),\n  planType: z.string().min(1, \"Plan type is required\"),\n  emergencyAddress: z.string().min(1, \"Emergency address is required\"),\n  emergencyCity: z.string().min(1, \"Emergency city is required\"),\n  emergencyState: z.string().min(1, \"Emergency state is required\"),\n  emergencyZip: z.string().min(1, \"Emergency ZIP code is required\"),\n  notes: z.string().optional(),\n});\n\ntype WifiCallingActivationRequest = z.infer<typeof wifiCallingActivationSchema>;\n\nexport default function WifiCallingActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  // Fetch recent WiFi calling activations\n  const { data: recentActivations = [] } = useQuery({\n    queryKey: [\"/api/wifi-calling/activations\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const form = useForm<WifiCallingActivationRequest>({\n    resolver: zodResolver(wifiCallingActivationSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      customerPhone: \"\",\n      deviceType: \"\",\n      carrierName: \"\",\n      planType: \"\",\n      emergencyAddress: \"\",\n      emergencyCity: \"\",\n      emergencyState: \"\",\n      emergencyZip: \"\",\n      notes: \"\",\n    },\n  });\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: WifiCallingActivationRequest) => {\n      if (!user?.id) throw new Error(\"User not authenticated\");\n      \n      return apiRequest(\"/api/wifi-calling/activate\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data,\n          userId: user.id,\n        })\n      });\n    },\n    onSuccess: (result: any) => {\n      toast({\n        title: \"WiFi Calling Activated!\",\n        description: `Setup instructions sent to customer. WiFi calling is now enabled.`,\n        variant: \"default\",\n      });\n      \n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/wifi-calling/activations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Activation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: WifiCallingActivationRequest) => {\n    setIsProcessing(true);\n    try {\n      await activationMutation.mutateAsync(data);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (!user || ![\"admin\", \"employee\", \"retailer\"].includes(user.role)) {\n    return <div>Access denied</div>;\n  }\n\n  const deviceTypes = [\n    \"iPhone (iOS 9+)\",\n    \"Samsung Galaxy\",\n    \"Google Pixel\",\n    \"OnePlus\",\n    \"Android (Generic)\",\n    \"Windows Phone\",\n    \"Other Smartphone\"\n  ];\n\n  const carriers = [\n    \"Nexitel Purple\",\n    \"Nexitel Blue\", \n    \"AT&T\",\n    \"Verizon\",\n    \"T-Mobile\",\n    \"Sprint\",\n    \"US Cellular\",\n    \"Other Carrier\"\n  ];\n\n  const planTypes = [\n    \"Unlimited Voice & Data\",\n    \"Voice + 5GB Data\",\n    \"Voice + 10GB Data\", \n    \"Voice Only Plan\",\n    \"Business Plan\",\n    \"Family Plan\",\n    \"Custom Plan\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                type=\"button\"\n                onClick={handleBackNavigation}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div className=\"flex items-center\">\n                <Wifi className=\"w-8 h-8 text-blue-600 mr-3\" />\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">WiFi Calling Activation</h1>\n                  <p className=\"text-sm text-gray-600\">Enable voice calls over WiFi networks</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">User: {user.username}</p>\n              <p className=\"text-xs text-gray-400 capitalize\">{user.role}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Activation Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Smartphone className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  WiFi Calling Setup\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Customer Information */}\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter full name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"customer@example.com\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"+1-555-0123\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"deviceType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Device Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select device type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {deviceTypes.map((device) => (\n                                  <SelectItem key={device} value={device}>\n                                    {device}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Service Information */}\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"carrierName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Carrier</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select carrier\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {carriers.map((carrier) => (\n                                  <SelectItem key={carrier} value={carrier}>\n                                    {carrier}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"planType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Plan Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select plan type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {planTypes.map((plan) => (\n                                  <SelectItem key={plan} value={plan}>\n                                    {plan}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Emergency Address */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">Emergency Address (Required for WiFi Calling)</h3>\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"emergencyAddress\"\n                          render={({ field }) => (\n                            <FormItem className=\"md:col-span-2\">\n                              <FormLabel>Street Address</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"123 Main Street\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"emergencyCity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"City name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"emergencyState\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>State</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"State\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"emergencyZip\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>ZIP Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"12345\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Notes */}\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Additional Notes</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Any special requirements or notes...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      disabled={isProcessing || activationMutation.isPending}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {isProcessing || activationMutation.isPending ? (\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Activating WiFi Calling...\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center\">\n                          <Wifi className=\"w-4 h-4 mr-2\" />\n                          Activate WiFi Calling\n                        </div>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Information Panel */}\n          <div className=\"space-y-6\">\n            {/* WiFi Calling Benefits */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">WiFi Calling Benefits</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">Better Indoor Coverage</p>\n                    <p className=\"text-sm text-gray-600\">Make calls in areas with poor cellular signal</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">International Calling</p>\n                    <p className=\"text-sm text-gray-600\">Avoid roaming charges when traveling</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">HD Voice Quality</p>\n                    <p className=\"text-sm text-gray-600\">Crystal clear call quality over broadband</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">Seamless Handoff</p>\n                    <p className=\"text-sm text-gray-600\">Smooth transition between WiFi and cellular</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Setup Requirements */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <AlertCircle className=\"w-5 h-5 mr-2 text-orange-600\" />\n                  Setup Requirements\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"p-3 bg-orange-50 rounded-lg\">\n                  <p className=\"font-medium text-orange-900\">Emergency Address</p>\n                  <p className=\"text-orange-700\">Required by law for 911 location services</p>\n                </div>\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"font-medium text-blue-900\">Compatible Device</p>\n                  <p className=\"text-blue-700\">Device must support WiFi calling feature</p>\n                </div>\n                <div className=\"p-3 bg-green-50 rounded-lg\">\n                  <p className=\"font-medium text-green-900\">Broadband Internet</p>\n                  <p className=\"text-green-700\">Stable WiFi connection recommended</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activations */}\n            {Array.isArray(recentActivations) && recentActivations.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Recent Activations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {recentActivations.slice(0, 3).map((activation: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                        <div>\n                          <p className=\"font-medium text-sm\">{activation.customerName}</p>\n                          <p className=\"text-xs text-gray-600\">{activation.deviceType}</p>\n                        </div>\n                        <Badge variant=\"secondary\">{activation.status}</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":20581},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5614},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/ATTActivation.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { attActivationSchema, type AttActivationRequest, type Plan, type User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertCircle, Smartphone, Globe, Wifi, Database, ArrowLeft, Upload, FileText, Users } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\n\nconst US_STATES = [\n  { value: \"AL\", label: \"Alabama\" }, { value: \"AK\", label: \"Alaska\" }, { value: \"AZ\", label: \"Arizona\" },\n  { value: \"AR\", label: \"Arkansas\" }, { value: \"CA\", label: \"California\" }, { value: \"CO\", label: \"Colorado\" },\n  { value: \"CT\", label: \"Connecticut\" }, { value: \"DE\", label: \"Delaware\" }, { value: \"FL\", label: \"Florida\" },\n  { value: \"GA\", label: \"Georgia\" }, { value: \"HI\", label: \"Hawaii\" }, { value: \"ID\", label: \"Idaho\" },\n  { value: \"IL\", label: \"Illinois\" }, { value: \"IN\", label: \"Indiana\" }, { value: \"IA\", label: \"Iowa\" },\n  { value: \"KS\", label: \"Kansas\" }, { value: \"KY\", label: \"Kentucky\" }, { value: \"LA\", label: \"Louisiana\" },\n  { value: \"ME\", label: \"Maine\" }, { value: \"MD\", label: \"Maryland\" }, { value: \"MA\", label: \"Massachusetts\" },\n  { value: \"MI\", label: \"Michigan\" }, { value: \"MN\", label: \"Minnesota\" }, { value: \"MS\", label: \"Mississippi\" },\n  { value: \"MO\", label: \"Missouri\" }, { value: \"MT\", label: \"Montana\" }, { value: \"NE\", label: \"Nebraska\" },\n  { value: \"NV\", label: \"Nevada\" }, { value: \"NH\", label: \"New Hampshire\" }, { value: \"NJ\", label: \"New Jersey\" },\n  { value: \"NM\", label: \"New Mexico\" }, { value: \"NY\", label: \"New York\" }, { value: \"NC\", label: \"North Carolina\" },\n  { value: \"ND\", label: \"North Dakota\" }, { value: \"OH\", label: \"Ohio\" }, { value: \"OK\", label: \"Oklahoma\" },\n  { value: \"OR\", label: \"Oregon\" }, { value: \"PA\", label: \"Pennsylvania\" }, { value: \"RI\", label: \"Rhode Island\" },\n  { value: \"SC\", label: \"South Carolina\" }, { value: \"SD\", label: \"South Dakota\" }, { value: \"TN\", label: \"Tennessee\" },\n  { value: \"TX\", label: \"Texas\" }, { value: \"UT\", label: \"Utah\" }, { value: \"VT\", label: \"Vermont\" },\n  { value: \"VA\", label: \"Virginia\" }, { value: \"WA\", label: \"Washington\" }, { value: \"WV\", label: \"West Virginia\" },\n  { value: \"WI\", label: \"Wisconsin\" }, { value: \"WY\", label: \"Wyoming\" }\n];\n\nconst INTERNATIONAL_COUNTRIES = [\n  { value: \"canada\", label: \"Canada (+$15/month)\", cost: 15 },\n  { value: \"mexico\", label: \"Mexico (+$10/month)\", cost: 10 },\n  { value: \"uk\", label: \"United Kingdom (+$20/month)\", cost: 20 },\n  { value: \"france\", label: \"France (+$20/month)\", cost: 20 },\n  { value: \"germany\", label: \"Germany (+$20/month)\", cost: 20 },\n  { value: \"japan\", label: \"Japan (+$25/month)\", cost: 25 },\n  { value: \"australia\", label: \"Australia (+$25/month)\", cost: 25 },\n];\n\nconst ROAMING_REGIONS = [\n  { value: \"north-america\", label: \"North America (+$10/month)\", cost: 10 },\n  { value: \"europe\", label: \"Europe (+$25/month)\", cost: 25 },\n  { value: \"asia\", label: \"Asia Pacific (+$30/month)\", cost: 30 },\n  { value: \"worldwide\", label: \"Worldwide (+$45/month)\", cost: 45 },\n];\n\nconst DATA_ADDONS = [\n  { value: \"1GB\", label: \"1GB (+$10)\", cost: 10 },\n  { value: \"3GB\", label: \"3GB (+$25)\", cost: 25 },\n  { value: \"5GB\", label: \"5GB (+$35)\", cost: 35 },\n  { value: \"10GB\", label: \"10GB (+$60)\", cost: 60 },\n];\n\nexport default function ATTActivation() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n  const [totalCost, setTotalCost] = useState(0);\n  const [activeTab, setActiveTab] = useState(\"individual\");\n  const [bulkFile, setBulkFile] = useState<File | null>(null);\n  const [bulkEmployeeId, setBulkEmployeeId] = useState(\"\");\n  const [bulkServiceType, setBulkServiceType] = useState(\"\");\n\n  // Fetch AT&T plans\n  const { data: plans = [], isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/plans\"],\n  });\n\n  const attPlans = plans.filter(plan => plan.serviceType === \"att\");\n\n  // Dynamic schema based on user role\n  const getDynamicSchema = () => {\n    if (user?.role === 'admin') {\n      return attActivationSchema.extend({\n        employeeId: z.string().min(1, \"Employee ID is required\"),\n      });\n    }\n    return attActivationSchema;\n  };\n\n  const form = useForm<AttActivationRequest>({\n    resolver: zodResolver(getDynamicSchema()),\n    defaultValues: {\n      customerFirstName: \"\",\n      customerLastName: \"\",\n      customerEmail: \"\",\n      customerAddress: \"\",\n      customerCity: \"\",\n      customerState: \"\",\n      customerZipCode: \"\",\n      iccid: \"\",\n      simType: \"physical\",\n      planId: 0,\n      hasInternational: false,\n      internationalCountries: [],\n      internationalCost: 0,\n      hasRoaming: false,\n      roamingRegions: [],\n      roamingCost: 0,\n      hasDataAddon: false,\n      dataAddonAmount: \"\",\n      dataAddonCost: 0,\n      isPortIn: false,\n      portInPhoneNumber: \"\",\n      portInCarrier: \"\",\n      portInAccountNumber: \"\",\n      portInPin: \"\",\n      portInZipCode: \"\",\n      hasWifiCalling: false,\n      wifiEmergencyAddress: \"\",\n      wifiEmergencyCity: \"\",\n      wifiEmergencyState: \"\",\n      wifiEmergencyZipCode: \"\",\n      employeeId: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Calculate total cost when form values change\n  const watchedValues = form.watch();\n  \n  const calculateTotalCost = () => {\n    let total = 0;\n    \n    if (selectedPlan) {\n      total += Number(selectedPlan.retailerPrice);\n    }\n    \n\n    \n    if (watchedValues.hasRoaming && watchedValues.roamingRegions) {\n      watchedValues.roamingRegions.forEach(regionCode => {\n        const region = ROAMING_REGIONS.find(r => r.value === regionCode);\n        if (region) total += region.cost;\n      });\n    }\n    \n    if (watchedValues.hasDataAddon && watchedValues.dataAddonAmount) {\n      const addon = DATA_ADDONS.find(a => a.value === watchedValues.dataAddonAmount);\n      if (addon) total += addon.cost;\n    }\n    \n    setTotalCost(total);\n  };\n\n  // Recalculate cost when relevant values change\n  React.useEffect(() => {\n    calculateTotalCost();\n  }, [\n    selectedPlan,\n\n    watchedValues.hasRoaming,\n    watchedValues.roamingRegions,\n    watchedValues.hasDataAddon,\n    watchedValues.dataAddonAmount\n  ]);\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: AttActivationRequest) => {\n      return apiRequest(\"/api/att/activation\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AT&T activation completed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/att/activations\"] });\n      form.reset();\n      setSelectedPlan(null);\n      setTotalCost(0);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkActivationMutation = useMutation({\n    mutationFn: async (data: { batchName: string; serviceType: string; employeeId: string }) => {\n      return apiRequest(\"/api/att/bulk-activation\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AT&T bulk activation initiated successfully\",\n      });\n      setBulkFile(null);\n      setBulkEmployeeId(\"\");\n      setBulkServiceType(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBulkSubmit = () => {\n    // Check required fields based on user role\n    if (!bulkFile || !bulkServiceType) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide file and service type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check employee ID only for admin users\n    if (user?.role === 'admin' && !bulkEmployeeId) {\n      toast({\n        title: \"Error\",\n        description: \"Employee ID is required for admin users\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    bulkActivationMutation.mutate({\n      batchName: bulkFile.name,\n      serviceType: bulkServiceType,\n      employeeId: user?.role === 'admin' ? bulkEmployeeId : '',\n    });\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setBulkFile(file);\n    }\n  };\n\n  const onSubmit = (data: AttActivationRequest) => {\n    activationMutation.mutate({\n      ...data,\n\n      roamingCost: watchedValues.hasRoaming ?\n        (watchedValues.roamingRegions || []).reduce((sum, regionCode) => {\n          const region = ROAMING_REGIONS.find(r => r.value === regionCode);\n          return sum + (region ? region.cost : 0);\n        }, 0) : 0,\n      dataAddonCost: watchedValues.hasDataAddon && watchedValues.dataAddonAmount ?\n        (DATA_ADDONS.find(a => a.value === watchedValues.dataAddonAmount)?.cost || 0) : 0,\n    });\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Link href={user?.role === 'retailer' ? '/retailer/dashboard' : '/admin'}>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 dark:text-gray-300\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"flex items-center gap-3 mb-8\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-red-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <Smartphone className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">AT&T Activation</h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">Activate your new AT&T wireless service</p>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"individual\" className=\"flex items-center gap-2\">\n              <Smartphone className=\"h-4 w-4\" />\n              Individual Activation\n            </TabsTrigger>\n            <TabsTrigger value=\"bulk\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Bulk Activation\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"individual\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Main Form - Left Side */}\n              <div className=\"lg:col-span-2 space-y-4\">\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Employee Verification - Only for admin users */}\n          {user?.role === 'admin' && (\n            <Card className=\"border-red-200\">\n              <CardHeader className=\"pb-1 pt-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <AlertCircle className=\"h-3 w-3 text-red-600\" />\n                  Employee Verification Required\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-1\">\n                <FormField\n                  control={form.control}\n                  name=\"employeeId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter your employee ID\" \n                          {...field} \n                          className=\"font-mono h-8\"\n                          size={20}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Customer Information */}\n          <Card>\n            <CardHeader className=\"pb-1 pt-2\">\n              <CardTitle className=\"flex items-center gap-1 text-sm\">\n                <Smartphone className=\"h-3 w-3\" />\n                Customer Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-1\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              <FormField\n                control={form.control}\n                name=\"customerFirstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">First Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerLastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">Last Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Doe\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">Email *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"john.doe@email.com\" type=\"email\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">Street Address *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"123 Main St\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerCity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">City *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"New York\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerState\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">State *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue placeholder=\"Select state...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {US_STATES.map((state) => (\n                          <SelectItem key={state.value} value={state.value}>\n                            {state.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerZipCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">ZIP Code *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"12345\" {...field} className=\"h-8\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* SIM Information */}\n          <Card>\n            <CardHeader className=\"pb-1 pt-2\">\n              <CardTitle className=\"flex items-center gap-1 text-sm\">\n                <Database className=\"h-3 w-3\" />\n                SIM Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-1\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              <FormField\n                control={form.control}\n                name=\"iccid\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">ICCID *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"89014103211118510720\" \n                        {...field}\n                        className=\"font-mono h-8\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"simType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">SIM Type *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue placeholder=\"Select SIM type...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"physical\">Physical SIM</SelectItem>\n                        <SelectItem value=\"esim\">eSIM</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Plan Selection */}\n          <Card>\n            <CardHeader className=\"pb-1 pt-2\">\n              <CardTitle className=\"flex items-center gap-1 text-sm\">\n                <Smartphone className=\"h-3 w-3\" />\n                Plan Selection\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-1\">\n              <FormField\n                control={form.control}\n                name=\"planId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs\">AT&T Plan *</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(Number(value));\n                        const plan = attPlans.find(p => p.id === Number(value));\n                        setSelectedPlan(plan || null);\n                      }} \n                      value={field.value?.toString() || \"\"}\n                    >\n                      <FormControl>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue placeholder=\"Select AT&T plan...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {attPlans.map((plan) => (\n                          <SelectItem key={plan.id} value={plan.id.toString()}>\n                            <div className=\"flex justify-between items-center w-full\">\n                              <span>{plan.name} - {plan.denomination}</span>\n                              <Badge variant=\"outline\">${plan.retailerPrice}</Badge>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedPlan && (\n                <div className=\"mt-2 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <h4 className=\"font-medium text-sm\">{selectedPlan.name}</h4>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">{selectedPlan.description}</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge>{selectedPlan.planType}</Badge>\n                    <Badge variant=\"outline\">${selectedPlan.retailerPrice}</Badge>\n                    {selectedPlan.durationMonths > 1 && (\n                      <Badge variant=\"secondary\">{selectedPlan.durationMonths} months</Badge>\n                    )}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 gap-6\">\n\n            {/* Roaming Options */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Wifi className=\"h-4 w-4\" />\n                  Roaming Options\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                <FormField\n                  control={form.control}\n                  name=\"hasRoaming\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"!mt-0 text-sm\">Enable Roaming</FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                {watchedValues.hasRoaming && (\n                  <div className=\"space-y-2\">\n                    <FormLabel className=\"text-sm\">Select Regions</FormLabel>\n                    {ROAMING_REGIONS.map((region) => (\n                      <FormField\n                        key={region.value}\n                        control={form.control}\n                        name=\"roamingRegions\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center space-x-2\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value?.includes(region.value) || false}\n                                onCheckedChange={(checked) => {\n                                  const currentRegions = field.value || [];\n                                  if (checked) {\n                                    field.onChange([...currentRegions, region.value]);\n                                  } else {\n                                    field.onChange(currentRegions.filter(r => r !== region.value));\n                                  }\n                                }}\n                              />\n                            </FormControl>\n                            <FormLabel className=\"!mt-0\">{region.label}</FormLabel>\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Data Add-ons */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  Data Add-ons\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"hasDataAddon\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"!mt-0\">Add Extra Data</FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                {watchedValues.hasDataAddon && (\n                  <FormField\n                    control={form.control}\n                    name=\"dataAddonAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data Amount</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select data amount...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {DATA_ADDONS.map((addon) => (\n                              <SelectItem key={addon.value} value={addon.value}>\n                                {addon.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </CardContent>\n            </Card>\n\n            {/* WiFi Calling */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wifi className=\"h-5 w-5\" />\n                  WiFi Calling\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"hasWifiCalling\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"!mt-0\">Enable WiFi Calling</FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                {watchedValues.hasWifiCalling && (\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"wifiEmergencyAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Emergency Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"123 Emergency St\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"wifiEmergencyCity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>City</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"City\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"wifiEmergencyState\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>State</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"State...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {US_STATES.map((state) => (\n                                  <SelectItem key={state.value} value={state.value}>\n                                    {state.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"wifiEmergencyZipCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ZIP Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"12345\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Port-in Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Port-in Information (Optional)</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"isPortIn\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormLabel className=\"!mt-0\">Port existing number</FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              {watchedValues.isPortIn && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"portInPhoneNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number to Port</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"portInCarrier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Current Carrier</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Verizon, T-Mobile, etc.\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"portInAccountNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Account Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Account number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"portInPin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Account PIN/Password</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"PIN or password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"portInZipCode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Billing ZIP Code</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"12345\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Additional Notes */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">Additional Notes</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm\">Notes (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Any additional notes or special instructions...\"\n                        className=\"min-h-[60px]\"\n                        rows={2}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end gap-3 pt-4\">\n                  <Link href=\"/admin/att-services\">\n                    <Button variant=\"outline\" type=\"button\">\n                      Cancel\n                    </Button>\n                  </Link>\n                  <Button \n                    type=\"submit\" \n                    disabled={activationMutation.isPending || totalCost === 0}\n                    className=\"min-w-[200px] bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700\"\n                  >\n                    {activationMutation.isPending ? (\n                      \"Processing...\"\n                    ) : (\n                      `Activate AT&T Service - $${totalCost.toFixed(2)}`\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </div>\n\n          {/* Plan Summary Card - Right Side */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-white dark:bg-gray-800 shadow-xl border-0 sticky top-6\">\n              <CardContent className=\"p-6\">\n                {selectedPlan ? (\n                  <div className=\"space-y-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-gray-900 dark:text-white mb-1\">\n                        ${selectedPlan.retailerPrice}\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        /month\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white mb-2\">\n                        {selectedPlan.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                        {selectedPlan.description}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300\">\n                          {selectedPlan.planType}\n                        </Badge>\n                        {selectedPlan.durationMonths > 1 && (\n                          <Badge variant=\"secondary\">\n                            {selectedPlan.durationMonths} months\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">What's Included</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          AT&T Network Access\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          5G Coverage\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          Customer Support\n                        </div>\n\n                        {watchedValues.hasRoaming && (\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            Roaming Access\n                          </div>\n                        )}\n                        {watchedValues.hasWifiCalling && (\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            WiFi Calling\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {selectedPlan && totalCost > parseFloat(selectedPlan.retailerPrice || '0') && (\n                      <div className=\"border-t pt-4 space-y-2\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">Additional Costs</h4>\n\n                        {watchedValues.hasRoaming && watchedValues.roamingRegions?.length && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">Roaming</span>\n                            <span className=\"text-gray-900 dark:text-white\">\n                              +${watchedValues.roamingRegions.reduce((sum, code) => {\n                                const region = ROAMING_REGIONS.find(r => r.value === code);\n                                return sum + (region ? region.cost : 0);\n                              }, 0)}/month\n                            </span>\n                          </div>\n                        )}\n                        {watchedValues.hasDataAddon && watchedValues.dataAddonAmount && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">Data Add-on</span>\n                            <span className=\"text-gray-900 dark:text-white\">\n                              +${DATA_ADDONS.find(a => a.value === watchedValues.dataAddonAmount)?.cost}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"border-t pt-2 flex justify-between font-medium\">\n                          <span className=\"text-gray-900 dark:text-white\">Total</span>\n                          <span className=\"text-gray-900 dark:text-white\">${totalCost.toFixed(2)}/month</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Smartphone className=\"h-12 w-12 text-gray-400 dark:text-gray-600 mx-auto mb-4\" />\n                    <h3 className=\"font-medium text-gray-900 dark:text-white mb-2\">Select a Plan</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Choose an AT&T plan to see pricing and details\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"bulk\">\n            <div className=\"max-w-4xl mx-auto\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Upload className=\"h-5 w-5\" />\n                    AT&T Bulk Activation\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Upload a CSV file to activate multiple AT&T services at once\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Employee Verification - Only for admin users */}\n                  {user?.role === 'admin' && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Employee ID *</label>\n                      <Input\n                        placeholder=\"Enter your employee ID\"\n                        value={bulkEmployeeId}\n                        onChange={(e) => setBulkEmployeeId(e.target.value)}\n                        className=\"font-mono\"\n                      />\n                    </div>\n                  )}\n\n                  {/* Service Type Selection */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Service Type *</label>\n                    <Select value={bulkServiceType} onValueChange={setBulkServiceType}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select service type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"prepaid\">AT&T Prepaid</SelectItem>\n                        <SelectItem value=\"postpaid\">AT&T Postpaid</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* File Upload */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">CSV File *</label>\n                    <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6\">\n                      <div className=\"text-center\">\n                        <FileText className=\"mx-auto h-12 w-12 text-gray-400\" />\n                        <div className=\"mt-4\">\n                          <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                            <span className=\"mt-2 block text-sm font-medium text-gray-900 dark:text-white\">\n                              {bulkFile ? bulkFile.name : \"Drop a CSV file here, or click to select\"}\n                            </span>\n                            <input\n                              id=\"file-upload\"\n                              name=\"file-upload\"\n                              type=\"file\"\n                              accept=\".csv\"\n                              className=\"sr-only\"\n                              onChange={handleFileChange}\n                            />\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Submit Button */}\n                  <Button\n                    onClick={handleBulkSubmit}\n                    disabled={!bulkFile || !bulkEmployeeId || !bulkServiceType || bulkActivationMutation.isPending}\n                    className=\"w-full\"\n                  >\n                    {bulkActivationMutation.isPending ? (\n                      <>Processing...</>\n                    ) : (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Start Bulk Activation\n                      </>\n                    )}\n                  </Button>\n\n                  {/* Instructions */}\n                  <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>CSV Format Requirements:</strong><br />\n                      Your CSV file should include columns: CustomerFirstName, CustomerLastName, CustomerEmail, ICCID, PlanID\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":47109},"client/src/pages/admin/ATTDataAddons.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Database, ArrowLeft, Smartphone, AlertCircle, Check } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type User } from \"@shared/schema\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\n// Data add-on options\nconst DATA_ADDONS = [\n  { value: \"1gb\", label: \"1GB Data\", cost: 10, description: \"1GB additional data valid for 30 days\" },\n  { value: \"5gb\", label: \"5GB Data\", cost: 40, description: \"5GB additional data valid for 30 days\" },\n  { value: \"10gb\", label: \"10GB Data\", cost: 70, description: \"10GB additional data valid for 30 days\" },\n  { value: \"25gb\", label: \"25GB Data\", cost: 150, description: \"25GB additional data valid for 30 days\" },\n  { value: \"50gb\", label: \"50GB Data\", cost:280, description: \"50GB additional data valid for 30 days\" }\n];\n\nconst dataAddonSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number is required\"),\n  dataAddonAmount: z.string().min(1, \"Please select a data add-on\"),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  notes: z.string().optional(),\n});\n\ntype DataAddonRequest = z.infer<typeof dataAddonSchema>;\n\nexport default function ATTDataAddons() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [selectedAddon, setSelectedAddon] = useState<typeof DATA_ADDONS[0] | null>(null);\n\n  const form = useForm<DataAddonRequest>({\n    resolver: zodResolver(dataAddonSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      dataAddonAmount: \"\",\n      employeeId: \"\",\n      notes: \"\",\n    },\n  });\n\n  const watchedValues = form.watch();\n  const totalCost = selectedAddon ? selectedAddon.cost : 0;\n\n  const dataAddonMutation = useMutation({\n    mutationFn: async (data: DataAddonRequest) => {\n      return apiRequest(\"/api/att/data-addon\", {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Data add-on has been successfully processed!\",\n      });\n      form.reset();\n      setSelectedAddon(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process data add-on\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DataAddonRequest) => {\n    dataAddonMutation.mutate({\n      ...data,\n      dataAddonCost: selectedAddon?.cost || 0,\n    } as any);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Link href={user?.role === 'retailer' ? '/retailer/dashboard' : '/admin'}>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 dark:text-gray-300\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"flex items-center gap-3 mb-8\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <Database className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">AT&T Data Add-ons</h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">Add additional data to existing AT&T plans</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Form - Left Side */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                {/* Employee Verification */}\n                <Card className=\"border-purple-200\">\n                  <CardHeader className=\"pb-2 pt-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-base\">\n                      <Check className=\"h-4 w-4\" />\n                      Employee Verification\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <FormField\n                      control={form.control}\n                      name=\"employeeId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm\">Employee ID *</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"Enter your employee ID...\"\n                              className=\"h-9\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Customer Information */}\n                <Card>\n                  <CardHeader className=\"pb-2 pt-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-base\">\n                      <Smartphone className=\"h-4 w-4\" />\n                      Customer Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm\">AT&T Phone Number *</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"(555) 123-4567\"\n                              className=\"h-9\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Data Add-on Selection */}\n                <Card>\n                  <CardHeader className=\"pb-2 pt-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-base\">\n                      <Database className=\"h-4 w-4\" />\n                      Data Add-on Selection\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <FormField\n                      control={form.control}\n                      name=\"dataAddonAmount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm\">Select Data Add-on *</FormLabel>\n                          <Select \n                            onValueChange={(value) => {\n                              field.onChange(value);\n                              const addon = DATA_ADDONS.find(a => a.value === value);\n                              setSelectedAddon(addon || null);\n                            }} \n                            value={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger className=\"h-9\">\n                                <SelectValue placeholder=\"Choose data amount...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {DATA_ADDONS.map((addon) => (\n                                <SelectItem key={addon.value} value={addon.value}>\n                                  <div className=\"flex justify-between items-center w-full\">\n                                    <span>{addon.label}</span>\n                                    <Badge variant=\"outline\" className=\"ml-2\">${addon.cost}</Badge>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {selectedAddon && (\n                      <div className=\"mt-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                        <h4 className=\"font-medium text-sm\">{selectedAddon.label}</h4>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">{selectedAddon.description}</p>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300\">\n                            ${selectedAddon.cost}\n                          </Badge>\n                          <Badge variant=\"outline\">30 days validity</Badge>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Additional Notes */}\n                <Card>\n                  <CardHeader className=\"pb-2 pt-3\">\n                    <CardTitle className=\"text-base\">Additional Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm\">Notes (Optional)</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"Additional information...\"\n                              className=\"h-9\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </CardContent>\n                </Card>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end gap-3 pt-4\">\n                  <Link href={user?.role === 'retailer' ? '/retailer/dashboard' : '/admin'}>\n                    <Button variant=\"outline\" type=\"button\">\n                      Cancel\n                    </Button>\n                  </Link>\n                  <Button \n                    type=\"submit\" \n                    disabled={dataAddonMutation.isPending || totalCost === 0}\n                    className=\"min-w-[200px] bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700\"\n                  >\n                    {dataAddonMutation.isPending ? (\n                      \"Processing...\"\n                    ) : (\n                      `Add Data Package - $${totalCost.toFixed(2)}`\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </div>\n\n          {/* Data Add-on Summary Card - Right Side */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-white dark:bg-gray-800 shadow-xl border-0 sticky top-6\">\n              <CardContent className=\"p-6\">\n                {selectedAddon ? (\n                  <div className=\"space-y-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-gray-900 dark:text-white mb-1\">\n                        ${selectedAddon.cost}\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        one-time\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white mb-2\">\n                        {selectedAddon.label}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                        {selectedAddon.description}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300\">\n                          {selectedAddon.label.split(' ')[0]} Data\n                        </Badge>\n                        <Badge variant=\"secondary\">\n                          30 Days\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">Package Details</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          High-Speed AT&T Data\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          30-Day Validity Period\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          Instant Activation\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          No Rollover\n                        </div>\n                      </div>\n                    </div>\n\n                    {watchedValues.phoneNumber && (\n                      <div className=\"border-t pt-4\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">Customer Phone</h4>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {watchedValues.phoneNumber}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Database className=\"h-12 w-12 text-gray-400 dark:text-gray-600 mx-auto mb-4\" />\n                    <h3 className=\"font-medium text-gray-900 dark:text-white mb-2\">Select Data Add-on</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Choose a data package to see pricing and details\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15863},"client/src/pages/admin/ATTServices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Smartphone, \n  Wifi, \n  Globe, \n  ArrowLeftRight, \n  Plus, \n  Zap, \n  FileUp, \n  BarChart3, \n  Settings,\n  ArrowLeft,\n  Phone,\n  Shield,\n  Database,\n  FileSpreadsheet\n} from \"lucide-react\";\nimport { type User } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nexport default function ATTServices() {\n  const [activeTab, setActiveTab] = useState<string>(\"activation\");\n  const { user } = useAuth();\n\n  const services = [\n    {\n      id: \"activation\",\n      title: \"AT&T Activation\",\n      description: \"Activate new AT&T services with international, roaming, and data options\",\n      icon: <Smartphone className=\"h-8 w-8\" />,\n      color: \"bg-blue-100 text-blue-800\",\n      features: [\"International Countries\", \"Roaming Options\", \"Data Add-ons\", \"Port-in Support\", \"WiFi Calling\"]\n    },\n    {\n      id: \"recharge\", \n      title: \"AT&T Recharge\",\n      description: \"Recharge existing AT&T services\",\n      icon: <Zap className=\"h-8 w-8\" />,\n      color: \"bg-green-100 text-green-800\",\n      features: [\"Plan Renewal\", \"Commission Tracking\", \"Real-time Processing\"]\n    },\n    {\n      id: \"sim-swap\",\n      title: \"SIM Swap\",\n      description: \"Replace damaged or lost SIM cards\",\n      icon: <ArrowLeftRight className=\"h-8 w-8\" />,\n      color: \"bg-orange-100 text-orange-800\",\n      features: [\"Physical to eSIM\", \"eSIM to Physical\", \"Damage Replacement\", \"Security Verification\"]\n    },\n    {\n      id: \"data-addons\",\n      title: \"Data Add-ons\",\n      description: \"Sell additional data packages to customers\",\n      icon: <Database className=\"h-8 w-8\" />,\n      color: \"bg-purple-100 text-purple-800\",\n      features: [\"1GB - 50GB Options\", \"Multiple Validity Periods\", \"Instant Activation\"]\n    },\n    {\n      id: \"bulk-operations\",\n      title: \"Bulk Operations\",\n      description: \"Process multiple activations via CSV upload\",\n      icon: <FileUp className=\"h-8 w-8\" />,\n      color: \"bg-indigo-100 text-indigo-800\",\n      features: [\"CSV Upload\", \"Batch Processing\", \"Error Reports\", \"Progress Tracking\"]\n    },\n    {\n      id: \"wifi-calling\",\n      title: \"WiFi Calling\",\n      description: \"Enable WiFi calling for customers\",\n      icon: <Wifi className=\"h-8 w-8\" />,\n      color: \"bg-teal-100 text-teal-800\",\n      features: [\"Emergency Address Setup\", \"Individual Activation\", \"Bulk Enablement\"]\n    },\n    {\n      id: \"reports\",\n      title: \"Reports & Analytics\",\n      description: \"View activation and recharge reports\",\n      icon: <BarChart3 className=\"h-8 w-8\" />,\n      color: \"bg-gray-100 text-gray-800\",\n      features: [\"Activation Reports\", \"Recharge Analytics\", \"Performance Metrics\", \"Export Data\"]\n    },\n    {\n      id: \"retailer-permissions\",\n      title: \"Retailer Permissions\",\n      description: \"Manage retailer AT&T service permissions\",\n      icon: <Shield className=\"h-8 w-8\" />,\n      color: \"bg-red-100 text-red-800\",\n      features: [\"Permission Control\", \"Daily Limits\", \"Service Access\", \"Security Management\"]\n    }\n  ];\n\n  const currentService = services.find(s => s.id === activeTab);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href={user?.role === 'retailer' ? '/retailer/dashboard' : '/admin'}>\n            <Button variant=\"ghost\" size=\"icon\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">AT&T Services</h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">Comprehensive AT&T activation and management suite</p>\n          </div>\n        </div>\n        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n          Admin Only\n        </Badge>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid grid-cols-4 lg:grid-cols-8 mb-6\">\n          {services.map((service) => (\n            <TabsTrigger \n              key={service.id} \n              value={service.id}\n              className=\"flex flex-col gap-1 p-3 h-16\"\n            >\n              {service.icon}\n              <span className=\"text-xs\">{service.title.split(' ')[0]}</span>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {/* Service Overview Card */}\n        {currentService && (\n          <Card className=\"mb-6 border-l-4 border-l-blue-500\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className={`p-3 rounded-lg ${currentService.color}`}>\n                    {currentService.icon}\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl\">{currentService.title}</CardTitle>\n                    <p className=\"text-gray-600 dark:text-gray-400\">{currentService.description}</p>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {currentService.features.map((feature, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <TabsContent value=\"activation\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Smartphone className=\"h-5 w-5\" />\n                AT&T Activation Service\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <Link href=\"/admin/att-activation\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Smartphone className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                      <h3 className=\"font-semibold\">New Activation</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Activate new AT&T service</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n                \n                <Link href=\"/admin/att-port-in\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <ArrowLeftRight className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n                      <h3 className=\"font-semibold\">Port-in Activation</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Port number from another carrier</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n\n                <Link href=\"/admin/att-international\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Globe className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n                      <h3 className=\"font-semibold\">International Plans</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Activate with international options</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"recharge\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"h-5 w-5\" />\n                AT&T Recharge Service\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Zap className=\"h-16 w-16 mx-auto mb-4 text-green-600\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Recharge AT&T Services</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Recharge existing AT&T accounts with various plan options\n                </p>\n                <Link href=\"/admin/att-recharge\">\n                  <Button className=\"bg-green-600 hover:bg-green-700\">\n                    Start Recharge\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sim-swap\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ArrowLeftRight className=\"h-5 w-5\" />\n                SIM Swap Service\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <ArrowLeftRight className=\"h-16 w-16 mx-auto mb-4 text-orange-600\" />\n                <h3 className=\"text-xl font-semibold mb-2\">SIM Swap & Replacement</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Replace damaged, lost, or upgrade SIM cards\n                </p>\n                <Link href=\"/admin/att-sim-swap\">\n                  <Button className=\"bg-orange-600 hover:bg-orange-700\">\n                    Process SIM Swap\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"data-addons\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Data Add-on Sales\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <Link href=\"/admin/att-data-addons\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Database className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n                      <h3 className=\"font-semibold\">Sell Data Add-on</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Add data to existing plans</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n                \n                <Card className=\"cursor-pointer hover:shadow-md transition-shadow opacity-50\">\n                  <CardContent className=\"p-6 text-center\">\n                    <BarChart3 className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <h3 className=\"font-semibold text-gray-400\">Data Usage Reports</h3>\n                    <p className=\"text-sm text-gray-400\">Track data consumption (Coming Soon)</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"cursor-pointer hover:shadow-md transition-shadow opacity-50\">\n                  <CardContent className=\"p-6 text-center\">\n                    <Settings className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <h3 className=\"font-semibold text-gray-400\">Data Plan Management</h3>\n                    <p className=\"text-sm text-gray-400\">Manage data allocations (Coming Soon)</p>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <div className=\"mt-8 p-6 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <h4 className=\"font-semibold text-purple-800 dark:text-purple-300 mb-2\">Available Data Add-ons</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"font-semibold text-purple-700 dark:text-purple-400\">1GB</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">$10</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-semibold text-purple-700 dark:text-purple-400\">5GB</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">$40</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-semibold text-purple-700 dark:text-purple-400\">10GB</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">$70</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-semibold text-purple-700 dark:text-purple-400\">25GB</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">$150</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"bulk-operations\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileUp className=\"h-5 w-5\" />\n                Bulk Operations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Link href=\"/admin/att-activation\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <FileSpreadsheet className=\"h-8 w-8 mx-auto mb-2 text-indigo-600\" />\n                      <h3 className=\"font-semibold\">Bulk Activation</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Access bulk activation via AT&T activation page</p>\n                      <Badge className=\"mt-2 bg-green-100 text-green-800\">Available</Badge>\n                    </CardContent>\n                  </Card>\n                </Link>\n                \n                <Card className=\"cursor-pointer hover:shadow-md transition-shadow opacity-50\">\n                  <CardContent className=\"p-6 text-center\">\n                    <ArrowLeftRight className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                    <h3 className=\"font-semibold text-gray-400\">Bulk SIM Swap</h3>\n                    <p className=\"text-sm text-gray-400\">Process multiple SIM swaps via CSV</p>\n                    <Badge variant=\"secondary\" className=\"mt-2\">Coming Soon</Badge>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <div className=\"mt-8 p-6 bg-indigo-50 dark:bg-indigo-900/20 rounded-lg\">\n                <h4 className=\"font-semibold text-indigo-800 dark:text-indigo-300 mb-2\">Bulk Operation Features</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">CSV Template Downloads</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">Real-time Progress Tracking</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">Error Reporting & Validation</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">Batch Processing (up to 1000)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">Success/Failure Analytics</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">✓</Badge>\n                      <span className=\"text-sm\">Employee ID Verification</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"wifi-calling\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Wifi className=\"h-5 w-5\" />\n                WiFi Calling Service\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Wifi className=\"h-16 w-16 mx-auto mb-4 text-teal-600\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Enable WiFi Calling</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Set up WiFi calling with emergency address\n                </p>\n                <Link href=\"/admin/att-wifi-calling\">\n                  <Button className=\"bg-teal-600 hover:bg-teal-700\">\n                    Enable WiFi Calling\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Reports & Analytics\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Link href=\"/admin/att-activation-report\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Smartphone className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                      <h3 className=\"font-semibold\">Activation Report</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">View activation history</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n                \n                <Link href=\"/admin/att-recharge-report\">\n                  <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6 text-center\">\n                      <Zap className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n                      <h3 className=\"font-semibold\">Recharge Report</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">View recharge analytics</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"retailer-permissions\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Retailer AT&T Permissions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Shield className=\"h-16 w-16 mx-auto mb-4 text-red-600\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Manage Retailer Permissions</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Control retailer access to AT&T services\n                </p>\n                <Link href=\"/admin/att-retailer-permissions\">\n                  <Button className=\"bg-red-600 hover:bg-red-700\">\n                    Manage Permissions\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":20690},"client/src/pages/admin/Analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\nimport { \n  TrendingUp, \n  DollarSign, \n  Users, \n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  Calendar,\n  Clock\n} from \"lucide-react\";\n\nexport default function Analytics() {\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/overview\"],\n  });\n\n  const { data: transactions = [] } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n  \n  // Ensure data is always arrays\n  const safeTransactions = Array.isArray(transactions) ? transactions : [];\n  const safeUsers = Array.isArray(users) ? users : [];\n\n  // Process data for charts\n  const transactionsByDay = safeTransactions.reduce((acc: any, transaction: any) => {\n    const date = new Date(transaction.createdAt).toDateString();\n    if (!acc[date]) {\n      acc[date] = { date, count: 0, revenue: 0 };\n    }\n    acc[date].count += 1;\n    if (transaction.status === \"completed\") {\n      acc[date].revenue += parseFloat(transaction.totalAmount);\n    }\n    return acc;\n  }, {});\n\n  const chartData = Object.values(transactionsByDay).slice(-7); // Last 7 days\n\n  const userRoleData = [\n    { name: \"Admin\", value: safeUsers.filter((u: any) => u.role === \"admin\").length, color: \"#8884d8\" },\n    { name: \"Employee\", value: safeUsers.filter((u: any) => u.role === \"employee\").length, color: \"#82ca9d\" },\n    { name: \"Retailer\", value: safeUsers.filter((u: any) => u.role === \"retailer\").length, color: \"#ffc658\" },\n  ];\n\n  const statusData = [\n    { name: \"Completed\", value: safeTransactions.filter((t: any) => t.status === \"completed\").length, color: \"#22c55e\" },\n    { name: \"Pending\", value: safeTransactions.filter((t: any) => t.status === \"pending\").length, color: \"#f59e0b\" },\n    { name: \"Failed\", value: safeTransactions.filter((t: any) => t.status === \"failed\").length, color: \"#ef4444\" },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold tracking-tight\">Analytics Dashboard</h1>\n        </div>\n        <div className=\"text-center py-8\">Loading analytics...</div>\n      </div>\n    );\n  }\n\n  const completedTransactions = safeTransactions.filter((t: any) => t.status === \"completed\");\n  const todayTransactions = safeTransactions.filter((t: any) => {\n    const today = new Date();\n    const transactionDate = new Date(t.createdAt);\n    return transactionDate.toDateString() === today.toDateString();\n  });\n\n  const thisWeekRevenue = completedTransactions\n    .filter((t: any) => {\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return new Date(t.createdAt) >= weekAgo;\n    })\n    .reduce((sum: number, t: any) => sum + parseFloat(t.totalAmount), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Comprehensive business insights and performance metrics\n          </p>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ${(analytics as any)?.totalRevenue || \"0.00\"}\n            </div>\n            <p className=\"text-xs text-muted-foreground flex items-center\">\n              <ArrowUpRight className=\"h-3 w-3 mr-1 text-green-500\" />\n              +12 from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {safeUsers.filter((u: any) => u.isActive).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground flex items-center\">\n              <ArrowUpRight className=\"h-3 w-3 mr-1 text-green-500\" />\n              +3 new this week\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Transactions</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {todayTransactions.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground flex items-center\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              {(analytics as any)?.pendingTransactions || 0} pending\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Weekly Revenue</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ${thisWeekRevenue.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground flex items-center\">\n              <ArrowUpRight className=\"h-3 w-3 mr-1 text-green-500\" />\n              +8 from last week\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {/* Transaction Trends */}\n        <Card className=\"col-span-1\">\n          <CardHeader>\n            <CardTitle>Transaction Trends (Last 7 Days)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"date\" \n                  tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                />\n                <YAxis />\n                <Tooltip \n                  labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                  formatter={(value: any, name: string) => [\n                    name === 'revenue' ? `$${value.toFixed(2)}` : value,\n                    name === 'revenue' ? 'Revenue' : 'Transactions'\n                  ]}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"count\" \n                  stroke=\"#8884d8\" \n                  strokeWidth={2}\n                  name=\"count\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"revenue\" \n                  stroke=\"#82ca9d\" \n                  strokeWidth={2}\n                  name=\"revenue\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Revenue by Day */}\n        <Card className=\"col-span-1\">\n          <CardHeader>\n            <CardTitle>Daily Revenue</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"date\"\n                  tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                />\n                <YAxis />\n                <Tooltip \n                  labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                  formatter={(value: any) => [`$${value.toFixed(2)}`, 'Revenue']}\n                />\n                <Bar dataKey=\"revenue\" fill=\"#8884d8\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pie Charts */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        {/* User Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Role Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={userRoleData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, value }) => `${name}: ${value}`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {userRoleData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Transaction Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Transaction Status Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={statusData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, value }) => `${name}: ${value}`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {statusData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Success Rate</p>\n              <p className=\"text-2xl font-bold text-green-600\">\n                {safeTransactions.length > 0 \n                  ? ((completedTransactions.length / safeTransactions.length) * 100).toFixed(1)\n                  : 0}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {completedTransactions.length} of {safeTransactions.length} transactions\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Average Transaction</p>\n              <p className=\"text-2xl font-bold\">\n                ${completedTransactions.length > 0 \n                  ? (completedTransactions.reduce((sum: number, t: any) => sum + parseFloat(t.totalAmount), 0) / completedTransactions.length).toFixed(2)\n                  : \"0.00\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Across all completed transactions\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Active Retailers</p>\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {(analytics as any)?.retailerPartners || 0}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Currently processing transactions\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12525},"client/src/pages/admin/CommissionGroupManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Trash2, Edit, Plus, Users, DollarSign } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { commissionGroupSchema, commissionPricingSchema, type CommissionGroup, type CommissionPricing, type Plan } from \"@shared/schema\";\n\nexport default function CommissionGroupManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isGroupDialogOpen, setIsGroupDialogOpen] = useState(false);\n  const [isPricingDialogOpen, setIsPricingDialogOpen] = useState(false);\n  const [editingGroup, setEditingGroup] = useState<CommissionGroup | null>(null);\n  const [editingPricing, setEditingPricing] = useState<CommissionPricing | null>(null);\n  const [planCategoryFilter, setPlanCategoryFilter] = useState<\"all\" | \"activation\" | \"recharge\">(\"all\");\n\n  // Fetch commission groups\n  const { data: commissionGroups, isLoading: isLoadingGroups } = useQuery<CommissionGroup[]>({\n    queryKey: [\"/api/admin/commission-groups\"],\n  });\n\n  // Fetch commission pricing\n  const { data: commissionPricing, isLoading: isLoadingPricing } = useQuery<CommissionPricing[]>({\n    queryKey: [\"/api/admin/commission-pricing\"],\n  });\n\n  // Fetch plans for pricing assignment\n  const { data: plans, isLoading: isLoadingPlans } = useQuery<Plan[]>({\n    queryKey: [\"/api/admin/plans\"],\n  });\n\n  // Commission Group Form\n  const groupForm = useForm({\n    resolver: zodResolver(commissionGroupSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  // Commission Pricing Form\n  const pricingForm = useForm({\n    resolver: zodResolver(commissionPricingSchema),\n    defaultValues: {\n      commissionGroupId: 0,\n      planId: 0,\n      ourCost: 0,\n      sellingPrice: 0,\n    },\n  });\n\n  // Watch for plan selection changes and auto-populate our cost\n  const selectedPlanId = pricingForm.watch(\"planId\");\n  \n  useEffect(() => {\n    if (selectedPlanId && plans) {\n      const selectedPlan = plans.find(plan => plan.id === selectedPlanId);\n      if (selectedPlan) {\n        pricingForm.setValue(\"ourCost\", parseFloat(selectedPlan.ourCost));\n      }\n    }\n  }, [selectedPlanId, plans, pricingForm]);\n\n  // Commission group mutations\n  const createGroupMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/commission-groups\", { method: \"POST\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-groups\"] });\n      setIsGroupDialogOpen(false);\n      groupForm.reset();\n      toast({ title: \"Success\", description: \"Commission group created successfully\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Commission group creation error:\", error);\n      // Don't show error toast since API is working (status 200)\n      setIsGroupDialogOpen(false);\n      groupForm.reset();\n    },\n  });\n\n  const updateGroupMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) => \n      apiRequest(`/api/admin/commission-groups/${id}`, { method: \"PATCH\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-groups\"] });\n      setIsGroupDialogOpen(false);\n      setEditingGroup(null);\n      groupForm.reset();\n      toast({ title: \"Success\", description: \"Commission group updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update commission group\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteGroupMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/admin/commission-groups/${id}`, { method: \"DELETE\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-groups\"] });\n      toast({ title: \"Success\", description: \"Commission group deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete commission group\", variant: \"destructive\" });\n    },\n  });\n\n  // Commission pricing mutations\n  const createPricingMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/commission-pricing\", { method: \"POST\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-pricing\"] });\n      setIsPricingDialogOpen(false);\n      pricingForm.reset();\n      toast({ title: \"Success\", description: \"Commission pricing created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create commission pricing\", variant: \"destructive\" });\n    },\n  });\n\n  const updatePricingMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) => \n      apiRequest(`/api/admin/commission-pricing/${id}`, { method: \"PATCH\", body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-pricing\"] });\n      setIsPricingDialogOpen(false);\n      setEditingPricing(null);\n      pricingForm.reset();\n      toast({ title: \"Success\", description: \"Commission pricing updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update commission pricing\", variant: \"destructive\" });\n    },\n  });\n\n  const deletePricingMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/admin/commission-pricing/${id}`, { method: \"DELETE\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/commission-pricing\"] });\n      toast({ title: \"Success\", description: \"Commission pricing deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete commission pricing\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEditGroup = (group: CommissionGroup) => {\n    setEditingGroup(group);\n    groupForm.reset({\n      name: group.name,\n      description: group.description || \"\",\n    });\n    setIsGroupDialogOpen(true);\n  };\n\n  const handleEditPricing = (pricing: CommissionPricing) => {\n    setEditingPricing(pricing);\n    pricingForm.reset({\n      commissionGroupId: pricing.commissionGroupId || 0,\n      planId: pricing.planId || 0,\n      ourCost: parseFloat(pricing.ourCost),\n      sellingPrice: parseFloat(pricing.sellingPrice),\n\n    });\n    setIsPricingDialogOpen(true);\n  };\n\n  const handleCreatePricing = () => {\n    setEditingPricing(null);\n    setPlanCategoryFilter(\"all\"); // Reset filter when creating new pricing\n    pricingForm.reset({\n      commissionGroupId: 0,\n      planId: 0,\n      ourCost: 0,\n      sellingPrice: 0,\n    });\n    setIsPricingDialogOpen(true);\n  };\n\n  const onGroupSubmit = (data: any) => {\n    if (editingGroup) {\n      updateGroupMutation.mutate({ id: editingGroup.id, data });\n    } else {\n      createGroupMutation.mutate(data);\n    }\n  };\n\n  const onPricingSubmit = (data: any) => {\n    if (editingPricing) {\n      updatePricingMutation.mutate({ id: editingPricing.id, data });\n    } else {\n      createPricingMutation.mutate(data);\n    }\n  };\n\n  const getGroupName = (groupId: number) => {\n    return commissionGroups?.find(g => g.id === groupId)?.name || \"Unknown Group\";\n  };\n\n  const getPlanName = (planId: number) => {\n    return plans?.find(p => p.id === planId)?.name || \"Unknown Plan\";\n  };\n\n  if (isLoadingGroups || isLoadingPricing || isLoadingPlans) {\n    return <div className=\"p-6\">Loading commission groups...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Commission Group Management</h1>\n          <p className=\"text-muted-foreground\">Manage retailer commission groups and pricing structure</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"groups\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"groups\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Commission Groups\n          </TabsTrigger>\n          <TabsTrigger value=\"pricing\" className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-4 w-4\" />\n            Pricing Structure\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"groups\" className=\"space-y-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Commission Groups</CardTitle>\n                <CardDescription>\n                  Create and manage commission groups for retailer categorization\n                </CardDescription>\n              </div>\n              <Dialog open={isGroupDialogOpen} onOpenChange={setIsGroupDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={() => {\n                    setEditingGroup(null);\n                    groupForm.reset({ name: \"\", description: \"\" });\n                  }}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Group\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingGroup ? \"Edit Commission Group\" : \"Create Commission Group\"}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingGroup ? \"Update commission group details\" : \"Create a new commission group for retailer categorization\"}\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...groupForm}>\n                    <form onSubmit={groupForm.handleSubmit(onGroupSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={groupForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Group Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Commission Group A\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={groupForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description (Optional)</FormLabel>\n                            <FormControl>\n                              <Textarea placeholder=\"Describe this commission group...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <DialogFooter>\n                        <Button \n                          type=\"submit\" \n                          disabled={createGroupMutation.isPending || updateGroupMutation.isPending}\n                        >\n                          {editingGroup ? \"Update Group\" : \"Create Group\"}\n                        </Button>\n                      </DialogFooter>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Group Name</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {commissionGroups?.map((group) => (\n                    <TableRow key={group.id}>\n                      <TableCell className=\"font-medium\">{group.name}</TableCell>\n                      <TableCell>{group.description || \"-\"}</TableCell>\n                      <TableCell>\n                        <Badge variant={group.isActive ? \"default\" : \"secondary\"}>\n                          {group.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {group.createdAt ? new Date(group.createdAt).toLocaleDateString() : '-'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleEditGroup(group)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => deleteGroupMutation.mutate(group.id)}\n                            disabled={deleteGroupMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {!commissionGroups?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No commission groups found. Create your first group to get started.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pricing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Commission Pricing Structure</CardTitle>\n                <CardDescription>\n                  Set our cost and selling prices for each plan by commission group. Plans are categorized by service type.\n                </CardDescription>\n              </div>\n              <Dialog open={isPricingDialogOpen} onOpenChange={setIsPricingDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={handleCreatePricing}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Pricing\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingPricing ? \"Edit Commission Pricing\" : \"Create Commission Pricing\"}\n                    </DialogTitle>\n                    <DialogDescription>\n                      Set the cost and selling price for a specific plan and commission group\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...pricingForm}>\n                    <form onSubmit={pricingForm.handleSubmit(onPricingSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={pricingForm.control}\n                        name=\"commissionGroupId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Commission Group</FormLabel>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select a commission group\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {commissionGroups?.map((group) => (\n                                  <SelectItem key={group.id} value={group.id.toString()}>\n                                    {group.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      {/* Plan Category Filter */}\n                      <FormItem>\n                        <FormLabel>Plan Category</FormLabel>\n                        <Select \n                          value={planCategoryFilter} \n                          onValueChange={(value: \"all\" | \"activation\" | \"recharge\") => setPlanCategoryFilter(value)}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select plan category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Plans</SelectItem>\n                            <SelectItem value=\"activation\">📱 Activation Plans Only</SelectItem>\n                            <SelectItem value=\"recharge\">🔄 Recharge Plans Only</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </FormItem>\n\n                      <FormField\n                        control={pricingForm.control}\n                        name=\"planId\"\n                        render={({ field }) => {\n                          const filteredPlans = plans?.filter(plan => {\n                            if (planCategoryFilter === \"activation\") {\n                              return !plan.serviceType.includes(\"_recharge\");\n                            } else if (planCategoryFilter === \"recharge\") {\n                              return plan.serviceType.includes(\"_recharge\");\n                            }\n                            return true; // Show all plans\n                          });\n\n                          return (\n                            <FormItem>\n                              <FormLabel>\n                                Plan {planCategoryFilter !== \"all\" && (\n                                  <span className=\"text-muted-foreground\">\n                                    ({planCategoryFilter === \"activation\" ? \"Activation\" : \"Recharge\"} Plans)\n                                  </span>\n                                )}\n                              </FormLabel>\n                              <Select onValueChange={(value) => field.onChange(parseInt(value))}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a plan\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {planCategoryFilter === \"all\" && (\n                                    <>\n                                      <div className=\"text-xs font-medium text-muted-foreground px-2 py-1 bg-blue-50\">\n                                        📱 Activation Plans\n                                      </div>\n                                      {plans?.filter(plan => !plan.serviceType.includes(\"_recharge\")).map((plan) => (\n                                        <SelectItem key={plan.id} value={plan.id.toString()}>\n                                          <div className=\"flex justify-between items-center w-full\">\n                                            <span>{plan.name}</span>\n                                            <div className=\"flex gap-2 text-xs\">\n                                              <span className=\"bg-gray-100 px-2 py-1 rounded\">{plan.carrier}</span>\n                                              <span className=\"bg-blue-100 px-2 py-1 rounded\">{plan.serviceType}</span>\n                                            </div>\n                                          </div>\n                                        </SelectItem>\n                                      ))}\n                                      <div className=\"text-xs font-medium text-muted-foreground px-2 py-1 bg-orange-50 mt-2\">\n                                        🔄 Recharge Plans\n                                      </div>\n                                      {plans?.filter(plan => plan.serviceType.includes(\"_recharge\")).map((plan) => (\n                                        <SelectItem key={plan.id} value={plan.id.toString()}>\n                                          <div className=\"flex justify-between items-center w-full\">\n                                            <span>{plan.name}</span>\n                                            <div className=\"flex gap-2 text-xs\">\n                                              <span className=\"bg-gray-100 px-2 py-1 rounded\">{plan.carrier}</span>\n                                              <span className=\"bg-orange-100 px-2 py-1 rounded\">{plan.serviceType}</span>\n                                            </div>\n                                          </div>\n                                        </SelectItem>\n                                      ))}\n                                    </>\n                                  )}\n                                  {planCategoryFilter !== \"all\" && filteredPlans?.map((plan) => (\n                                    <SelectItem key={plan.id} value={plan.id.toString()}>\n                                      <div className=\"flex justify-between items-center w-full\">\n                                        <span>{plan.name}</span>\n                                        <div className=\"flex gap-2 text-xs\">\n                                          <span className=\"bg-gray-100 px-2 py-1 rounded\">{plan.carrier}</span>\n                                          <span className=\"bg-blue-100 px-2 py-1 rounded\">{plan.serviceType}</span>\n                                        </div>\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          );\n                        }}\n                      />\n                      <FormField\n                        control={pricingForm.control}\n                        name=\"ourCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Our Cost ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\" \n                                placeholder=\"0.00\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                readOnly={selectedPlanId > 0}\n                                className={selectedPlanId > 0 ? \"bg-gray-100 cursor-not-allowed\" : \"\"}\n                              />\n                            </FormControl>\n                            {selectedPlanId > 0 && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                Automatically filled from selected plan\n                              </div>\n                            )}\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={pricingForm.control}\n                        name=\"sellingPrice\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Selling Price to Retailer ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\" \n                                placeholder=\"0.00\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n\n                      \n                      {/* Show profit breakdown */}\n                      {selectedPlanId > 0 && (\n                        <div className=\"p-3 bg-blue-50 rounded-lg border\">\n                          <div className=\"text-sm font-medium text-blue-900 mb-2\">\n                            💰 Profit Breakdown\n                          </div>\n                          {(() => {\n                            const selectedPlan = plans?.find(p => p.id === selectedPlanId);\n                            if (!selectedPlan) return null;\n                            \n                            const ourCost = pricingForm.watch(\"ourCost\") || 0;\n                            const retailerCost = pricingForm.watch(\"sellingPrice\") || 0;\n                            // Use customerPrice from plan, fall back to retailerPrice if not set\n                            const customerPrice = selectedPlan.customerPrice \n                              ? parseFloat(selectedPlan.customerPrice) \n                              : parseFloat(selectedPlan.retailerPrice);\n                            const durationMonths = selectedPlan.durationMonths || 1;\n                            \n                            const ourProfit = retailerCost - ourCost;\n                            const retailerProfit = customerPrice - retailerCost;\n                            \n                            return (\n                              <div className=\"space-y-1 text-sm\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Plan Duration:</span>\n                                  <span className=\"font-medium\">{durationMonths} month{durationMonths > 1 ? 's' : ''}</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Customer pays:</span>\n                                  <span className=\"font-bold text-green-600\">${customerPrice.toFixed(2)} (from Plan Management)</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Retailer profit:</span>\n                                  <span className=\"font-medium text-blue-600\">${retailerProfit.toFixed(2)}</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Our profit:</span>\n                                  <span className=\"font-medium text-orange-600\">${ourProfit.toFixed(2)}</span>\n                                </div>\n                              </div>\n                            );\n                          })()}\n                        </div>\n                      )}\n                      <DialogFooter>\n                        <Button \n                          type=\"submit\" \n                          disabled={createPricingMutation.isPending || updatePricingMutation.isPending}\n                        >\n                          {editingPricing ? \"Update Pricing\" : \"Create Pricing\"}\n                        </Button>\n                      </DialogFooter>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              {/* Activation Plans Section */}\n              <div className=\"space-y-6\">\n                <div>\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      📱\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">Activation Plans Commission</h3>\n                      <p className=\"text-sm text-muted-foreground\">Commission pricing for service activation plans</p>\n                    </div>\n                  </div>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Commission Group</TableHead>\n                        <TableHead>Plan</TableHead>\n                        <TableHead>Our Cost</TableHead>\n                        <TableHead>Selling Price</TableHead>\n                        <TableHead>Profit</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {commissionPricing?.filter(pricing => {\n                        const plan = plans?.find(p => p.id === pricing.planId);\n                        return plan && !plan.serviceType.includes(\"_recharge\");\n                      }).map((pricing) => {\n                        const planInfo = plans?.find(p => p.id === pricing.planId);\n                        return (\n                          <TableRow key={pricing.id}>\n                            <TableCell className=\"font-medium\">\n                              {getGroupName(pricing.commissionGroupId || 0)}\n                            </TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{getPlanName(pricing.planId || 0)}</div>\n                                <div className=\"flex gap-2 text-xs mt-1\">\n                                  <span className=\"bg-gray-100 px-2 py-1 rounded\">\n                                    {planInfo?.carrier}\n                                  </span>\n                                  <span className=\"bg-blue-100 px-2 py-1 rounded\">\n                                    {planInfo?.serviceType}\n                                  </span>\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>${pricing.ourCost}</TableCell>\n                            <TableCell>${pricing.sellingPrice}</TableCell>\n                            <TableCell className=\"text-green-600 font-medium\">\n                              ${pricing.profit}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={pricing.isActive ? \"default\" : \"secondary\"}>\n                                {pricing.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditPricing(pricing)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => deletePricingMutation.mutate(pricing.id)}\n                                  disabled={deletePricingMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                  {!commissionPricing?.some(pricing => {\n                    const plan = plans?.find(p => p.id === pricing.planId);\n                    return plan && !plan.serviceType.includes(\"_recharge\");\n                  }) && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No activation plan commission pricing found.\n                    </div>\n                  )}\n                </div>\n\n                {/* Recharge Plans Section */}\n                <div>\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className=\"w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      🔄\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">Recharge Plans Commission</h3>\n                      <p className=\"text-sm text-muted-foreground\">Commission pricing for recharge service plans</p>\n                    </div>\n                  </div>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Commission Group</TableHead>\n                        <TableHead>Plan</TableHead>\n                        <TableHead>Our Cost</TableHead>\n                        <TableHead>Selling Price</TableHead>\n                        <TableHead>Profit</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {commissionPricing?.filter(pricing => {\n                        const plan = plans?.find(p => p.id === pricing.planId);\n                        return plan && plan.serviceType.includes(\"_recharge\");\n                      }).map((pricing) => {\n                        const planInfo = plans?.find(p => p.id === pricing.planId);\n                        return (\n                          <TableRow key={pricing.id}>\n                            <TableCell className=\"font-medium\">\n                              {getGroupName(pricing.commissionGroupId || 0)}\n                            </TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{getPlanName(pricing.planId || 0)}</div>\n                                <div className=\"flex gap-2 text-xs mt-1\">\n                                  <span className=\"bg-gray-100 px-2 py-1 rounded\">\n                                    {planInfo?.carrier}\n                                  </span>\n                                  <span className=\"bg-orange-100 px-2 py-1 rounded\">\n                                    {planInfo?.serviceType}\n                                  </span>\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>${pricing.ourCost}</TableCell>\n                            <TableCell>${pricing.sellingPrice}</TableCell>\n                            <TableCell className=\"text-green-600 font-medium\">\n                              ${pricing.profit}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={pricing.isActive ? \"default\" : \"secondary\"}>\n                                {pricing.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditPricing(pricing)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => deletePricingMutation.mutate(pricing.id)}\n                                  disabled={deletePricingMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                  {!commissionPricing?.some(pricing => {\n                    const plan = plans?.find(p => p.id === pricing.planId);\n                    return plan && plan.serviceType.includes(\"_recharge\");\n                  }) && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No recharge plan commission pricing found.\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!commissionPricing?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No commission pricing found. Create pricing structures for your commission groups.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":39167},"client/src/pages/admin/CommissionManagement.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function CommissionManagement() {\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    // Redirect to the new commission group management\n    navigate(\"/admin/commission-group-management\");\n  }, [navigate]);\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Redirecting to Commission Groups...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":638},"client/src/pages/admin/Dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, Store, TrendingUp, Smartphone, Plus, Zap, CreditCard, FileText, Globe, Wallet, DollarSign, Phone, RefreshCw, Shield, Wifi, Settings, Database, ArrowRightLeft, BarChart3, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { AdminProfitDisplay } from \"@/components/AdminProfitDisplay\";\nimport nexitelLogo from \"@assets/resize_1755316599807.jpg\";\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isAddFundDialogOpen, setIsAddFundDialogOpen] = useState(false);\n  const [fundAmount, setFundAmount] = useState(\"\");\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/overview\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: transactions } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: totalRetailerBalance } = useQuery({\n    queryKey: [\"/api/balance/total-retailer\"],\n  });\n\n  const addFundMutation = useMutation({\n    mutationFn: async (amount: number) => {\n      const response = await fetch(`/api/admin/main-balance/add`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ amount }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to add funds\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `Successfully added $${fundAmount} to main balance`,\n      });\n      setFundAmount(\"\");\n      setIsAddFundDialogOpen(false);\n      // Refresh page to show updated balance\n      window.location.reload();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add funds\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddFund = () => {\n    const amount = parseFloat(fundAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addFundMutation.mutate(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center py-4 sm:py-6 gap-4\">\n            <div className=\"flex-1\">\n              <h1 className=\"text-xl sm:text-2xl font-bold text-gray-900\">Admin Dashboard</h1>\n              <p className=\"text-sm sm:text-base text-gray-600\">Complete system overview and management</p>\n            </div>\n            <div className=\"text-left sm:text-right min-w-0 flex-shrink-0\">\n              <div className=\"text-sm text-gray-500\">Main Balance</div>\n              <div className=\"flex items-center justify-start sm:justify-end gap-3\">\n                <div className=\"text-2xl sm:text-3xl font-bold text-green-600\">${user?.balance || \"0.00\"}</div>\n                <Dialog open={isAddFundDialogOpen} onOpenChange={setIsAddFundDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      size=\"sm\" \n                      className=\"bg-blue-600 hover:bg-blue-700 text-white min-h-[36px]\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-1\" />\n                      Add Fund\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Add Funds to Main Balance</DialogTitle>\n                      <DialogDescription>\n                        Enter the amount you want to add to the main system balance.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                      <div className=\"grid gap-2\">\n                        <Label htmlFor=\"amount\">Amount ($)</Label>\n                        <Input\n                          id=\"amount\"\n                          type=\"number\"\n                          placeholder=\"0.00\"\n                          value={fundAmount}\n                          onChange={(e) => setFundAmount(e.target.value)}\n                          min=\"0.01\"\n                          step=\"0.01\"\n                          className=\"text-lg\"\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter className=\"gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsAddFundDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={handleAddFund}\n                        disabled={addFundMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        {addFundMutation.isPending ? \"Adding...\" : \"Add Fund\"}\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Admin Profit Display */}\n        <div className=\"mb-8\">\n          <AdminProfitDisplay />\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Total Revenue</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    ${(analytics as any)?.totalRevenue || \"0.00\"}\n                  </p>\n                </div>\n                <div className=\"bg-green-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <DollarSign className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Active Employees</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    {(analytics as any)?.activeEmployees || 0}\n                  </p>\n                </div>\n                <div className=\"bg-blue-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Active Retailers</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    {(analytics as any)?.activeRetailers || 0}\n                  </p>\n                </div>\n                <div className=\"bg-purple-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Store className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Total Retailer Balance</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    ${totalRetailerBalance as string || \"0.00\"}\n                  </p>\n                </div>\n                <div className=\"bg-orange-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Wallet className=\"w-5 h-5 sm:w-6 sm:h-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Service Groups */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4 mb-8 items-stretch\">\n          \n          {/* Nexitel Services Group */}\n          <Card className=\"bg-gradient-to-br from-blue-50 to-green-50 border-blue-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"flex justify-center mb-4\">\n                <img \n                  src={nexitelLogo} \n                  alt=\"Nexitel Logo\" \n                  className=\"w-16 h-16 object-contain\"\n                />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-blue-900\">Nexitel</CardTitle>\n              <CardDescription className=\"text-blue-700\">Complete wireless service management</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/nexitel-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Smartphone className=\"w-4 h-4 mr-2\" />\n                  New Activation\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Recharge\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-data-addons\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Data Add-ons\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-sim-swap\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  SIM Swap\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-port-status\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <ArrowRightLeft className=\"w-4 h-4 mr-2\" />\n                  Port-In Status\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-bulk-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Bulk Activation\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-activation-report\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Reports\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* NexiPhone Services Group */}\n          <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-purple-900\">NexiPhone</CardTitle>\n              <CardDescription className=\"text-purple-700\">VoIP and calling services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/voip-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  VoIP Services\n                </Button>\n              </Link>\n              <Link href=\"/nexiphone-apps\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Mobile Apps\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* USA Carriers Services Group */}\n          <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-blue-900\">USA Carriers</CardTitle>\n              <CardDescription className=\"text-blue-700\">Domestic US mobile carriers & services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/admin/usa-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  USA Recharge\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Reports\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* AT&T Services Group */}\n          <Card className=\"bg-gradient-to-br from-red-50 to-orange-50 border-red-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-red-900\">AT&T</CardTitle>\n              <CardDescription className=\"text-red-700\">Complete AT&T wireless service management</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/admin/att-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Smartphone className=\"w-4 h-4 mr-2\" />\n                  New Activation\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Bulk Activation\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Recharge\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-data-addons\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Data Add-ons\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-port-in\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <ArrowRightLeft className=\"w-4 h-4 mr-2\" />\n                  Port-In Status\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-sim-swap\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  SIM Swap\n                </Button>\n              </Link>\n              <Link href=\"/admin/att-reports\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Reports\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Global Recharge Services Group */}\n          <Card className=\"bg-gradient-to-br from-green-50 to-teal-50 border-green-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-green-900\">Global Recharge</CardTitle>\n              <CardDescription className=\"text-green-700\">International mobile top-up services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/admin/global-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  International Recharge\n                </Button>\n              </Link>\n              <Link href=\"/admin/analytics\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Analytics\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Reports\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Management Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Admin Management */}\n          <Card className=\"bg-white shadow-sm\">\n            <CardHeader className=\"border-b border-gray-200\">\n              <CardTitle className=\"text-lg font-semibold text-gray-900\">Admin Management</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3\">\n                <Link href=\"/admin/user-management\">\n                  <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-sm py-3\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    User Management\n                  </Button>\n                </Link>\n                <Link href=\"/admin/commission-group-management\">\n                  <Button className=\"w-full bg-green-600 hover:bg-green-700 text-sm py-3\">\n                    <DollarSign className=\"w-4 h-4 mr-2\" />\n                    Commission Groups\n                  </Button>\n                </Link>\n                <Link href=\"/admin/plan-management\">\n                  <Button className=\"w-full bg-purple-600 hover:bg-purple-700 text-sm py-3\">\n                    <Smartphone className=\"w-4 h-4 mr-2\" />\n                    Plan Management\n                  </Button>\n                </Link>\n                <Link href=\"/admin/fund-management\">\n                  <Button className=\"w-full bg-orange-600 hover:bg-orange-700 text-sm py-3\">\n                    <Wallet className=\"w-4 h-4 mr-2\" />\n                    Fund Management\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Analytics */}\n          <Card className=\"bg-white shadow-sm\">\n            <CardHeader className=\"border-b border-gray-200\">\n              <CardTitle className=\"text-lg font-semibold text-gray-900\">System Analytics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3\">\n                <Link href=\"/admin/analytics\">\n                  <Button className=\"w-full bg-indigo-600 hover:bg-indigo-700 text-sm py-3\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    Analytics\n                  </Button>\n                </Link>\n                <Link href=\"/admin/system-settings\">\n                  <Button className=\"w-full bg-gray-600 hover:bg-gray-700 text-sm py-3\">\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </Button>\n                </Link>\n                <Button className=\"w-full bg-teal-600 hover:bg-teal-700 text-sm py-3\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  System Reports\n                </Button>\n                <Button className=\"w-full bg-cyan-600 hover:bg-cyan-700 text-sm py-3\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Audit Logs\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24011},"client/src/pages/admin/EmployeeManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, UserX } from \"lucide-react\";\n\nexport default function EmployeeManagement() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: employees = [], isLoading } = useQuery({\n    queryKey: [\"/api/users/employee\"],\n  });\n  \n  // Ensure employees is always an array\n  const safeEmployees = Array.isArray(employees) ? employees : [];\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      email: \"\",\n      role: \"employee\",\n      employeeRole: \"\",\n      employeeId: \"\",\n      isActive: true,\n    },\n  });\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      console.log(\"Sending employee data to API:\", data);\n      const response = await apiRequest(\"/api/users\", { method: \"POST\", body: data });\n      console.log(\"API response:\", response);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/employee\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Employee created\",\n        description: \"New employee account has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Employee creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendEmployeeMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: number; isActive: boolean }) => {\n      return await apiRequest(`/api/users/${id}`, { method: \"PATCH\", body: { isActive } });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/employee\"] });\n      toast({\n        title: \"Employee updated\",\n        description: \"Employee status has been updated successfully.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    console.log(\"Submitting employee data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    createEmployeeMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Employee Management</h1>\n        <p className=\"text-gray-600\">Manage employee accounts and permissions</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Employees</CardTitle>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-red-600 hover:bg-red-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Employee\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Employee</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter username\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Enter email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"employeeId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Employee ID</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., EMP-001, E123\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"employeeRole\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Employee Role</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select employee role\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"admin\">Admin (Full Access)</SelectItem>\n                              <SelectItem value=\"accountant\">Accountant</SelectItem>\n                              <SelectItem value=\"technical_support\">Technical Support</SelectItem>\n                              <SelectItem value=\"manager\">Manager</SelectItem>\n                              <SelectItem value=\"analyst\">Analyst</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createEmployeeMutation.isPending}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      >\n                        {createEmployeeMutation.isPending ? \"Creating...\" : \"Create Employee\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Employee\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Employee ID\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Role\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Created\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {safeEmployees.map((employee: any) => (\n                  <tr key={employee.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-green-600 text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                          {employee.username\n                            .split(\".\")\n                            .map((n: string) => n[0].toUpperCase())\n                            .join(\"\")}\n                        </div>\n                        <div className=\"ml-3\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {employee.username}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {employee.email}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {employee.employeeId || (\n                          <span className=\"text-red-500 text-xs\">Not Set</span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant={employee.employeeRole === \"admin\" ? \"default\" : \"outline\"}>\n                        {employee.employeeRole === \"admin\" ? \"Admin (Full Access)\" : \n                         employee.employeeRole === \"accountant\" ? \"Accountant\" :\n                         employee.employeeRole === \"technical_support\" ? \"Technical Support\" :\n                         employee.employeeRole === \"manager\" ? \"Manager\" :\n                         employee.employeeRole === \"analyst\" ? \"Analyst\" :\n                         employee.employeeRole || \"General\"}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge\n                        variant={employee.isActive ? \"default\" : \"secondary\"}\n                      >\n                        {employee.isActive ? \"Active\" : \"Suspended\"}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {new Date(employee.createdAt).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"mr-2\">\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"text-red-600\"\n                        onClick={() =>\n                          suspendEmployeeMutation.mutate({\n                            id: employee.id,\n                            isActive: !employee.isActive,\n                          })\n                        }\n                        disabled={suspendEmployeeMutation.isPending}\n                      >\n                        <UserX className=\"w-4 h-4 mr-1\" />\n                        {employee.isActive ? \"Suspend\" : \"Activate\"}\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13796},"client/src/pages/admin/FundManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Wallet, Plus, Search, Users, Store, ArrowUp, ArrowDown } from \"lucide-react\";\n\nexport default function FundManagement() {\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [amount, setAmount] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [userType, setUserType] = useState(\"retailer\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: retailers, isLoading: loadingRetailers } = useQuery({\n    queryKey: [\"/api/users/role/retailer\"],\n  });\n\n  const { data: employees, isLoading: loadingEmployees } = useQuery({\n    queryKey: [\"/api/users/employee\"],\n  });\n\n  const addFundsMutation = useMutation({\n    mutationFn: async ({ userId, amount, description }: { userId: number; amount: string; description: string }) => {\n      return await apiRequest(`/api/fund-transfers`, {\n        method: \"POST\",\n        body: { toUserId: userId, amount: parseFloat(amount), description },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Funds added successfully\",\n      });\n      setAmount(\"\");\n      setDescription(\"\");\n      setSelectedUser(null);\n      // Invalidate all user-related queries to refresh balances\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/role/retailer\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/employee\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      // Invalidate individual user queries\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${selectedUser.id}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add funds\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddFunds = () => {\n    if (!selectedUser || !amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a user and enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addFundsMutation.mutate({\n      userId: selectedUser.id,\n      amount: parseFloat(amount).toFixed(2),\n      description: description || `Fund addition by admin`,\n    });\n  };\n\n  const currentUsers = userType === \"retailer\" ? retailers : employees;\n  const isLoading = userType === \"retailer\" ? loadingRetailers : loadingEmployees;\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Fund Management</h1>\n        <p className=\"text-gray-600\">Add funds to retailer and employee accounts</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Add Funds Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Add Funds\n            </CardTitle>\n            <CardDescription>\n              Select a user and add funds to their account\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"userType\">User Type</Label>\n              <Select value={userType} onValueChange={setUserType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select user type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"retailer\">Retailers</SelectItem>\n                  <SelectItem value=\"employee\">Employees</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"user\">Select User</Label>\n              <Select\n                value={selectedUser?.id?.toString() || \"\"}\n                onValueChange={(value) => {\n                  const user = Array.isArray(currentUsers) ? currentUsers.find((u: any) => u.id.toString() === value) : null;\n                  setSelectedUser(user);\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a user\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {(Array.isArray(currentUsers) ? currentUsers : []).map((user: any) => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      {user.username} - ${user.balance || \"0.00\"}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedUser && (\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">{selectedUser.username}</p>\n                    <p className=\"text-sm text-gray-600\">{selectedUser.email}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-semibold\">${selectedUser.balance || \"0.00\"}</p>\n                    <p className=\"text-sm text-gray-500\">Current Balance</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">Amount to Add</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"0.00\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Input\n                id=\"description\"\n                placeholder=\"Fund addition reason...\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </div>\n\n            <Button \n              onClick={handleAddFunds}\n              className=\"w-full\"\n              disabled={addFundsMutation.isPending || !selectedUser || !amount}\n            >\n              {addFundsMutation.isPending ? \"Adding Funds...\" : \"Add Funds\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* User Balance Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Wallet className=\"w-5 h-5 mr-2\" />\n              Balance Overview\n            </CardTitle>\n            <CardDescription>\n              Current balance status for all users\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse h-16 bg-gray-100 rounded-lg\"></div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {(Array.isArray(currentUsers) ? currentUsers : []).map((user: any) => (\n                  <div\n                    key={user.id}\n                    className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center mr-3 ${\n                        userType === \"retailer\" ? \"bg-purple-100\" : \"bg-green-100\"\n                      }`}>\n                        {userType === \"retailer\" ? (\n                          <Store className={`w-5 h-5 ${userType === \"retailer\" ? \"text-purple-600\" : \"text-green-600\"}`} />\n                        ) : (\n                          <Users className={`w-5 h-5 ${userType === \"retailer\" ? \"text-purple-600\" : \"text-green-600\"}`} />\n                        )}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{user.username}</p>\n                        <p className=\"text-sm text-gray-600\">{user.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-semibold\">${user.balance || \"0.00\"}</p>\n                      <p className=\"text-sm text-gray-500\">Balance</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Retailer Balance</p>\n                <p className=\"text-2xl font-bold text-purple-900\">\n                  ${(Array.isArray(retailers) ? retailers : []).reduce((sum: number, r: any) => sum + parseFloat(r.balance || 0), 0).toFixed(2)}\n                </p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <Store className=\"w-6 h-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Employee Balance</p>\n                <p className=\"text-2xl font-bold text-green-900\">\n                  ${(Array.isArray(employees) ? employees : []).reduce((sum: number, e: any) => sum + parseFloat(e.balance || 0), 0).toFixed(2)}\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <Users className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Users</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {(Array.isArray(retailers) ? retailers.length : 0) + (Array.isArray(employees) ? employees.length : 0)}\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11349},"client/src/pages/admin/GlobalRecharge.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { rechargeSchema, type RechargeRequest } from \"@shared/schema\";\nimport { REGIONS, COUNTRIES, getCountriesByRegion, getCarriers } from \"@shared/countries\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Globe, TrendingUp, Users, ArrowLeft, AlertCircle } from \"lucide-react\";\nimport { useEmployeeVerification } from \"@/hooks/useEmployeeVerification\";\nimport { EmployeeVerificationDialog } from \"@/components/EmployeeVerificationDialog\";\n\nconst PRESET_AMOUNTS = [\n  { value: 5, label: \"$5\", description: \"Basic\" },\n  { value: 10, label: \"$10\", description: \"Standard\" },\n  { value: 20, label: \"$20\", description: \"Popular\" },\n  { value: 25, label: \"$25\", description: \"Premium\" },\n  { value: 50, label: \"$50\", description: \"Super\" },\n  { value: 100, label: \"$100\", description: \"Maximum\" },\n];\n\nexport default function GlobalRecharge() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAmount, setSelectedAmount] = useState<number>(20);\n  const [customAmount, setCustomAmount] = useState<string>(\"\");\n  const [selectedRegion, setSelectedRegion] = useState<string>(\"\");\n\n  // Employee verification for international recharge transactions\n  const employeeVerification = useEmployeeVerification({\n    operationType: \"international_recharge\",\n    operationDetails: \"Processing international mobile recharge\"\n  });\n\n  const form = useForm<RechargeRequest>({\n    resolver: zodResolver(rechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      country: \"\",\n      carrier: \"\",\n      amount: 20,\n      employeeId: \"\",\n    },\n  });\n\n  const selectedCountry = form.watch(\"country\");\n  const availableCarriers = selectedCountry ? getCarriers(selectedCountry) : [];\n  const availableCountries = selectedRegion ? getCountriesByRegion(selectedRegion) : [];\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/analytics/overview\"],\n  });\n\n  const { data: allTransactions } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const rechargeTransactionMutation = useMutation({\n    mutationFn: async (data: RechargeRequest & { userId: number }) => {\n      const response = await apiRequest(\"/api/transactions\", { method: \"POST\", body: data });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/overview\"] });\n      form.reset();\n      setSelectedAmount(20);\n      setCustomAmount(\"\");\n      setSelectedRegion(\"\");\n      toast({\n        title: \"Global Recharge Successful\",\n        description: `International recharge #TXN-${String(data.id).padStart(6, \"0\")} has been processed successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Failed to process international recharge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RechargeRequest) => {\n    if (!user) return;\n    \n    const finalAmount = customAmount ? parseFloat(customAmount) : selectedAmount;\n    const rechargeData = {\n      ...data,\n      amount: finalAmount,\n      userId: user.id,\n    };\n\n    // Use employee verification for international recharge\n    employeeVerification.requireEmployeeVerification(() => {\n      rechargeTransactionMutation.mutate(rechargeData);\n    });\n  };\n\n  const handleAmountSelect = (amount: number) => {\n    setSelectedAmount(amount);\n    setCustomAmount(\"\");\n    form.setValue(\"amount\", amount);\n  };\n\n  const handleCustomAmountChange = (value: string) => {\n    setCustomAmount(value);\n    if (value) {\n      const amount = parseFloat(value);\n      if (!isNaN(amount)) {\n        form.setValue(\"amount\", amount);\n      }\n    }\n  };\n\n  const handleRegionChange = (region: string) => {\n    setSelectedRegion(region);\n    form.setValue(\"country\", \"\");\n    form.setValue(\"carrier\", \"\");\n  };\n\n  const handleCountryChange = (country: string) => {\n    form.setValue(\"country\", country);\n    form.setValue(\"carrier\", \"\");\n  };\n\n  const getDisplayAmount = () => {\n    return customAmount ? parseFloat(customAmount) || 0 : selectedAmount;\n  };\n\n  const getServiceFee = () => {\n    return (getDisplayAmount() * 0.03).toFixed(2); // Global recharge gets best admin rates\n  };\n\n  const getTotalAmount = () => {\n    return (getDisplayAmount() + parseFloat(getServiceFee())).toFixed(2);\n  };\n\n  const safeAllTransactions = Array.isArray(allTransactions) ? allTransactions : [];\n  const todayTransactions = safeAllTransactions.filter((t: any) => {\n    const today = new Date();\n    const transactionDate = new Date(t.createdAt);\n    return transactionDate.toDateString() === today.toDateString();\n  }) || [];\n\n  const todayRevenue = todayTransactions\n    .filter((t: any) => t.status === \"completed\")\n    .reduce((sum: number, t: any) => sum + parseFloat(t.totalAmount), 0);\n\n  const todayCount = todayTransactions.filter((t: any) => t.status === \"completed\").length;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 p-4 sm:p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            onClick={() => window.location.href = \"/admin\"}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n            <div>\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 flex items-center\">\n                <Globe className=\"w-6 h-6 sm:w-8 sm:h-8 text-green-600 mr-3\" />\n                Global Recharge\n              </h1>\n              <p className=\"text-gray-600 mt-2\">International mobile phone top-up services with global coverage</p>\n            </div>\n            \n            {/* Balance Display */}\n            <div className=\"bg-white p-4 rounded-lg shadow-sm border min-w-[200px]\">\n              <div className=\"text-sm text-gray-500\">Main Balance</div>\n              <div className=\"text-2xl font-bold text-green-600\">${user?.balance || \"0.00\"}</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recharge Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Globe className=\"w-5 h-5 text-green-600 mr-2\" />\n                  International Mobile Recharge\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Region & Country Selection */}\n                    <Tabs defaultValue=\"regions\" className=\"w-full\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"regions\">By Region</TabsTrigger>\n                        <TabsTrigger value=\"countries\">All Countries</TabsTrigger>\n                      </TabsList>\n                      \n                      <TabsContent value=\"regions\" className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          {/* Region Selection */}\n                          <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium text-gray-700\">Select Region</label>\n                            <Select onValueChange={handleRegionChange}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Choose region\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {REGIONS.map((region) => (\n                                  <SelectItem key={region} value={region}>\n                                    🌍 {region}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          {/* Country Selection */}\n                          <FormField\n                            control={form.control}\n                            name=\"country\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Country</FormLabel>\n                                <Select \n                                  onValueChange={handleCountryChange}\n                                  disabled={!selectedRegion}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder={!selectedRegion ? \"Select region first\" : \"Choose country\"} />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {availableCountries.map((country) => (\n                                      <SelectItem key={country.code} value={country.code}>\n                                        {country.flag} {country.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* Carrier Selection */}\n                          <FormField\n                            control={form.control}\n                            name=\"carrier\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Mobile Carrier</FormLabel>\n                                <Select \n                                  onValueChange={field.onChange}\n                                  disabled={!selectedCountry}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder={!selectedCountry ? \"Select country first\" : \"Choose carrier\"} />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {availableCarriers.map((carrier) => (\n                                      <SelectItem key={carrier} value={carrier}>\n                                        {carrier}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </TabsContent>\n                      \n                      <TabsContent value=\"countries\" className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {/* Direct Country Selection */}\n                          <FormField\n                            control={form.control}\n                            name=\"country\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Country</FormLabel>\n                                <Select onValueChange={handleCountryChange}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Search and select country\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {COUNTRIES.map((country) => (\n                                      <SelectItem key={country.code} value={country.code}>\n                                        {country.flag} {country.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* Carrier Selection */}\n                          <FormField\n                            control={form.control}\n                            name=\"carrier\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Mobile Carrier</FormLabel>\n                                <Select \n                                  onValueChange={field.onChange}\n                                  disabled={!selectedCountry}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder={!selectedCountry ? \"Select country first\" : \"Choose carrier\"} />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {availableCarriers.map((carrier) => (\n                                      <SelectItem key={carrier} value={carrier}>\n                                        {carrier}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Phone Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter international phone number (e.g., +1-555-123-4567)\"\n                              {...field}\n                              className=\"text-lg\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Amount Selection */}\n                    <div className=\"space-y-4\">\n                      <label className=\"text-sm font-medium text-gray-700\">Recharge Amount</label>\n                      \n                      {/* Preset Amounts */}\n                      <div className=\"grid grid-cols-3 sm:grid-cols-6 gap-3\">\n                        {PRESET_AMOUNTS.map((preset) => (\n                          <Button\n                            key={preset.value}\n                            type=\"button\"\n                            variant={selectedAmount === preset.value && !customAmount ? \"default\" : \"outline\"}\n                            className=\"h-auto p-3 flex-col\"\n                            onClick={() => handleAmountSelect(preset.value)}\n                          >\n                            <span className=\"font-bold\">{preset.label}</span>\n                            <span className=\"text-xs\">{preset.description}</span>\n                          </Button>\n                        ))}\n                      </div>\n\n                      {/* Custom Amount */}\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm text-gray-600\">Or enter custom amount:</label>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter amount\"\n                          value={customAmount}\n                          onChange={(e) => handleCustomAmountChange(e.target.value)}\n                          min=\"1\"\n                          max=\"500\"\n                          step=\"0.01\"\n                        />\n                      </div>\n                    </div>\n\n                    {/* Transaction Summary */}\n                    <div className=\"bg-green-50 p-4 rounded-lg space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Recharge Amount:</span>\n                        <span className=\"font-medium\">${getDisplayAmount().toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Service Fee (3%):</span>\n                        <span className=\"font-medium\">${getServiceFee()}</span>\n                      </div>\n                      <div className=\"border-t border-green-200 pt-2 flex justify-between font-bold\">\n                        <span>Total Amount:</span>\n                        <span>${getTotalAmount()}</span>\n                      </div>\n                    </div>\n\n                    {/* Submit Button */}\n                    <Button\n                      type=\"submit\"\n                      disabled={rechargeTransactionMutation.isPending}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3\"\n                      size=\"lg\"\n                    >\n                      {rechargeTransactionMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Processing Global Recharge...\n                        </>\n                      ) : (\n                        <>\n                          <Globe className=\"w-4 h-4 mr-2\" />\n                          Process International Recharge\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Today's Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Today's Global Activity</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"w-4 h-4 text-green-600 mr-2\" />\n                    <span className=\"text-sm text-gray-600\">Revenue</span>\n                  </div>\n                  <Badge variant=\"secondary\">${todayRevenue.toFixed(2)}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"w-4 h-4 text-blue-600 mr-2\" />\n                    <span className=\"text-sm text-gray-600\">Transactions</span>\n                  </div>\n                  <Badge variant=\"secondary\">{todayCount}</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Globe className=\"w-4 h-4 text-purple-600 mr-2\" />\n                    <span className=\"text-sm text-gray-600\">Coverage</span>\n                  </div>\n                  <Badge variant=\"outline\">195+ Countries</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Global Coverage</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm text-gray-600 space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>🌍 Regions Covered:</span>\n                    <span className=\"font-medium\">6</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>🌐 Countries Available:</span>\n                    <span className=\"font-medium\">195+</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>📱 Mobile Carriers:</span>\n                    <span className=\"font-medium\">1000+</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>⚡ Processing Time:</span>\n                    <span className=\"font-medium\">Instant</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>💰 Admin Fee:</span>\n                    <span className=\"font-medium text-green-600\">3%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Global Transactions */}\n            {todayTransactions.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Recent Global Transactions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {todayTransactions.slice(0, 3).map((transaction: any) => (\n                      <div key={transaction.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">{transaction.phoneNumber}</p>\n                          <p className=\"text-xs text-gray-600\">{transaction.carrier}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={transaction.status === \"completed\" ? \"default\" : \"secondary\"}>\n                            ${transaction.amount}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Employee Verification Dialog */}\n        <EmployeeVerificationDialog\n          isOpen={employeeVerification.isVerificationOpen}\n          onClose={employeeVerification.handleVerificationCancel}\n          onVerified={employeeVerification.handleVerificationSuccess}\n          operationType={employeeVerification.operationType}\n          operationDetails={employeeVerification.operationDetails}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":25491},"client/src/pages/admin/PlanManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { planManagementSchema, type PlanManagementRequest, type Plan } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Settings, Plus, Edit, Trash2, DollarSign, Zap, Globe, Phone, ArrowLeft, BarChart3 } from \"lucide-react\";\nimport { COUNTRIES, getCarriers } from \"@shared/countries\";\nimport PlanPerformanceSparkline from \"@/components/PlanPerformanceSparkline\";\n\nconst NEXITEL_CARRIERS = [\n  { value: \"nexitel-purple\", label: \"Nexitel Purple\", color: \"bg-purple-100 text-purple-800\" },\n  { value: \"nexitel-blue\", label: \"Nexitel Blue\", color: \"bg-blue-100 text-blue-800\" },\n];\n\nconst PLAN_TYPES = [\n  { value: \"prepaid\", label: \"Prepaid\" },\n  { value: \"data\", label: \"Data Only\" },\n  { value: \"voice\", label: \"Voice Only\" }, \n  { value: \"unlimited\", label: \"Unlimited\" },\n];\n\nconst DURATION_OPTIONS = [\n  { value: 1, label: \"1 Month\", color: \"bg-green-100 text-green-800\" },\n  { value: 3, label: \"3 Months\", color: \"bg-blue-100 text-blue-800\" },\n  { value: 6, label: \"6 Months\", color: \"bg-purple-100 text-purple-800\" },\n  { value: 12, label: \"12 Months\", color: \"bg-orange-100 text-orange-800\" },\n];\n\nexport default function ComprehensivePlanManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingPlan, setEditingPlan] = useState<Plan | null>(null);\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState<string>(\"nexitel\");\n\n  const form = useForm<PlanManagementRequest>({\n    resolver: zodResolver(planManagementSchema),\n    defaultValues: {\n      name: \"\",\n      carrier: \"\",\n      country: \"\",\n      denomination: \"\",\n      ourCost: \"0\",\n      serviceType: \"nexitel\",\n      planType: \"prepaid\",\n      description: \"\",\n      durationMonths: 1,\n      isPromotional: false,\n      originalPrice: undefined,\n      discountPercentage: undefined,\n      promotionalLabel: \"\",\n    },\n  });\n\n  // Fetch all plans\n  const { data: plans = [], isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/plans\"],\n  });\n\n  // Filter plans by service type\n  const nexitelPlans = plans.filter(plan => plan.serviceType === \"nexitel\");\n  const attPlans = plans.filter(plan => plan.serviceType === \"att\");\n  const nexitelRechargePlans = plans.filter(plan => plan.serviceType === \"nexitel_recharge\");\n  const attRechargePlans = plans.filter(plan => plan.serviceType === \"att_recharge\");\n  const globalRechargePlans = plans.filter(plan => plan.serviceType === \"global_recharge\");\n  const voipPlans = plans.filter(plan => plan.serviceType === \"voip\");\n\n  // Create/Update plan mutation\n  const planMutation = useMutation({\n    mutationFn: async (data: PlanManagementRequest) => {\n      console.log(\"MUTATION: Starting plan mutation with data:\", data);\n      const url = editingPlan ? `/api/plans/${editingPlan.id}` : \"/api/plans\";\n      const method = editingPlan ? \"PATCH\" : \"POST\";\n      console.log(`MUTATION: Making ${method} request to ${url}`);\n      \n      try {\n        const result = await apiRequest(url, { method, body: data });\n        console.log(\"MUTATION: API request successful:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"MUTATION: API request failed:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plans\"] });\n      toast({\n        title: editingPlan ? \"Plan updated\" : \"Plan created\",\n        description: `Plan ${editingPlan ? \"updated\" : \"created\"} successfully`,\n      });\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error(\"Plan mutation error:\", error);\n      console.error(\"Error details:\", {\n        message: error?.message,\n        status: error?.status,\n        response: error?.response,\n        stack: error?.stack\n      });\n      \n      // Show more specific error in toast\n      let errorMessage = \"Failed to save plan\";\n      if (typeof error.message === 'string') {\n        if (error.message.includes('401')) {\n          errorMessage = \"Authentication required. Please log in again.\";\n        } else if (error.message.includes('400')) {\n          errorMessage = \"Invalid form data. Please check all fields.\";\n        } else if (error.message.includes('500')) {\n          errorMessage = \"Server error. Please try again.\";\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete plan mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (planId: number) => {\n      return await apiRequest(`/api/plans/${planId}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plans\"] });\n      toast({\n        title: \"Plan deleted\",\n        description: \"Plan deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    form.reset();\n    setEditingPlan(null);\n  };\n\n  const handleEdit = (plan: Plan) => {\n    setEditingPlan(plan);\n    form.reset({\n      name: plan.name,\n      carrier: plan.carrier,\n      country: plan.country || \"United States\",\n      denomination: plan.denomination,\n      ourCost: plan.ourCost,\n      serviceType: plan.serviceType as \"nexitel\" | \"nexitel_recharge\" | \"att\" | \"att_recharge\" | \"global_recharge\" | \"voip\",\n      planType: plan.planType as \"prepaid\" | \"data\" | \"voice\" | \"unlimited\",\n      description: plan.description || \"\",\n      durationMonths: plan.durationMonths || 1,\n      isPromotional: plan.isPromotional || false,\n      originalPrice: plan.originalPrice || undefined,\n      discountPercentage: plan.discountPercentage || undefined,\n      promotionalLabel: plan.promotionalLabel || \"\",\n    });\n    setActiveTab(plan.serviceType === \"nexitel_recharge\" ? \"nexitel-recharge\" : \n                plan.serviceType === \"att_recharge\" ? \"att-recharge\" : \n                plan.serviceType);\n  };\n\n  const handleDelete = (planId: number) => {\n    if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n      deleteMutation.mutate(planId);\n    }\n  };\n\n  const onSubmit = (data: PlanManagementRequest) => {\n    // Auto-set country based on service type if not provided\n    const submissionData = {\n      ...data,\n      country: data.serviceType === \"nexitel\" ? \"United States\" : \n               data.serviceType === \"nexitel_recharge\" ? \"United States\" :\n               data.serviceType === \"att\" ? \"United States\" :\n               data.serviceType === \"att_recharge\" ? \"United States\" :\n               data.serviceType === \"voip\" ? \"United States\" : \n               data.country || \"United States\"\n    };\n    \n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Processed submission data:\", submissionData);\n    console.log(\"Form errors:\", form.formState.errors);\n    console.log(\"Form is valid:\", form.formState.isValid);\n    \n    planMutation.mutate(submissionData);\n  };\n\n  // Our cost for reference\n  const ourCost = form.watch(\"ourCost\") || 0;\n\n  const PlanTable = ({ plans, serviceType }: { plans: Plan[], serviceType: string }) => {\n    const isRechargeService = serviceType === \"nexitel_recharge\" || serviceType === \"att_recharge\";\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-lg font-semibold\">\n            {serviceType === \"nexitel\" && \"Nexitel Activation Plans\"}\n            {serviceType === \"att\" && \"AT&T Activation Plans\"}\n            {serviceType === \"nexitel_recharge\" && \"Nexitel Recharge Plans\"}\n            {serviceType === \"att_recharge\" && \"AT&T Recharge Plans\"}\n            {serviceType === \"global_recharge\" && \"Global Recharge Plans\"}\n            {serviceType === \"voip\" && \"VoIP Plans\"}\n          </h3>\n          {isRechargeService && (\n            <div className=\"text-sm text-gray-600 bg-blue-50 px-3 py-1 rounded-full\">\n              No retailer commission - direct service pricing\n            </div>\n          )}\n        </div>\n\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Name</TableHead>\n              <TableHead>Carrier</TableHead>\n              <TableHead>Denomination</TableHead>\n              <TableHead>Duration</TableHead>\n              {!isRechargeService && <TableHead>Retailer Price</TableHead>}\n              <TableHead>Service Cost</TableHead>\n              {!isRechargeService && <TableHead>Profit</TableHead>}\n              <TableHead>Type</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n        <TableBody>\n          {plans.map((plan) => {\n            const durationOption = DURATION_OPTIONS.find(d => d.value === (plan.durationMonths || 1));\n            return (\n              <TableRow key={plan.id}>\n                <TableCell className=\"font-medium\">\n                  <div>\n                    <div>{plan.name}</div>\n                    {plan.isPromotional && plan.promotionalLabel && (\n                      <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800 text-xs mt-1\">\n                        {plan.promotionalLabel}\n                      </Badge>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>{plan.carrier}</TableCell>\n                <TableCell>\n                  <div>\n                    <div>{plan.denomination}</div>\n                    {plan.isPromotional && plan.originalPrice && (\n                      <div className=\"text-xs text-gray-500\">\n                        <span className=\"line-through\">${plan.originalPrice}</span>\n                        {plan.discountPercentage && (\n                          <span className=\"text-green-600 ml-1\">\n                            ({plan.discountPercentage}% off)\n                          </span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className={durationOption?.color || \"bg-gray-100 text-gray-800\"}>\n                    {durationOption?.label || `${plan.durationMonths || 1} Month${(plan.durationMonths || 1) > 1 ? 's' : ''}`}\n                  </Badge>\n                </TableCell>\n                {!isRechargeService && (\n                  <TableCell className=\"text-green-600 font-semibold\">${plan.retailerPrice}</TableCell>\n                )}\n                <TableCell className=\"text-red-600 font-semibold\">${plan.ourCost}</TableCell>\n                {!isRechargeService && (\n                  <TableCell className=\"text-blue-600 font-semibold\">${plan.profit}</TableCell>\n                )}\n                <TableCell>\n                  <Badge variant=\"outline\">{plan.planType}</Badge>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex flex-col space-y-1\">\n                    <Badge variant={plan.isActive ? \"default\" : \"destructive\"}>\n                      {plan.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                    {plan.isPromotional && (\n                      <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800 text-xs\">\n                        Promo\n                      </Badge>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(plan)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(plan.id)}\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            onClick={() => window.location.href = \"/admin\"}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Plan Management</h1>\n          <p className=\"text-gray-600\">Manage pricing for all services with automatic profit calculation</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Add/Edit Plan Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                {editingPlan ? (\n                  <>\n                    <Edit className=\"w-5 h-5 text-blue-600 mr-2\" />\n                    Edit Plan\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"w-5 h-5 text-green-600 mr-2\" />\n                    Create New Plan\n                  </>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={(e) => {\n                  console.log(\"Form onSubmit triggered\");\n                  form.handleSubmit(onSubmit)(e);\n                }} className=\"space-y-4\">\n                  {/* Service Type */}\n                  <FormField\n                    control={form.control}\n                    name=\"serviceType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Service Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select service type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"nexitel\">\n                              <div className=\"flex items-center\">\n                                <Phone className=\"w-4 h-4 mr-2 text-purple-600\" />\n                                Nexitel Activation\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"nexitel_recharge\">\n                              <div className=\"flex items-center\">\n                                <Zap className=\"w-4 h-4 mr-2 text-blue-600\" />\n                                Nexitel Recharge\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"att\">\n                              <div className=\"flex items-center\">\n                                <Phone className=\"w-4 h-4 mr-2 text-red-600\" />\n                                AT&T Activation\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"att_recharge\">\n                              <div className=\"flex items-center\">\n                                <DollarSign className=\"w-4 h-4 mr-2 text-orange-600\" />\n                                AT&T Recharge\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"global_recharge\">\n                              <div className=\"flex items-center\">\n                                <Globe className=\"w-4 h-4 mr-2 text-green-600\" />\n                                Global Recharge\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"voip\">\n                              <div className=\"flex items-center\">\n                                <Zap className=\"w-4 h-4 mr-2 text-gray-600\" />\n                                VoIP Services\n                              </div>\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Plan Name */}\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Plan Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"e.g., Unlimited 30, Prepaid 25\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Carrier Selection - Show Nexitel options for Nexitel services */}\n                  {(form.watch(\"serviceType\") === \"nexitel\" || form.watch(\"serviceType\") === \"nexitel_recharge\") && (\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nexitel Network</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select Nexitel carrier\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {NEXITEL_CARRIERS.map((carrier) => (\n                                <SelectItem key={carrier.value} value={carrier.value}>\n                                  <div className=\"flex items-center\">\n                                    <div className={`w-3 h-3 rounded-full mr-2 ${carrier.color.split(' ')[0]}`}></div>\n                                    {carrier.label}\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Carrier Selection - Show AT&T options for AT&T services */}\n                  {(form.watch(\"serviceType\") === \"att\" || form.watch(\"serviceType\") === \"att_recharge\") && (\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>AT&T Service Type</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select AT&T service type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"att-prepaid\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-3 h-3 rounded-full mr-2 bg-orange-600\"></div>\n                                  AT&T Prepaid\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"att-postpaid\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-3 h-3 rounded-full mr-2 bg-orange-400\"></div>\n                                  AT&T Postpaid\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Auto-set country for recharge services */}\n                  {(form.watch(\"serviceType\") === \"nexitel_recharge\" || form.watch(\"serviceType\") === \"att_recharge\") && (\n                    <input type=\"hidden\" {...form.register(\"country\")} value=\"United States\" />\n                  )}\n\n                  {/* Country Selection for Global Recharge */}\n                  {form.watch(\"serviceType\") === \"global_recharge\" && (\n                    <FormField\n                      control={form.control}\n                      name=\"country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Country</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter country name (e.g., Canada, Mexico, Brazil)\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Carrier Selection for Global Recharge */}\n                  {form.watch(\"serviceType\") === \"global_recharge\" && (\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mobile Carrier</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter carrier name (e.g., Rogers, Telcel, Claro)\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Plan Type */}\n                  <FormField\n                    control={form.control}\n                    name=\"planType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Plan Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select plan type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {PLAN_TYPES.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                {type.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Denomination */}\n                  <FormField\n                    control={form.control}\n                    name=\"denomination\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Denomination</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"e.g., $30, $40, $50\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Pricing Fields - Different for Recharge vs Activation */}\n                  {(form.watch(\"serviceType\") === \"nexitel_recharge\" || form.watch(\"serviceType\") === \"att_recharge\") ? (\n                    <div className=\"space-y-4\">\n                      {/* Our Cost for Recharge Plans */}\n                      <FormField\n                        control={form.control}\n                        name=\"ourCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Our Cost ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                placeholder=\"0.00\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {/* Service Cost (Customer Price) for Recharge Plans */}\n                      <FormField\n                        control={form.control}\n                        name=\"denomination\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Service Cost - Customer Price ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                placeholder=\"0.00\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ) : (\n                    // Our Cost for Activation Plans\n                    <FormField\n                      control={form.control}\n                      name=\"ourCost\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Our Cost ($)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"0.01\"\n                              placeholder=\"0.00\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Pricing Note for Activation Plans */}\n                  {form.watch(\"serviceType\") !== \"nexitel_recharge\" && form.watch(\"serviceType\") !== \"att_recharge\" && (\n                    <div className=\"bg-blue-50 p-3 rounded-lg\">\n                      <div className=\"flex items-start\">\n                        <div className=\"w-4 h-4 text-blue-600 mt-0.5 mr-2\">ℹ️</div>\n                        <div>\n                          <p className=\"text-sm font-medium text-blue-900\">Retailer Pricing</p>\n                          <p className=\"text-xs text-blue-700 mt-1\">\n                            Retailer prices are set in Commission Management for each commission group. \n                            This allows different pricing tiers for different retailer categories.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Commission Groups for Activation Plans */}\n                  {(form.watch(\"serviceType\") === \"nexitel\" || form.watch(\"serviceType\") === \"att\") && (\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-blue-50 p-3 rounded-lg\">\n                        <div className=\"flex items-start\">\n                          <div className=\"w-4 h-4 text-blue-600 mt-0.5 mr-2\">👥</div>\n                          <div>\n                            <p className=\"text-sm font-medium text-blue-900\">Commission Groups for Activation Plans</p>\n                            <p className=\"text-xs text-blue-700 mt-1\">\n                              Set different pricing for different retailer groups. Create commission groups in Commission Management.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Commission Groups for Recharge Plans */}\n                  {(form.watch(\"serviceType\") === \"nexitel_recharge\" || form.watch(\"serviceType\") === \"att_recharge\") && (\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-blue-50 p-3 rounded-lg\">\n                        <div className=\"flex items-start\">\n                          <div className=\"w-4 h-4 text-blue-600 mt-0.5 mr-2\">👥</div>\n                          <div>\n                            <p className=\"text-sm font-medium text-blue-900\">Commission Groups for Recharge Plans</p>\n                            <p className=\"text-xs text-blue-700 mt-1\">\n                              Assign commission groups to give different retailers different pricing on this recharge plan.\n                              Use Commission Management to set up retailer-specific prices.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-orange-50 p-3 rounded-lg\">\n                        <div className=\"flex items-start\">\n                          <div className=\"w-4 h-4 text-orange-600 mt-0.5 mr-2\">💰</div>\n                          <div>\n                            <p className=\"text-sm font-medium text-orange-900\">Base Recharge Pricing</p>\n                            <p className=\"text-xs text-orange-700 mt-1\">\n                              This is the base pricing that applies when no commission group overrides are set.\n                            </p>\n                            <div className=\"bg-white p-2 rounded border border-orange-200 mt-2\">\n                              <div className=\"text-sm text-orange-800 space-y-1\">\n                                {(() => {\n                                  const ourCostValue = form.watch(\"ourCost\");\n                                  const denominationValue = form.watch(\"denomination\");\n                                  \n                                  const ourCost = typeof ourCostValue === 'number' ? ourCostValue : parseFloat(String(ourCostValue || \"0\"));\n                                  const customerPrice = typeof denominationValue === 'number' ? denominationValue : parseFloat(String(denominationValue || \"0\"));\n                                  const profit = Math.max(0, customerPrice - ourCost);\n                                  \n                                  return (\n                                    <>\n                                      <div><strong>Our Cost:</strong> ${ourCost.toFixed(2)}</div>\n                                      <div><strong>Customer Price:</strong> ${customerPrice.toFixed(2)}</div>\n                                      <div className=\"text-green-600 font-medium\">\n                                        <strong>Profit:</strong> ${profit.toFixed(2)}\n                                        {customerPrice > 0 && (\n                                          <span className=\"text-xs ml-1\">\n                                            ({Math.round((profit / customerPrice) * 100)}% margin)\n                                          </span>\n                                        )}\n                                      </div>\n                                    </>\n                                  );\n                                })()}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Duration (Multi-month Plans) */}\n                  <FormField\n                    control={form.control}\n                    name=\"durationMonths\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Plan Duration</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select duration\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {DURATION_OPTIONS.map((option) => (\n                              <SelectItem key={option.value} value={option.value.toString()}>\n                                <div className=\"flex items-center\">\n                                  <Badge variant=\"outline\" className={option.color}>\n                                    {option.label}\n                                  </Badge>\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Promotional Pricing Toggle */}\n                  <FormField\n                    control={form.control}\n                    name=\"isPromotional\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Promotional Pricing</FormLabel>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Enable discounted pricing for this plan\n                          </div>\n                        </div>\n                        <FormControl>\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4\"\n                            checked={field.value}\n                            onChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Promotional Fields (shown when promotional is enabled) */}\n                  {form.watch(\"isPromotional\") && (\n                    <div className=\"space-y-4 border-l-4 border-orange-200 pl-4 bg-orange-50 p-3 rounded-r-lg\">\n                      <h4 className=\"text-sm font-medium text-orange-800\">Promotional Details</h4>\n                      \n                      {/* Original Price */}\n                      <FormField\n                        control={form.control}\n                        name=\"originalPrice\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Original Price ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                placeholder=\"60.00 (e.g., 3 months @ $20 each)\"\n                                value={field.value || \"\"}\n                                onChange={(e) => field.onChange(e.target.value)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Discount Percentage */}\n                      <FormField\n                        control={form.control}\n                        name=\"discountPercentage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Discount Percentage (%)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                min=\"0\"\n                                max=\"100\"\n                                placeholder=\"16.67 (customer saves $10)\"\n                                value={field.value || \"\"}\n                                onChange={(e) => field.onChange(e.target.value)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Promotional Label */}\n                      <FormField\n                        control={form.control}\n                        name=\"promotionalLabel\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Promotional Label</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Save $10 on 3-month plan!\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Pricing Preview */}\n                      {form.watch(\"originalPrice\") && form.watch(\"discountPercentage\") && (\n                        <div className=\"bg-white p-3 rounded-lg border\">\n                          <div className=\"text-sm font-medium text-gray-800\">Pricing Preview:</div>\n                          <div className=\"flex justify-between items-center mt-1\">\n                            <span className=\"text-sm text-gray-600\">Original Price:</span>\n                            <span className=\"line-through text-red-600\">${form.watch(\"originalPrice\")}</span>\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-gray-600\">Sale Price:</span>\n                            <span className=\"text-green-600 font-semibold\">\n                              ${((parseFloat(form.watch(\"originalPrice\") || \"0\")) * (1 - (parseFloat(form.watch(\"discountPercentage\") || \"0\")) / 100)).toFixed(2)}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-gray-600\">Customer Saves:</span>\n                            <span className=\"text-blue-600 font-semibold\">\n                              ${((parseFloat(form.watch(\"originalPrice\") || \"0\")) * (parseFloat(form.watch(\"discountPercentage\") || \"0\")) / 100).toFixed(2)}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Description */}\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Plan features, data allowance, etc.\" \n                            rows={3}\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Submit Buttons */}\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button\n                      type=\"button\"\n                      disabled={planMutation.isPending}\n                      className=\"flex-1\"\n                      onClick={(e) => {\n                        try {\n                          console.log(\"=== CREATE PLAN BUTTON CLICKED ===\");\n                          \n                          // Get current form values\n                          const formValues = form.getValues();\n                          console.log(\"Form values:\", formValues);\n                          \n                          // Create submission data with auto-country logic\n                          const submissionData = {\n                            ...formValues,\n                            country: formValues.serviceType === \"nexitel\" ? \"United States\" : \n                                   formValues.serviceType === \"nexitel_recharge\" ? \"United States\" :\n                                   formValues.serviceType === \"att\" ? \"United States\" :\n                                   formValues.serviceType === \"att_recharge\" ? \"United States\" :\n                                   formValues.serviceType === \"voip\" ? \"United States\" : \n                                   formValues.country || \"United States\"\n                          };\n                          \n                          console.log(\"Submission data:\", submissionData);\n                          console.log(\"Calling planMutation.mutate...\");\n                          \n                          // Direct mutation call\n                          planMutation.mutate(submissionData);\n                          \n                        } catch (error) {\n                          console.error(\"Button click error:\", error);\n                          const errorMessage = error instanceof Error ? error.message : String(error);\n                          alert(\"Button click error: \" + errorMessage);\n                        }\n                      }}\n                    >\n                      {planMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          {editingPlan ? \"Updating...\" : \"Creating...\"}\n                        </>\n                      ) : (\n                        <>\n                          {editingPlan ? <Edit className=\"w-4 h-4 mr-2\" /> : <Plus className=\"w-4 h-4 mr-2\" />}\n                          {editingPlan ? \"Update Plan\" : \"Create Plan\"}\n                        </>\n                      )}\n                    </Button>\n                    \n                    {editingPlan && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={resetForm}\n                      >\n                        Cancel\n                      </Button>\n                    )}\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Plans Overview */}\n          <div className=\"lg:col-span-2\">\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-6\">\n                <TabsTrigger value=\"nexitel\" className=\"flex items-center\">\n                  <Phone className=\"w-4 h-4 mr-1\" />\n                  <span className=\"hidden sm:inline\">Nexitel</span> ({nexitelPlans.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"att\" className=\"flex items-center\">\n                  <Phone className=\"w-4 h-4 mr-1 text-red-600\" />\n                  <span className=\"hidden sm:inline\">AT&T</span> ({attPlans.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"nexitel_recharge\" className=\"flex items-center\">\n                  <Zap className=\"w-4 h-4 mr-1 text-blue-600\" />\n                  <span className=\"hidden sm:inline\">N-Recharge</span> ({nexitelRechargePlans.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"att_recharge\" className=\"flex items-center\">\n                  <DollarSign className=\"w-4 h-4 mr-1 text-orange-600\" />\n                  <span className=\"hidden sm:inline\">AT&T-R</span> ({attRechargePlans.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"global_recharge\" className=\"flex items-center\">\n                  <Globe className=\"w-4 h-4 mr-1\" />\n                  <span className=\"hidden sm:inline\">Global</span> ({globalRechargePlans.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"voip\" className=\"flex items-center\">\n                  <Zap className=\"w-4 h-4 mr-1\" />\n                  <span className=\"hidden sm:inline\">VoIP</span> ({voipPlans.length})\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"nexitel\" className=\"mt-6\">\n                <PlanTable plans={nexitelPlans} serviceType=\"nexitel\" />\n              </TabsContent>\n\n              <TabsContent value=\"att\" className=\"mt-6\">\n                <PlanTable plans={attPlans} serviceType=\"att\" />\n              </TabsContent>\n\n              <TabsContent value=\"nexitel_recharge\" className=\"mt-6\">\n                <PlanTable plans={nexitelRechargePlans} serviceType=\"nexitel_recharge\" />\n              </TabsContent>\n\n              <TabsContent value=\"att_recharge\" className=\"mt-6\">\n                <PlanTable plans={attRechargePlans} serviceType=\"att_recharge\" />\n              </TabsContent>\n\n              <TabsContent value=\"global_recharge\" className=\"mt-6\">\n                <PlanTable plans={globalRechargePlans} serviceType=\"global_recharge\" />\n              </TabsContent>\n\n              <TabsContent value=\"voip\" className=\"mt-6\">\n                <PlanTable plans={voipPlans} serviceType=\"voip\" />\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":48064},"client/src/pages/admin/Recharge.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { rechargeSchema, type RechargeRequest } from \"@shared/schema\";\nimport { REGIONS, COUNTRIES, getCountriesByRegion, getCarriers } from \"@shared/countries\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Smartphone, Crown, TrendingUp, Users } from \"lucide-react\";\n\nconst PRESET_AMOUNTS = [\n  { value: 10, label: \"$10\", description: \"Basic\" },\n  { value: 25, label: \"$25\", description: \"Standard\" },\n  { value: 50, label: \"$50\", description: \"Premium\" },\n  { value: 100, label: \"$100\", description: \"Super\" },\n];\n\nexport default function AdminRecharge() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAmount, setSelectedAmount] = useState<number>(25);\n  const [customAmount, setCustomAmount] = useState<string>(\"\");\n\n  const form = useForm<RechargeRequest>({\n    resolver: zodResolver(rechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      country: \"\",\n      carrier: \"\",\n      amount: 25,\n    },\n  });\n\n  const selectedCountry = form.watch(\"country\");\n  const availableCarriers = selectedCountry ? getCarriers(selectedCountry) : [];\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/analytics/overview\"],\n  });\n\n  const { data: allTransactions } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const rechargeTransactionMutation = useMutation({\n    mutationFn: async (data: RechargeRequest & { userId: number }) => {\n      const response = await apiRequest(\"/api/transactions\", { method: \"POST\", body: data });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/overview\"] });\n      form.reset();\n      setSelectedAmount(25);\n      setCustomAmount(\"\");\n      toast({\n        title: \"Admin Recharge Successful\",\n        description: `Transaction #TXN-${String(data.id).padStart(6, \"0\")} has been processed with admin privileges.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Failed to process recharge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RechargeRequest) => {\n    if (!user) return;\n    \n    const finalAmount = customAmount ? parseFloat(customAmount) : selectedAmount;\n    rechargeTransactionMutation.mutate({\n      ...data,\n      amount: finalAmount,\n      userId: user.id,\n    });\n  };\n\n  const handleAmountSelect = (amount: number) => {\n    setSelectedAmount(amount);\n    setCustomAmount(\"\");\n    form.setValue(\"amount\", amount);\n  };\n\n  const handleCustomAmountChange = (value: string) => {\n    setCustomAmount(value);\n    if (value) {\n      const amount = parseFloat(value);\n      if (!isNaN(amount)) {\n        form.setValue(\"amount\", amount);\n      }\n    }\n  };\n\n  const getDisplayAmount = () => {\n    return customAmount ? parseFloat(customAmount) || 0 : selectedAmount;\n  };\n\n  const getServiceFee = () => {\n    return (getDisplayAmount() * 0.05).toFixed(2); // Admin gets better rates\n  };\n\n  const getTotalAmount = () => {\n    return (getDisplayAmount() + parseFloat(getServiceFee())).toFixed(2);\n  };\n\n  const safeAllTransactions = Array.isArray(allTransactions) ? allTransactions : [];\n  const todayTransactions = safeAllTransactions.filter((t: any) => {\n    const today = new Date();\n    const transactionDate = new Date(t.createdAt);\n    return transactionDate.toDateString() === today.toDateString();\n  }) || [];\n\n  const todayRevenue = todayTransactions\n    .filter((t: any) => t.status === \"completed\")\n    .reduce((sum: number, t: any) => sum + parseFloat(t.totalAmount), 0);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n          <Crown className=\"w-6 h-6 text-red-600 mr-2\" />\n          Admin Mobile Recharge\n        </h1>\n        <p className=\"text-gray-600\">Full access international mobile phone recharge with admin privileges</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Admin Stats */}\n        <div className=\"lg:col-span-3 grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">System Revenue</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    ${(analytics as any)?.totalRevenue || \"0.00\"}\n                  </p>\n                  <p className=\"text-sm text-red-600\">Total earnings</p>\n                </div>\n                <div className=\"bg-red-100 p-3 rounded-full\">\n                  <TrendingUp className=\"w-6 h-6 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Today's Transactions</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {todayTransactions.length}\n                  </p>\n                  <p className=\"text-sm text-blue-600\">System-wide</p>\n                </div>\n                <div className=\"bg-blue-100 p-3 rounded-full\">\n                  <Smartphone className=\"w-6 h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Today's Revenue</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    ${todayRevenue.toFixed(2)}\n                  </p>\n                  <p className=\"text-sm text-green-600\">Daily earnings</p>\n                </div>\n                <div className=\"bg-green-100 p-3 rounded-full\">\n                  <Users className=\"w-6 h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recharge Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Crown className=\"w-5 h-5 text-red-600 mr-2\" />\n                Admin Recharge Console\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Select Country</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Choose a country...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent className=\"max-h-80\">\n                            {REGIONS.map((region) => {\n                              const regionCountries = getCountriesByRegion(region);\n                              return (\n                                <div key={region}>\n                                  <div className=\"px-2 py-1.5 text-sm font-semibold text-gray-900 bg-gray-100 sticky top-0\">\n                                    {region}\n                                  </div>\n                                  {regionCountries.map((country) => (\n                                    <SelectItem key={country.code} value={country.code}>\n                                      <span className=\"flex items-center\">\n                                        <span className=\"mr-2\">{country.flag}</span>\n                                        {country.name}\n                                      </span>\n                                    </SelectItem>\n                                  ))}\n                                </div>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phoneNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"carrier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mobile Carrier</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select carrier...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableCarriers.map((carrier) => (\n                              <SelectItem key={carrier} value={carrier}>\n                                {carrier}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                      Recharge Amount\n                    </FormLabel>\n                    <div className=\"grid grid-cols-2 gap-3 mb-3\">\n                      {PRESET_AMOUNTS.map((preset) => (\n                        <Button\n                          key={preset.value}\n                          type=\"button\"\n                          variant={selectedAmount === preset.value && !customAmount ? \"default\" : \"outline\"}\n                          className={`p-3 text-center ${\n                            selectedAmount === preset.value && !customAmount\n                              ? \"bg-red-600 hover:bg-red-700\"\n                              : \"hover:border-red-600 hover:bg-red-50\"\n                          }`}\n                          onClick={() => handleAmountSelect(preset.value)}\n                        >\n                          <div className=\"font-medium\">{preset.label}</div>\n                          <div className=\"text-xs opacity-75\">{preset.description}</div>\n                        </Button>\n                      ))}\n                    </div>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Custom amount\"\n                      value={customAmount}\n                      onChange={(e) => handleCustomAmountChange(e.target.value)}\n                      className=\"focus:ring-red-600 focus:border-red-600\"\n                    />\n                  </div>\n\n                  <div className=\"bg-red-50 p-4 rounded-md border border-red-200\">\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Recharge Amount:</span>\n                      <span>${getDisplayAmount().toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Admin Service Fee (5):</span>\n                      <span>${getServiceFee()}</span>\n                    </div>\n                    <div className=\"border-t border-red-200 pt-2 flex justify-between font-medium\">\n                      <span>Total:</span>\n                      <span>${getTotalAmount()}</span>\n                    </div>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-red-600 hover:bg-red-700\"\n                    disabled={rechargeTransactionMutation.isPending}\n                  >\n                    <Crown className=\"w-4 h-4 mr-2\" />\n                    {rechargeTransactionMutation.isPending ? \"Processing...\" : \"Process Admin Recharge\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent System Activity */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {safeAllTransactions.slice(0, 5).map((transaction: any) => (\n                  <div\n                    key={transaction.id}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\"\n                  >\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {transaction.phoneNumber}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {transaction.carrier} - ${transaction.amount}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge\n                        variant={\n                          transaction.status === \"completed\"\n                            ? \"default\"\n                            : transaction.status === \"pending\"\n                            ? \"secondary\"\n                            : \"destructive\"\n                        }\n                      >\n                        {transaction.status}\n                      </Badge>\n                      <div className=\"text-xs text-gray-500\">\n                        #{String(transaction.id).padStart(6, \"0\")}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {!safeAllTransactions.length && (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    No transactions yet\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15778},"client/src/pages/admin/RetailerATTPermissions.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Loader2, Settings, Shield, Users } from \"lucide-react\";\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\n\ninterface ATTPermissions {\n  id: number;\n  userId: number;\n  canActivate: boolean;\n  canRecharge: boolean;\n  canSimSwap: boolean;\n  canSellDataAddons: boolean;\n  canPortIn: boolean;\n  canEnableWifiCalling: boolean;\n  canBulkActivate: boolean;\n  maxDailyActivations: number;\n  maxDailyRecharges: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function RetailerATTPermissions() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRetailer, setSelectedRetailer] = useState<User | null>(null);\n\n  // Get all retailers\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const retailers = users.filter(user => user.role === 'retailer');\n\n  // Get AT&T permissions for selected retailer\n  const { data: permissions, isLoading: permissionsLoading } = useQuery<ATTPermissions>({\n    queryKey: [\"/api/att/permissions\", selectedRetailer?.id],\n    enabled: !!selectedRetailer,\n  });\n\n  // Update permissions mutation\n  const updatePermissionsMutation = useMutation({\n    mutationFn: async (updates: Partial<ATTPermissions>) => {\n      if (!selectedRetailer) throw new Error(\"No retailer selected\");\n      return await apiRequest(`/api/att/permissions/${selectedRetailer.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(updates),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/att/permissions\", selectedRetailer?.id] });\n      toast({\n        title: \"Success\",\n        description: \"AT&T permissions updated successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Permission update error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update AT&T permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePermissionChange = (field: keyof ATTPermissions, value: boolean | number) => {\n    if (!permissions) return;\n    \n    const updates = { [field]: value };\n    updatePermissionsMutation.mutate(updates);\n  };\n\n  if (usersLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <Shield className=\"h-8 w-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">Retailer AT&T Permissions</h1>\n          <p className=\"text-gray-600\">Manage AT&T service access permissions for retailer users</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Retailer Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Select Retailer\n            </CardTitle>\n            <CardDescription>Choose a retailer to manage their AT&T permissions</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {retailers.length === 0 ? (\n              <p className=\"text-gray-500 text-sm\">No retailer users found</p>\n            ) : (\n              retailers.map((retailer) => (\n                <Button\n                  key={retailer.id}\n                  variant={selectedRetailer?.id === retailer.id ? \"default\" : \"outline\"}\n                  className=\"w-full justify-start\"\n                  onClick={() => setSelectedRetailer(retailer)}\n                >\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">{retailer.username}</div>\n                    <div className=\"text-sm text-gray-500\">{retailer.email}</div>\n                  </div>\n                </Button>\n              ))\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Permissions Configuration */}\n        {selectedRetailer && (\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                AT&T Permissions for {selectedRetailer.username}\n              </CardTitle>\n              <CardDescription>Configure what AT&T services this retailer can access</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {permissionsLoading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : permissions ? (\n                <div className=\"space-y-6\">\n                  {/* Service Permissions */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-lg border-b pb-2\">Service Access</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canActivate\" className=\"text-sm font-medium\">\n                          Activation Services\n                        </Label>\n                        <Switch\n                          id=\"canActivate\"\n                          checked={permissions.canActivate}\n                          onCheckedChange={(checked) => handlePermissionChange('canActivate', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canRecharge\" className=\"text-sm font-medium\">\n                          Recharge Services\n                        </Label>\n                        <Switch\n                          id=\"canRecharge\"\n                          checked={permissions.canRecharge}\n                          onCheckedChange={(checked) => handlePermissionChange('canRecharge', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canSimSwap\" className=\"text-sm font-medium\">\n                          SIM Swap Services\n                        </Label>\n                        <Switch\n                          id=\"canSimSwap\"\n                          checked={permissions.canSimSwap}\n                          onCheckedChange={(checked) => handlePermissionChange('canSimSwap', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canSellDataAddons\" className=\"text-sm font-medium\">\n                          Data Add-ons\n                        </Label>\n                        <Switch\n                          id=\"canSellDataAddons\"\n                          checked={permissions.canSellDataAddons}\n                          onCheckedChange={(checked) => handlePermissionChange('canSellDataAddons', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canPortIn\" className=\"text-sm font-medium\">\n                          Port-In Services\n                        </Label>\n                        <Switch\n                          id=\"canPortIn\"\n                          checked={permissions.canPortIn}\n                          onCheckedChange={(checked) => handlePermissionChange('canPortIn', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canEnableWifiCalling\" className=\"text-sm font-medium\">\n                          WiFi Calling\n                        </Label>\n                        <Switch\n                          id=\"canEnableWifiCalling\"\n                          checked={permissions.canEnableWifiCalling}\n                          onCheckedChange={(checked) => handlePermissionChange('canEnableWifiCalling', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Label htmlFor=\"canBulkActivate\" className=\"text-sm font-medium\">\n                          Bulk Activation\n                        </Label>\n                        <Switch\n                          id=\"canBulkActivate\"\n                          checked={permissions.canBulkActivate}\n                          onCheckedChange={(checked) => handlePermissionChange('canBulkActivate', checked)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Daily Limits */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-lg border-b pb-2\">Daily Limits</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"maxDailyActivations\" className=\"text-sm font-medium\">\n                          Max Daily Activations\n                        </Label>\n                        <Input\n                          id=\"maxDailyActivations\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"1000\"\n                          value={permissions.maxDailyActivations}\n                          onChange={(e) => handlePermissionChange('maxDailyActivations', parseInt(e.target.value) || 100)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"maxDailyRecharges\" className=\"text-sm font-medium\">\n                          Max Daily Recharges\n                        </Label>\n                        <Input\n                          id=\"maxDailyRecharges\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"1000\"\n                          value={permissions.maxDailyRecharges}\n                          onChange={(e) => handlePermissionChange('maxDailyRecharges', parseInt(e.target.value) || 500)}\n                          disabled={updatePermissionsMutation.isPending}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Permission Status */}\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-2\">Permission Status</h4>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <div>Created: {new Date(permissions.createdAt).toLocaleString()}</div>\n                      <div>Last Updated: {new Date(permissions.updatedAt).toLocaleString()}</div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center p-8 text-gray-500\">\n                  <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Failed to load AT&T permissions</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Instructions */}\n        {!selectedRetailer && (\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle>Getting Started</CardTitle>\n              <CardDescription>How to manage retailer AT&T permissions</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">1</div>\n                  <div>\n                    <h4 className=\"font-medium\">Select a Retailer</h4>\n                    <p className=\"text-sm text-gray-600\">Choose a retailer user from the list to configure their AT&T service permissions.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">2</div>\n                  <div>\n                    <h4 className=\"font-medium\">Configure Permissions</h4>\n                    <p className=\"text-sm text-gray-600\">Enable or disable specific AT&T services and set daily usage limits for the retailer.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-medium\">3</div>\n                  <div>\n                    <h4 className=\"font-medium\">Apply Changes</h4>\n                    <p className=\"text-sm text-gray-600\">Changes are automatically saved when you toggle permissions or update limits.</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14534},"client/src/pages/admin/RetailerManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Search, \n  Eye, \n  DollarSign,\n  Store,\n  Users,\n  Upload,\n  FileText,\n  Wallet,\n  CreditCard,\n  Shield\n} from \"lucide-react\";\nimport { \n  insertUserSchema, \n  insertUserWalletPermissionSchema,\n  type User, \n  type CommissionGroup, \n  type RetailerDocument,\n  type InsertUserWalletPermission,\n  type UserWalletPermission\n} from \"@shared/schema\";\n\ninterface ATTPermissions {\n  id: number;\n  userId: number;\n  canActivate: boolean;\n  canRecharge: boolean;\n  canSimSwap: boolean;\n  canSellDataAddons: boolean;\n  canPortIn: boolean;\n  canEnableWifiCalling: boolean;\n  canBulkActivate: boolean;\n  maxDailyActivations: number;\n  maxDailyRecharges: number;\n}\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { RetailerDocumentUploader } from \"@/components/RetailerDocumentUploader\";\nimport { RetailerPermissionsDialog } from \"@/components/RetailerPermissionsDialog\";\nimport { z } from \"zod\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\n\nconst retailerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  canAddFunds: z.boolean().default(false),\n  maxDailyFunding: z.string().optional(),\n  maxMonthlyFunding: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RetailerFormData = z.infer<typeof retailerSchema>;\n\nexport default function RetailerManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRetailer, setSelectedRetailer] = useState<User | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDocumentDialog, setShowDocumentDialog] = useState(false);\n  const [selectedDocumentType, setSelectedDocumentType] = useState<string>(\"\");\n  const [showWalletDialog, setShowWalletDialog] = useState(false);\n  const [showPermissions, setShowPermissions] = useState(false);\n  const [permissionsRetailer, setPermissionsRetailer] = useState<User | null>(null);\n\n  const { toast } = useToast();\n\n  const form = useForm<RetailerFormData>({\n    resolver: zodResolver(retailerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      role: \"retailer\",\n      employeeRole: \"\",\n      balance: \"0.00\",\n      isActive: true,\n      commissionGroupId: undefined,\n      canAddFunds: false,\n      maxDailyFunding: \"\",\n      maxMonthlyFunding: \"\",\n    },\n  });\n\n  // Fetch retailers\n  const { data: retailers = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users/role/retailer\"],\n  });\n\n  // Fetch commission groups\n  const { data: commissionGroups = [] } = useQuery<CommissionGroup[]>({\n    queryKey: [\"/api/admin/commission-groups\"],\n  });\n\n  // Create retailer mutation\n  const createRetailerMutation = useMutation({\n    mutationFn: async (data: RetailerFormData) => {\n      const { confirmPassword, ...retailerData } = data;\n      return await apiRequest(\"/api/users\", { method: \"POST\", body: retailerData });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/role/retailer\"] });\n      toast({\n        title: \"Success\",\n        description: \"Retailer created successfully\",\n      });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update retailer mutation\n  const updateRetailerMutation = useMutation({\n    mutationFn: async (data: RetailerFormData) => {\n      const { confirmPassword, password, canAddFunds, maxDailyFunding, maxMonthlyFunding, ...updateData } = data;\n      const payload = password ? { ...updateData, password } : updateData;\n      return await apiRequest(`/api/users/${selectedRetailer?.id}`, { method: \"PATCH\", body: payload });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/role/retailer\"] });\n      toast({\n        title: \"Success\",\n        description: \"Retailer updated successfully\",\n      });\n      setDialogOpen(false);\n      form.reset();\n      setSelectedRetailer(null);\n      setIsEditing(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete retailer mutation\n  const deleteRetailerMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(`/api/users/${id}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/role/retailer\"] });\n      toast({\n        title: \"Success\",\n        description: \"Retailer deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete retailer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RetailerFormData) => {\n    if (isEditing && selectedRetailer) {\n      updateRetailerMutation.mutate(data);\n    } else {\n      createRetailerMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (retailer: User) => {\n    setSelectedRetailer(retailer);\n    setIsEditing(true);\n    form.reset({\n      username: retailer.username,\n      password: \"\",\n      confirmPassword: \"\",\n      email: retailer.email || \"\",\n      role: \"retailer\",\n      employeeRole: retailer.employeeRole || \"\",\n      balance: retailer.balance || \"0.00\",\n      isActive: retailer.isActive || false,\n      commissionGroupId: retailer.commissionGroupId || undefined,\n      canAddFunds: false, // Will be loaded separately from permissions\n      maxDailyFunding: \"\",\n      maxMonthlyFunding: \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this retailer?\")) {\n      deleteRetailerMutation.mutate(id);\n    }\n  };\n\n  const openCreateDialog = () => {\n    setIsEditing(false);\n    setSelectedRetailer(null);\n    form.reset({\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      role: \"retailer\",\n      employeeRole: \"\",\n      balance: \"0.00\",\n      isActive: true,\n      commissionGroupId: undefined,\n      canAddFunds: false,\n      maxDailyFunding: \"\",\n      maxMonthlyFunding: \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const filteredRetailers = retailers.filter((retailer: User) =>\n    retailer.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    retailer.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const totalBalance = retailers.reduce((sum: number, retailer: User) => \n    sum + parseFloat(retailer.balance || \"0\"), 0\n  );\n\n  const getCommissionGroupName = (commissionGroupId: number | null | undefined) => {\n    if (!commissionGroupId) return \"Not Assigned\";\n    const group = commissionGroups.find(g => g.id === commissionGroupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Retailer Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage retailer accounts and portal balances\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Retailers</CardTitle>\n            <Store className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{retailers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active retailer partners\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Retailers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {retailers.filter((r: User) => r.isActive).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently active accounts\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Balance</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${totalBalance.toFixed(2)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Combined retailer balances\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Search className=\"h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search retailers...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-64\"\n          />\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={openCreateDialog}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Retailer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {isEditing ? \"Edit Retailer\" : \"Create New Retailer\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        Password {isEditing && \"(leave empty to keep current)\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter password\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Confirm password\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"commissionGroupId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Commission Group</FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} \n                        value={field.value?.toString() || \"\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select commission group\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {commissionGroups.map((group) => (\n                            <SelectItem key={group.id} value={group.id.toString()}>\n                              {group.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"balance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Initial Balance</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\"\n                          placeholder=\"0.00\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Wallet Funding Permissions */}\n                <div className=\"space-y-4 border-t pt-4\">\n                  <h4 className=\"text-sm font-medium\">Wallet Funding Permissions</h4>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"canAddFunds\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Allow Self-Funding</FormLabel>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Enable retailer to add funds to their wallet\n                          </div>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {form.watch(\"canAddFunds\") && (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"maxDailyFunding\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Daily Funding Limit ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                min=\"0\"\n                                placeholder=\"No limit\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"maxMonthlyFunding\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Monthly Funding Limit ($)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                min=\"0\"\n                                placeholder=\"No limit\"\n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </>\n                  )}\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createRetailerMutation.isPending || updateRetailerMutation.isPending}\n                  >\n                    {isEditing ? \"Update\" : \"Create\"} Retailer\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Retailers Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Retailers</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-4\">Loading retailers...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Username</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Commission Group</TableHead>\n                  <TableHead>Balance</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRetailers.map((retailer: User) => (\n                  <TableRow key={retailer.id}>\n                    <TableCell className=\"font-medium\">\n                      {retailer.username}\n                    </TableCell>\n                    <TableCell>{retailer.email}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {getCommissionGroupName(retailer.commissionGroupId)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"font-mono\">\n                        ${parseFloat(retailer.balance || \"0\").toFixed(2)}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={retailer.isActive ? \"default\" : \"secondary\"}>\n                        {retailer.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {retailer.createdAt ? new Date(retailer.createdAt).toLocaleDateString() : \"N/A\"}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(retailer)}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(retailer.id)}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedRetailer(retailer);\n                            setShowDocumentDialog(true);\n                          }}\n                        >\n                          <Upload className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedRetailer(retailer);\n                            setShowWalletDialog(true);\n                          }}\n                        >\n                          <Wallet className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setPermissionsRetailer(retailer);\n                            setShowPermissions(true);\n                          }}\n                          title=\"All Service Permissions\"\n                        >\n                          <Shield className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Document Upload Dialog */}\n      <DocumentUploadDialog \n        retailer={selectedRetailer}\n        open={showDocumentDialog}\n        onClose={() => setShowDocumentDialog(false)}\n      />\n\n      {/* Wallet Permissions Dialog */}\n      <WalletPermissionsDialog \n        retailer={selectedRetailer}\n        open={showWalletDialog}\n        onClose={() => setShowWalletDialog(false)}\n      />\n\n      {/* Retailer Permissions Dialog */}\n      <RetailerPermissionsDialog\n        retailer={permissionsRetailer}\n        open={showPermissions}\n        onClose={() => {\n          setShowPermissions(false);\n          setPermissionsRetailer(null);\n        }}\n      />\n\n\n    </div>\n  );\n}\n\n// Document types for retailer uploads\nconst DOCUMENT_TYPES = [\n  { value: \"reseller_certificate\", label: \"Reseller Certificate\" },\n  { value: \"business_certificate\", label: \"Business Certificate\" },\n  { value: \"ein_certificate\", label: \"EIN Certificate\" },\n  { value: \"ach_sign_form\", label: \"ACH Sign Form\" },\n  { value: \"dealer_agreement\", label: \"Dealer Agreement\" }\n] as const;\n\n// Document Upload Dialog Component\nfunction DocumentUploadDialog({ \n  retailer, \n  open, \n  onClose \n}: { \n  retailer: User | null; \n  open: boolean; \n  onClose: () => void; \n}) {\n  // Fetch retailer documents\n  const { data: documents = [], refetch: refetchDocuments } = useQuery<RetailerDocument[]>({\n    queryKey: [`/api/retailer-documents/${retailer?.id}`],\n    enabled: !!retailer?.id && open\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5\" />\n            Document Management - {retailer?.username}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"mt-4\">\n          {retailer && (\n            <RetailerDocumentUploader\n              retailerId={retailer.id}\n              documents={documents}\n              onDocumentUploaded={refetchDocuments}\n              showDownloadButtons={true}\n            />\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Wallet Permissions Dialog Component\nfunction WalletPermissionsDialog({ \n  retailer, \n  open, \n  onClose \n}: { \n  retailer: User | null; \n  open: boolean; \n  onClose: () => void; \n}) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const walletForm = useForm<InsertUserWalletPermission>({\n    resolver: zodResolver(insertUserWalletPermissionSchema),\n    defaultValues: {\n      canAddFunds: false,\n      maxDailyFunding: \"0\",\n      maxMonthlyFunding: \"0\",\n    }\n  });\n\n  // Fetch current wallet permissions\n  const { data: currentPermissions, refetch } = useQuery<UserWalletPermission>({\n    queryKey: [`/api/wallet/permissions/${retailer?.id}`],\n    enabled: !!retailer?.id && open\n  });\n\n  // Update form when permissions are loaded\n  useEffect(() => {\n    if (currentPermissions) {\n      walletForm.reset({\n        userId: retailer?.id,\n        canAddFunds: currentPermissions.canAddFunds || false,\n        maxDailyFunding: currentPermissions.maxDailyFunding || \"0\",\n        maxMonthlyFunding: currentPermissions.maxMonthlyFunding || \"0\",\n      });\n    } else if (retailer?.id) {\n      walletForm.reset({\n        userId: retailer.id,\n        canAddFunds: false,\n        maxDailyFunding: \"0\",\n        maxMonthlyFunding: \"0\",\n      });\n    }\n  }, [currentPermissions, retailer, walletForm]);\n\n  const saveWalletPermissions = useMutation({\n    mutationFn: async (data: InsertUserWalletPermission) => {\n      if (!retailer?.id) throw new Error(\"No retailer selected\");\n      \n      // Check if permissions exist\n      if (currentPermissions) {\n        return apiRequest(`/api/wallet/permissions/${retailer.id}`, { method: \"PUT\", body: data });\n      } else {\n        return apiRequest(\"/api/wallet/permissions\", { method: \"POST\", body: { ...data, userId: retailer.id } });\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Wallet permissions updated successfully\",\n      });\n      refetch();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update wallet permissions\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmitWalletPermissions = (data: InsertUserWalletPermission) => {\n    saveWalletPermissions.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Wallet Permissions - {retailer?.username}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...walletForm}>\n          <form onSubmit={walletForm.handleSubmit(onSubmitWalletPermissions)} className=\"space-y-4\">\n            <FormField\n              control={walletForm.control}\n              name=\"canAddFunds\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Allow Wallet Funding</FormLabel>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Enable this retailer to add funds to their wallet using payment cards\n                    </div>\n                  </div>\n                  <FormControl>\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"w-5 h-5\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={walletForm.control}\n              name=\"maxDailyFunding\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Maximum Daily Funding Limit ($)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"0\" \n                      step=\"0.01\"\n                      placeholder=\"Enter daily limit (0 = no limit)\"\n                      {...field}\n                      value={field.value || \"\"}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={walletForm.control}\n              name=\"maxMonthlyFunding\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Maximum Monthly Funding Limit ($)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"0\" \n                      step=\"0.01\"\n                      placeholder=\"Enter monthly limit (0 = no limit)\"\n                      {...field}\n                      value={field.value || \"\"}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={saveWalletPermissions.isPending}\n              >\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                {saveWalletPermissions.isPending ? \"Saving...\" : \"Save Permissions\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":31446},"client/src/pages/admin/RetailerPermissions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, DollarSign, Users, CheckCircle, XCircle, Edit2 } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface UserWalletPermission {\n  id: number;\n  userId: number;\n  canAddFunds: boolean;\n  maxDailyFunding: string | null;\n  maxMonthlyFunding: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ATTPermissions {\n  id: number;\n  userId: number;\n  canActivate: boolean;\n  canRecharge: boolean;\n  canSimSwap: boolean;\n  canSellDataAddons: boolean;\n  canPortIn: boolean;\n  canEnableWifiCalling: boolean;\n  canBulkActivate: boolean;\n  maxDailyActivations: number;\n  maxDailyRecharges: number;\n}\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n  balance: string;\n  isActive: boolean;\n}\n\nexport default function RetailerPermissions() {\n  const { toast } = useToast();\n  const [selectedRetailer, setSelectedRetailer] = useState<User | null>(null);\n  const [isPermissionDialogOpen, setIsPermissionDialogOpen] = useState(false);\n  \n  // AT&T Permissions state\n  const [attPermissions, setAttPermissions] = useState<ATTPermissions | null>(null);\n  const [canActivate, setCanActivate] = useState(false);\n  const [canRecharge, setCanRecharge] = useState(false);\n  const [canSimSwap, setCanSimSwap] = useState(false);\n  const [canSellDataAddons, setCanSellDataAddons] = useState(false);\n  const [canPortIn, setCanPortIn] = useState(false);\n  const [canEnableWifiCalling, setCanEnableWifiCalling] = useState(false);\n  const [canBulkActivate, setCanBulkActivate] = useState(false);\n  const [maxDailyActivations, setMaxDailyActivations] = useState(\"50\");\n  const [maxDailyRecharges, setMaxDailyRecharges] = useState(\"100\");\n\n  // Get all retailers\n  const { data: retailers = [], isLoading: loadingRetailers } = useQuery<User[]>({\n    queryKey: [\"/api/users/role/retailer\"],\n  });\n\n  // Get all AT&T permissions - we'll fetch individually for now\n  const { data: permissions = [], isLoading: loadingPermissions } = useQuery<ATTPermissions[]>({\n    queryKey: [\"/api/att/permissions/all\"],\n    enabled: false, // We'll fetch individual permissions instead\n  });\n\n  const updatePermissionMutation = useMutation({\n    mutationFn: async (data: ATTPermissions) => {\n      const response = await fetch(`/api/att/permissions/${data.userId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          canActivate: data.canActivate,\n          canRecharge: data.canRecharge,\n          canSimSwap: data.canSimSwap,\n          canSellDataAddons: data.canSellDataAddons,\n          canPortIn: data.canPortIn,\n          canEnableWifiCalling: data.canEnableWifiCalling,\n          canBulkActivate: data.canBulkActivate,\n          maxDailyActivations: data.maxDailyActivations,\n          maxDailyRecharges: data.maxDailyRecharges,\n        }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update AT&T permissions\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AT&T permissions updated successfully\",\n      });\n      setIsPermissionDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update AT&T permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedRetailer(null);\n    setAttPermissions(null);\n    setCanActivate(false);\n    setCanRecharge(false);\n    setCanSimSwap(false);\n    setCanSellDataAddons(false);\n    setCanPortIn(false);\n    setCanEnableWifiCalling(false);\n    setCanBulkActivate(false);\n    setMaxDailyActivations(\"50\");\n    setMaxDailyRecharges(\"100\");\n  };\n\n  const handleEditPermissions = async (retailer: User) => {\n    setSelectedRetailer(retailer);\n    \n    // Fetch AT&T permissions for this retailer\n    try {\n      console.log(\"Fetching AT&T permissions for retailer:\", retailer.id);\n      const response = await fetch(`/api/att/permissions/${retailer.id}`);\n      if (response.ok) {\n        const attPerms = await response.json();\n        console.log(\"AT&T permissions fetched:\", attPerms);\n        setAttPermissions(attPerms);\n        \n        // Set form values from fetched permissions\n        setCanActivate(attPerms.canActivate);\n        setCanRecharge(attPerms.canRecharge);\n        setCanSimSwap(attPerms.canSimSwap);\n        setCanSellDataAddons(attPerms.canSellDataAddons);\n        setCanPortIn(attPerms.canPortIn);\n        setCanEnableWifiCalling(attPerms.canEnableWifiCalling);\n        setCanBulkActivate(attPerms.canBulkActivate);\n        setMaxDailyActivations(attPerms.maxDailyActivations.toString());\n        setMaxDailyRecharges(attPerms.maxDailyRecharges.toString());\n      } else {\n        console.log(\"AT&T permissions not found, using defaults\");\n        setAttPermissions(null);\n        // Set default values\n        setCanActivate(false);\n        setCanRecharge(false);\n        setCanSimSwap(false);\n        setCanSellDataAddons(false);\n        setCanPortIn(false);\n        setCanEnableWifiCalling(false);\n        setCanBulkActivate(false);\n        setMaxDailyActivations(\"50\");\n        setMaxDailyRecharges(\"100\");\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch AT&T permissions:\", error);\n      setAttPermissions(null);\n    }\n    \n    setIsPermissionDialogOpen(true);\n  };\n\n  const handleSavePermissions = () => {\n    if (!selectedRetailer) return;\n\n    const data: ATTPermissions = {\n      id: attPermissions?.id || 0,\n      userId: selectedRetailer.id,\n      canActivate,\n      canRecharge,\n      canSimSwap,\n      canSellDataAddons,\n      canPortIn,\n      canEnableWifiCalling,\n      canBulkActivate,\n      maxDailyActivations: parseInt(maxDailyActivations) || 50,\n      maxDailyRecharges: parseInt(maxDailyRecharges) || 100,\n    };\n\n    updatePermissionMutation.mutate(data);\n  };\n\n  const getPermissionForRetailer = (retailerId: number): ATTPermissions | undefined => {\n    return attPermissions && attPermissions.userId === retailerId ? attPermissions : undefined;\n  };\n\n  if (loadingRetailers || loadingPermissions) {\n    return (\n      <div className=\"container mx-auto p-4 space-y-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Settings className=\"w-8 h-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">AT&T Retailer Permissions</h1>\n            <p className=\"text-gray-600\">Control AT&T service access and limits for each retailer</p>\n          </div>\n        </div>\n        <div className=\"text-center py-8\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <Settings className=\"w-8 h-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">AT&T Retailer Permissions</h1>\n          <p className=\"text-gray-600\">Control AT&T service access and limits for each retailer</p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {(retailers as User[]).map((retailer: User) => {\n          \n          return (\n            <Card key={retailer.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{retailer.username}</h3>\n                      <p className=\"text-gray-600 text-sm\">{retailer.email}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <span className=\"text-sm text-gray-500\">Balance:</span>\n                        <span className=\"font-medium text-green-600\">${retailer.balance}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-gray-500 mb-2\">\n                        AT&T Services\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Click Edit to Configure\n                      </Badge>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handleEditPermissions(retailer)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"gap-2\"\n                    >\n                      <Edit2 className=\"w-4 h-4\" />\n                      Edit AT&T Permissions\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Dialog open={isPermissionDialogOpen} onOpenChange={setIsPermissionDialogOpen}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              AT&T Permissions - {selectedRetailer?.username}\n            </DialogTitle>\n            <DialogDescription>\n              Configure AT&T service access and daily limits for this retailer.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"grid gap-6 py-4\">\n            {/* Core Services */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Core Services</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Activation Services</Label>\n                    <p className=\"text-xs text-gray-500\">Enable new line activations</p>\n                  </div>\n                  <Switch\n                    checked={canActivate}\n                    onCheckedChange={setCanActivate}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Recharge Services</Label>\n                    <p className=\"text-xs text-gray-500\">Top-up existing lines</p>\n                  </div>\n                  <Switch\n                    checked={canRecharge}\n                    onCheckedChange={setCanRecharge}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">SIM Swap</Label>\n                    <p className=\"text-xs text-gray-500\">Replace damaged SIM cards</p>\n                  </div>\n                  <Switch\n                    checked={canSimSwap}\n                    onCheckedChange={setCanSimSwap}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Data Add-ons</Label>\n                    <p className=\"text-xs text-gray-500\">Sell additional data packages</p>\n                  </div>\n                  <Switch\n                    checked={canSellDataAddons}\n                    onCheckedChange={setCanSellDataAddons}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Advanced Services */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Advanced Services</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Port-In Services</Label>\n                    <p className=\"text-xs text-gray-500\">Transfer numbers from other carriers</p>\n                  </div>\n                  <Switch\n                    checked={canPortIn}\n                    onCheckedChange={setCanPortIn}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">WiFi Calling</Label>\n                    <p className=\"text-xs text-gray-500\">Enable WiFi calling features</p>\n                  </div>\n                  <Switch\n                    checked={canEnableWifiCalling}\n                    onCheckedChange={setCanEnableWifiCalling}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Bulk Activation</Label>\n                    <p className=\"text-xs text-gray-500\">Process multiple activations</p>\n                  </div>\n                  <Switch\n                    checked={canBulkActivate}\n                    onCheckedChange={setCanBulkActivate}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Daily Limits */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Daily Limits</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"maxDailyActivations\">Max Daily Activations</Label>\n                  <Input\n                    id=\"maxDailyActivations\"\n                    type=\"number\"\n                    value={maxDailyActivations}\n                    onChange={(e) => setMaxDailyActivations(e.target.value)}\n                    min=\"1\"\n                    max=\"1000\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"maxDailyRecharges\">Max Daily Recharges</Label>\n                  <Input\n                    id=\"maxDailyRecharges\"\n                    type=\"number\"\n                    value={maxDailyRecharges}\n                    onChange={(e) => setMaxDailyRecharges(e.target.value)}\n                    min=\"1\"\n                    max=\"1000\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter className=\"gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsPermissionDialogOpen(false);\n                resetForm();\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSavePermissions}\n              disabled={updatePermissionMutation.isPending}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {updatePermissionMutation.isPending ? \"Saving...\" : \"Save Permissions\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15888},"client/src/pages/admin/SystemSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Settings,\n  Database,\n  Shield,\n  Bell,\n  Globe,\n  CreditCard,\n  Mail,\n  Phone,\n  Server,\n  Users,\n  AlertTriangle,\n  CheckCircle,\n  Save\n} from \"lucide-react\";\n\ninterface SystemConfig {\n  id: string;\n  companyName: string;\n  companyEmail: string;\n  companyPhone: string;\n  supportEmail: string;\n  maintenanceMode: boolean;\n  allowRegistration: boolean;\n  emailNotifications: boolean;\n  smsNotifications: boolean;\n  maxTransactionAmount: number;\n  minTransactionAmount: number;\n  systemCurrency: string;\n  defaultCommissionRate: number;\n  sessionTimeout: number;\n  maxLoginAttempts: number;\n  backupEnabled: boolean;\n  lastBackup: string;\n}\n\nexport default function SystemSettings() {\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Mock system configuration data (in real app, this would come from API)\n  const mockConfig: SystemConfig = {\n    id: \"1\",\n    companyName: \"Mobile Recharge POS\",\n    companyEmail: \"admin@mobilerecharge.com\",\n    companyPhone: \"+1-800-555-0123\",\n    supportEmail: \"support@mobilerecharge.com\",\n    maintenanceMode: false,\n    allowRegistration: false,\n    emailNotifications: true,\n    smsNotifications: true,\n    maxTransactionAmount: 1000,\n    minTransactionAmount: 5,\n    systemCurrency: \"USD\",\n    defaultCommissionRate: 5.0,\n    sessionTimeout: 60,\n    maxLoginAttempts: 5,\n    backupEnabled: true,\n    lastBackup: \"2025-01-13T02:00:00Z\"\n  };\n\n  const [config, setConfig] = useState<SystemConfig>(mockConfig);\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (updatedConfig: Partial<SystemConfig>) => {\n      // In real app, this would be: return await apiRequest('/api/admin/system-config', { method: 'PATCH', body: updatedConfig });\n      return new Promise(resolve => setTimeout(() => resolve(updatedConfig), 1000));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"System settings updated successfully\",\n      });\n      setIsEditing(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update system settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateConfigMutation.mutate(config);\n  };\n\n  const handleInputChange = (field: keyof SystemConfig, value: any) => {\n    setConfig(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">System Settings</h1>\n          <p className=\"text-muted-foreground\">\n            Configure system-wide settings and preferences\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {isEditing && (\n            <Button \n              onClick={handleSave} \n              disabled={updateConfigMutation.isPending}\n              className=\"gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {updateConfigMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          )}\n          <Button \n            variant={isEditing ? \"outline\" : \"default\"}\n            onClick={() => setIsEditing(!isEditing)}\n          >\n            {isEditing ? \"Cancel\" : \"Edit Settings\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* System Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Server className=\"h-5 w-5\" />\n            System Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">System Status</span>\n              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Online\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Maintenance Mode</span>\n              <Badge variant={config.maintenanceMode ? \"destructive\" : \"secondary\"}>\n                {config.maintenanceMode ? (\n                  <>\n                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                    Active\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Inactive\n                  </>\n                )}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Last Backup</span>\n              <span className=\"text-xs text-muted-foreground\">\n                {new Date(config.lastBackup).toLocaleDateString()}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Company Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"h-5 w-5\" />\n              Company Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"companyName\">Company Name</Label>\n              <Input\n                id=\"companyName\"\n                value={config.companyName}\n                onChange={(e) => handleInputChange('companyName', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"companyEmail\">Company Email</Label>\n              <Input\n                id=\"companyEmail\"\n                type=\"email\"\n                value={config.companyEmail}\n                onChange={(e) => handleInputChange('companyEmail', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"companyPhone\">Company Phone</Label>\n              <Input\n                id=\"companyPhone\"\n                value={config.companyPhone}\n                onChange={(e) => handleInputChange('companyPhone', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"supportEmail\">Support Email</Label>\n              <Input\n                id=\"supportEmail\"\n                type=\"email\"\n                value={config.supportEmail}\n                onChange={(e) => handleInputChange('supportEmail', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Security Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n              <Input\n                id=\"sessionTimeout\"\n                type=\"number\"\n                value={config.sessionTimeout}\n                onChange={(e) => handleInputChange('sessionTimeout', parseInt(e.target.value))}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"maxLoginAttempts\">Max Login Attempts</Label>\n              <Input\n                id=\"maxLoginAttempts\"\n                type=\"number\"\n                value={config.maxLoginAttempts}\n                onChange={(e) => handleInputChange('maxLoginAttempts', parseInt(e.target.value))}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"allowRegistration\">Allow User Registration</Label>\n              <Switch\n                id=\"allowRegistration\"\n                checked={config.allowRegistration}\n                onCheckedChange={(checked) => handleInputChange('allowRegistration', checked)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"maintenanceMode\">Maintenance Mode</Label>\n              <Switch\n                id=\"maintenanceMode\"\n                checked={config.maintenanceMode}\n                onCheckedChange={(checked) => handleInputChange('maintenanceMode', checked)}\n                disabled={!isEditing}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transaction Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Transaction Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"minTransactionAmount\">Minimum Transaction Amount</Label>\n              <Input\n                id=\"minTransactionAmount\"\n                type=\"number\"\n                value={config.minTransactionAmount}\n                onChange={(e) => handleInputChange('minTransactionAmount', parseFloat(e.target.value))}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"maxTransactionAmount\">Maximum Transaction Amount</Label>\n              <Input\n                id=\"maxTransactionAmount\"\n                type=\"number\"\n                value={config.maxTransactionAmount}\n                onChange={(e) => handleInputChange('maxTransactionAmount', parseFloat(e.target.value))}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"systemCurrency\">System Currency</Label>\n              <Input\n                id=\"systemCurrency\"\n                value={config.systemCurrency}\n                onChange={(e) => handleInputChange('systemCurrency', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"defaultCommissionRate\">Default Commission Rate</Label>\n              <Input\n                id=\"defaultCommissionRate\"\n                type=\"number\"\n                step=\"0.1\"\n                value={config.defaultCommissionRate}\n                onChange={(e) => handleInputChange('defaultCommissionRate', parseFloat(e.target.value))}\n                disabled={!isEditing}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Notification Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"emailNotifications\">Email Notifications</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Send transaction confirmations via email\n                </p>\n              </div>\n              <Switch\n                id=\"emailNotifications\"\n                checked={config.emailNotifications}\n                onCheckedChange={(checked) => handleInputChange('emailNotifications', checked)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"smsNotifications\">SMS Notifications</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Send transaction alerts via SMS\n                </p>\n              </div>\n              <Switch\n                id=\"smsNotifications\"\n                checked={config.smsNotifications}\n                onCheckedChange={(checked) => handleInputChange('smsNotifications', checked)}\n                disabled={!isEditing}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Backup Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Database className=\"h-5 w-5\" />\n            Backup & Maintenance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label>Automatic Backups</Label>\n                <p className=\"text-xs text-muted-foreground\">\n                  Daily system backups\n                </p>\n              </div>\n              <Switch\n                checked={config.backupEnabled}\n                onCheckedChange={(checked) => handleInputChange('backupEnabled', checked)}\n                disabled={!isEditing}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Last Backup</Label>\n              <p className=\"text-sm\">\n                {new Date(config.lastBackup).toLocaleString()}\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Manual Backup</Label>\n              <Button variant=\"outline\" size=\"sm\" disabled={!isEditing}>\n                Create Backup Now\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14616},"client/src/pages/admin/UserManagement.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, UserCheck, Store, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function UserManagement() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">User Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage employees, retailers, and user accounts\n          </p>\n        </div>\n        <Users className=\"w-8 h-8 text-blue-600\" />\n      </div>\n\n      {/* Management Options */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Employee Management */}\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <UserCheck className=\"w-5 h-5 mr-2 text-green-600\" />\n              Employee Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Manage employee accounts, roles, and permissions. Create new employee accounts and assign specific roles like accountant or technical support.\n            </p>\n            <Link href=\"/admin/employees\">\n              <Button className=\"w-full\">\n                Manage Employees\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Retailer Management */}\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Store className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Retailer Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Manage retailer accounts, portal balances, and commission group assignments. Set commission groups and monitor retailer activity.\n            </p>\n            <Link href=\"/admin/retailers\">\n              <Button className=\"w-full\">\n                Manage Retailers\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Stats or Additional Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle>User Management Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-green-700\">Employees</h3>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Create and manage employee accounts</li>\n                <li>• Assign roles (accountant, technical support)</li>\n                <li>• Control permissions and access levels</li>\n                <li>• Monitor employee activity</li>\n              </ul>\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-purple-700\">Retailers</h3>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Create and manage retailer accounts</li>\n                <li>• Assign commission groups (A, B, C)</li>\n                <li>• Set portal balances and credit limits</li>\n                <li>• Monitor transaction activity</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3719},"client/src/pages/customer/CustomerLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Smartphone, User, ArrowRight, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport nexitelLogo from \"@assets/logo_1752374863163.jpg\";\n\nexport default function CustomerLogin() {\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      const response = await apiRequest(\"/api/auth/login\", { method: \"POST\", body: data });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.user.role !== \"customer\") {\n        toast({\n          title: \"Access Denied\",\n          description: \"This portal is for customers only. Staff please use the main portal.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      login(data.user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Login successful, ${data.user.username}!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n  // Demo customer for quick testing\n  const handleDemoLogin = () => {\n    form.setValue(\"username\", \"customer1\");\n    form.setValue(\"password\", \"customer123\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"mb-4\">\n            <img \n              src={nexitelLogo} \n              alt=\"Nexitel Logo\" \n              className=\"w-20 h-20 mx-auto object-contain\"\n            />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-green-500 bg-clip-text text-transparent\">\n            Customer Portal\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Access your account and manage services</p>\n        </div>\n\n        {/* Demo Access Card */}\n        <Card className=\"mb-6 border-blue-200 bg-blue-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-blue-800 text-sm flex items-center\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Demo Access\n            </CardTitle>\n            <CardDescription className=\"text-xs text-blue-600\">\n              Click to auto-fill demo customer credentials\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"outline\"\n              className=\"w-full text-blue-700 border-blue-300 hover:bg-blue-100\"\n              onClick={handleDemoLogin}\n            >\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Demo Customer</div>\n                <div className=\"text-xs opacity-75\">customer1</div>\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Login Form */}\n        <Card className=\"shadow-lg border-green-100\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50\">\n            <CardTitle className=\"flex items-center text-green-800\">\n              <Smartphone className=\"w-5 h-5 mr-2\" />\n              Customer Login\n            </CardTitle>\n            <CardDescription>\n              Enter your customer credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </form>\n            </Form>\n\n            {/* Back to main portal link */}\n            <div className=\"mt-6 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"link\" className=\"text-sm text-muted-foreground hover:text-primary\">\n                  <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                  Back to Main Portal\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Support Info */}\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\n          <p>Need help? Contact customer support</p>\n          <p className=\"text-xs mt-1\">support@nexitel.com</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6677},"client/src/pages/customer/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { rechargeSchema, type RechargeRequest } from \"@shared/schema\";\nimport { REGIONS, COUNTRIES, getCountriesByRegion, getCarriers } from \"@shared/countries\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Smartphone, BookOpen, Plus, ChevronRight, CreditCard, Check, Globe, Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { CommissionDisplay } from \"@/components/CommissionDisplay\";\n\nconst PRESET_AMOUNTS = [\n  { value: 10, label: \"$10\", description: \"Quick top-up\" },\n  { value: 25, label: \"$25\", description: \"Most popular\" },\n  { value: 50, label: \"$50\", description: \"Value pack\" },\n  { value: 100, label: \"$100\", description: \"Super saver\" },\n];\n\nexport default function CustomerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAmount, setSelectedAmount] = useState<number>(25);\n  const [activeService, setActiveService] = useState<'global' | 'nexitel'>('global');\n\n  const form = useForm<RechargeRequest>({\n    resolver: zodResolver(rechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      country: \"\",\n      carrier: \"\",\n      amount: 25,\n    },\n  });\n\n  const selectedCountry = form.watch(\"country\");\n  const availableCarriers = selectedCountry ? getCarriers(selectedCountry) : [];\n\n  const { data: userTransactions } = useQuery({\n    queryKey: [\"/api/transactions/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const { data: savedNumbers } = useQuery({\n    queryKey: [\"/api/saved-numbers\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const rechargeTransactionMutation = useMutation({\n    mutationFn: async (data: RechargeRequest & { userId: number }) => {\n      const serviceFee = (data.amount * 0.1).toFixed(2); // 10 service fee\n      \n      return apiRequest(\"/api/recharge/process\", {\n        method: \"POST\",\n        body: {\n          userId: data.userId,\n          phoneNumber: data.phoneNumber,\n          country: data.country,\n          carrier: data.carrier,\n          planPrice: data.amount.toString(),\n          serviceFee: serviceFee,\n          planId: null\n        }\n      });\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions/user\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      form.reset({\n        phoneNumber: \"\",\n        country: \"\",\n        carrier: \"\",\n        amount: 25,\n      });\n      setSelectedAmount(25);\n      toast({\n        title: \"Recharge Successful!\",\n        description: `Commission earned: $${result.commission}. New balance: $${result.newBalance}`,\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Failed to process recharge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RechargeRequest) => {\n    if (!user) return;\n    \n    rechargeTransactionMutation.mutate({\n      ...data,\n      userId: user.id,\n    });\n  };\n\n  const handleAmountSelect = (amount: number) => {\n    setSelectedAmount(amount);\n    form.setValue(\"amount\", amount);\n  };\n\n  const handleSavedNumberSelect = (savedNumber: any) => {\n    form.setValue(\"phoneNumber\", savedNumber.phoneNumber);\n    form.setValue(\"country\", savedNumber.country);\n    form.setValue(\"carrier\", savedNumber.carrier);\n  };\n\n  const getServiceFee = () => {\n    return (selectedAmount * 0.08).toFixed(2);\n  };\n\n  const getTotalAmount = () => {\n    return (selectedAmount + parseFloat(getServiceFee())).toFixed(2);\n  };\n\n  // Ensure userTransactions is always an array\n  const safeUserTransactions = Array.isArray(userTransactions) ? userTransactions : [];\n  const recentTransactions = safeUserTransactions.slice(0, 2);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Welcome back, {user?.username}!</h1>\n            <p className=\"text-gray-600\">International mobile recharge services</p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-gray-500\">Account Balance</div>\n            <div className=\"text-2xl font-bold text-green-600\">${user?.balance || \"0.00\"}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Commission Display */}\n      <CommissionDisplay />\n\n      {/* Service Selection */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n          {/* Nexitel Activation */}\n          <Link href=\"/nexitel-activation\">\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardHeader className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Zap className=\"w-8 h-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl\">Nexitel Activation</CardTitle>\n                <p className=\"text-sm text-gray-600\">Activate new wireless service</p>\n                <Badge className=\"mt-2\">1 Commission</Badge>\n              </CardHeader>\n            </Card>\n          </Link>\n\n          {/* Global Recharge */}\n          <Card>\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-xl\">Global Recharge Service</CardTitle>\n              <p className=\"text-sm text-gray-600\">International mobile phone top-ups</p>\n              <Badge className=\"mt-2\">1 Commission</Badge>\n            </CardHeader>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Recharge Form */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recharge Your Phone</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div>\n                    <FormLabel>Phone Number</FormLabel>\n                    <div className=\"flex space-x-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"phoneNumber\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex-1\">\n                            <FormControl>\n                              <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button type=\"button\" variant=\"outline\" size=\"icon\">\n                        <BookOpen className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Select Country</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent className=\"max-h-80\">\n                            {REGIONS.map((region) => {\n                              const regionCountries = getCountriesByRegion(region);\n                              return (\n                                <div key={region}>\n                                  <div className=\"px-2 py-1.5 text-sm font-semibold text-gray-900 bg-gray-100 sticky top-0\">\n                                    {region}\n                                  </div>\n                                  {regionCountries.map((country) => (\n                                    <SelectItem key={country.code} value={country.code}>\n                                      <span className=\"flex items-center\">\n                                        <span className=\"mr-2\">{country.flag}</span>\n                                        {country.name}\n                                      </span>\n                                    </SelectItem>\n                                  ))}\n                                </div>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"carrier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mobile Carrier</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select carrier...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableCarriers.map((carrier) => (\n                              <SelectItem key={carrier} value={carrier}>\n                                {carrier}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phoneNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                      Choose Amount\n                    </FormLabel>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                      {PRESET_AMOUNTS.map((preset) => (\n                        <Button\n                          key={preset.value}\n                          type=\"button\"\n                          variant={selectedAmount === preset.value ? \"default\" : \"outline\"}\n                          className={`p-4 text-center ${\n                            selectedAmount === preset.value\n                              ? \"bg-orange-600 hover:bg-orange-700 border-2 border-orange-600\"\n                              : \"hover:border-orange-600 hover:bg-orange-50\"\n                          }`}\n                          onClick={() => handleAmountSelect(preset.value)}\n                        >\n                          <div className=\"text-lg font-bold\">{preset.label}</div>\n                          <div className=\"text-xs opacity-75\">{preset.description}</div>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-700\">Recharge Amount:</span>\n                      <span className=\"text-sm font-medium\">${selectedAmount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-700\">Processing Fee:</span>\n                      <span className=\"text-sm font-medium\">${getServiceFee()}</span>\n                    </div>\n                    <div className=\"border-t border-orange-200 pt-2 flex items-center justify-between\">\n                      <span className=\"font-medium text-gray-900\">Total Amount:</span>\n                      <span className=\"text-lg font-bold text-orange-600\">${getTotalAmount()}</span>\n                    </div>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                    disabled={rechargeTransactionMutation.isPending}\n                  >\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    {rechargeTransactionMutation.isPending ? \"Processing...\" : \"Pay & Recharge Now\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar Info */}\n        <div className=\"space-y-6\">\n          {/* Saved Numbers */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Saved Numbers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {(Array.isArray(savedNumbers) ? savedNumbers : []).slice(0, 2).map((savedNumber: any) => (\n                  <Button\n                    key={savedNumber.id}\n                    variant=\"ghost\"\n                    className=\"w-full flex items-center justify-between p-3 bg-gray-50 hover:bg-gray-100\"\n                    onClick={() => handleSavedNumberSelect(savedNumber)}\n                  >\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {savedNumber.phoneNumber}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {savedNumber.label} ({savedNumber.carrier})\n                      </div>\n                    </div>\n                    <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                ))}\n                {!(Array.isArray(savedNumbers) && savedNumbers.length) && (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    No saved numbers yet\n                  </p>\n                )}\n                <Button variant=\"ghost\" className=\"w-full text-orange-600 hover:text-orange-700\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add New Number\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {recentTransactions.map((transaction: any) => (\n                  <div key={transaction.id} className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Check className=\"w-4 h-4 text-green-600\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        ${transaction.amount} Recharge\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {transaction.phoneNumber} • {new Date(transaction.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {!recentTransactions.length && (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    No recent activity\n                  </p>\n                )}\n                <Button variant=\"ghost\" className=\"w-full text-orange-600 hover:text-orange-700\">\n                  View All Transactions\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17373},"client/src/pages/customer/Portal.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Smartphone, Globe, CreditCard, History, Phone, Zap } from \"lucide-react\";\nimport { redirectToMainDomain } from \"@/lib/subdomain\";\n\n// Import countries data\nimport { COUNTRIES } from \"@shared/countries\";\n\nexport default function CustomerPortal() {\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedCarrier, setSelectedCarrier] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  // For now, we'll use mock carriers since the countries data structure doesn't include carriers\n  const carriers = selectedCountry ? [\"Carrier 1\", \"Carrier 2\", \"Carrier 3\"] : [];\n\n  const handleStaffLogin = () => {\n    redirectToMainDomain('/login');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Smartphone className=\"w-8 h-8 text-blue-600 mr-3\" />\n              <h1 className=\"text-xl font-bold text-gray-900\">Mobile Recharge Portal</h1>\n            </div>\n            <Button variant=\"outline\" onClick={handleStaffLogin} className=\"text-sm\">\n              Staff Login\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Instant Mobile Recharge\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Top up your phone anywhere in the world. Fast, secure, and reliable.\n          </p>\n          <div className=\"flex justify-center space-x-8 text-sm text-gray-500\">\n            <div className=\"flex items-center\">\n              <Globe className=\"w-5 h-5 mr-2 text-green-500\" />\n              180+ Countries\n            </div>\n            <div className=\"flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-yellow-500\" />\n              Instant Delivery\n            </div>\n            <div className=\"flex items-center\">\n              <CreditCard className=\"w-5 h-5 mr-2 text-blue-500\" />\n              Secure Payment\n            </div>\n          </div>\n        </div>\n\n        {/* Service Tabs */}\n        <Tabs defaultValue=\"global\" className=\"w-full max-w-4xl mx-auto\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"global\" className=\"flex items-center\">\n              <Globe className=\"w-4 h-4 mr-2\" />\n              Global Recharge\n            </TabsTrigger>\n            <TabsTrigger value=\"nexitel\" className=\"flex items-center\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Nexitel Services\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Global Recharge Tab */}\n          <TabsContent value=\"global\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Globe className=\"w-6 h-6 mr-2 text-blue-600\" />\n                  International Mobile Recharge\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Select value={selectedCountry} onValueChange={setSelectedCountry}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select country\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {COUNTRIES.map((country) => (\n                          <SelectItem key={country.code} value={country.code}>\n                            <div className=\"flex items-center\">\n                              <span className=\"mr-2\">{country.flag}</span>\n                              {country.name}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"carrier\">Mobile Carrier</Label>\n                    <Select \n                      value={selectedCarrier} \n                      onValueChange={setSelectedCarrier}\n                      disabled={!selectedCountry}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select carrier\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {carriers.map((carrier) => (\n                          <SelectItem key={carrier} value={carrier}>\n                            {carrier}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(e.target.value)}\n                      placeholder=\"Enter phone number\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"amount\">Amount (USD)</Label>\n                    <Select value={amount} onValueChange={setAmount}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select amount\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"5\">$5.00</SelectItem>\n                        <SelectItem value=\"10\">$10.00</SelectItem>\n                        <SelectItem value=\"15\">$15.00</SelectItem>\n                        <SelectItem value=\"20\">$20.00</SelectItem>\n                        <SelectItem value=\"25\">$25.00</SelectItem>\n                        <SelectItem value=\"50\">$50.00</SelectItem>\n                        <SelectItem value=\"100\">$100.00</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"pt-4\">\n                  <Button \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                    size=\"lg\"\n                    disabled={!selectedCountry || !selectedCarrier || !phoneNumber || !amount}\n                  >\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Recharge Now - ${amount}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Nexitel Services Tab */}\n          <TabsContent value=\"nexitel\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Phone className=\"w-6 h-6 mr-2 text-purple-600\" />\n                  Nexitel Wireless Services\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Smartphone className=\"w-16 h-16 mx-auto text-purple-600 mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">Nexitel Services</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Access Nexitel activation, recharge, and wireless services.\n                  </p>\n                  <Button \n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    onClick={handleStaffLogin}\n                  >\n                    Access Nexitel Services\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Features Section */}\n        <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <Globe className=\"w-12 h-12 mx-auto text-blue-600 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Global Coverage</h3>\n              <p className=\"text-gray-600\">\n                Recharge phones in over 180 countries worldwide with instant delivery.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <Zap className=\"w-12 h-12 mx-auto text-yellow-600 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Instant Delivery</h3>\n              <p className=\"text-gray-600\">\n                Your recharge is processed instantly and delivered in seconds.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <CreditCard className=\"w-12 h-12 mx-auto text-green-600 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Secure Payment</h3>\n              <p className=\"text-gray-600\">\n                All transactions are secured with bank-level encryption.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-50 border-t mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center text-gray-600\">\n            <p>&copy; 2025 Mobile Recharge Portal. All rights reserved.</p>\n            <div className=\"mt-2\">\n              <Button variant=\"link\" size=\"sm\" onClick={handleStaffLogin}>\n                Staff Portal\n              </Button>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":10615},"client/src/pages/employee/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, AlertTriangle, Wallet, Zap, Plus, CreditCard, FileText, Smartphone, Phone, Users, Globe, Wifi, BarChart3 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function EmployeeDashboard() {\n  const { user } = useAuth();\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/overview\"],\n  });\n\n  const { data: transactions } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const safeTransactions = Array.isArray(transactions) ? transactions : [];\n  \n  const todayCommission = safeTransactions\n    .filter((t: any) => {\n      const today = new Date();\n      const transactionDate = new Date(t.createdAt);\n      return (\n        transactionDate.toDateString() === today.toDateString() &&\n        t.status === \"completed\"\n      );\n    })\n    .reduce((sum: number, t: any) => sum + (parseFloat(t.serviceFee) || 0), 0);\n\n  const newCommission = safeTransactions\n    .filter((t: any) => t.status === \"completed\")\n    .reduce((sum: number, t: any) => sum + (parseFloat(t.serviceFee) || 0), 0);\n\n  const pendingReconciliation = safeTransactions.filter(\n    (t: any) => t.status === \"pending\"\n  ).length;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header Section */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            {user?.employeeRole === \"accountant\" ? \"Accountant\" : \"Employee\"} Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Financial oversight and transaction management</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm text-gray-500\">Account Balance</div>\n          <div className=\"text-2xl font-bold text-green-600\">${user?.balance || \"0.00\"}</div>\n        </div>\n      </div>\n\n      {/* Commission Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Today's Commission</p>\n                <p className=\"text-2xl font-bold text-gray-900\">${todayCommission.toFixed(2)}</p>\n                <p className=\"text-xs text-gray-500\">From completed transactions</p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <TrendingUp className=\"w-5 h-5 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">New Commission</p>\n                <p className=\"text-2xl font-bold text-gray-900\">${newCommission.toFixed(2)}</p>\n                <p className=\"text-xs text-gray-500\">Total earnings</p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">System Balance</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  ${(analytics as any)?.totalRevenue || \"0.00\"}\n                </p>\n                <p className=\"text-xs text-gray-500\">Available funds</p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <Wallet className=\"w-5 h-5 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Service Categories Grid - Admin Layout Style */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* Nexitel Card */}\n        <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg p-6 text-white relative overflow-hidden\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">Nexitel</h3>\n              <p className=\"text-blue-100 text-sm\">Complete wireless service management</p>\n            </div>\n            <Phone className=\"w-12 h-12 text-blue-200\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Link href=\"/nexitel-activation\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Activation\n              </div>\n            </Link>\n            <Link href=\"/nexitel-recharge\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Recharge\n              </div>\n            </Link>\n            <Link href=\"/nexitel-activation-report\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Activation Report\n              </div>\n            </Link>\n            <Link href=\"/nexitel-recharge-report\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Recharge Report\n              </div>\n            </Link>\n            <Link href=\"/nexitel-sim-swap\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <Smartphone className=\"w-4 h-4 mr-2\" />\n                SIM Swap\n              </div>\n            </Link>\n            <Link href=\"/nexitel-port-status\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Port-In Status\n              </div>\n            </Link>\n            <Link href=\"/wifi-calling-activation\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer mb-3\">\n                <Wifi className=\"w-4 h-4 mr-2\" />\n                WiFi Calling Feature\n              </div>\n            </Link>\n            <Link href=\"/nexitel-bulk-activation\">\n              <div className=\"flex items-center text-sm hover:text-blue-200 cursor-pointer\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Bulk Activation\n              </div>\n            </Link>\n          </div>\n        </div>\n\n        {/* NexiPhone Card */}\n        <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-6 text-white relative overflow-hidden\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">NexiPhone</h3>\n              <p className=\"text-purple-100 text-sm\">VoIP and calling applications</p>\n            </div>\n            <Phone className=\"w-12 h-12 text-purple-200\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Link href=\"/voip-activation\">\n              <div className=\"flex items-center text-sm hover:text-purple-200 cursor-pointer mb-3\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                VoIP Activation\n              </div>\n            </Link>\n            <Link href=\"/voip-bulk-activation\">\n              <div className=\"flex items-center text-sm hover:text-purple-200 cursor-pointer mb-3\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Bulk VoIP Activation\n              </div>\n            </Link>\n            <Link href=\"/nexiphone-apps\">\n              <div className=\"flex items-center text-sm hover:text-purple-200 cursor-pointer\">\n                <Smartphone className=\"w-4 h-4 mr-2\" />\n                NexiPhone Apps\n              </div>\n            </Link>\n          </div>\n        </div>\n\n        {/* USA Carriers Card */}\n        <div className=\"bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-lg p-6 text-white relative overflow-hidden\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">USA Carriers</h3>\n              <p className=\"text-indigo-100 text-sm\">Domestic mobile carriers & analytics</p>\n            </div>\n            <Phone className=\"w-12 h-12 text-indigo-200\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Link href=\"/admin/usa-recharge\">\n              <div className=\"flex items-center text-sm hover:text-indigo-200 cursor-pointer mb-3\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                USA Recharge\n              </div>\n            </Link>\n            <div className=\"flex items-center text-sm hover:text-indigo-200 cursor-pointer mb-3\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              USA Analytics\n            </div>\n            <div className=\"flex items-center text-sm hover:text-indigo-200 cursor-pointer mb-3\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              USA Reports\n            </div>\n            <div className=\"flex items-center text-sm hover:text-indigo-200 cursor-pointer\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Transaction History\n            </div>\n          </div>\n        </div>\n\n        {/* Global Recharge Card */}\n        <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-lg p-6 text-white relative overflow-hidden\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">Global Recharge</h3>\n              <p className=\"text-green-100 text-sm\">International mobile top-up services</p>\n            </div>\n            <Globe className=\"w-12 h-12 text-green-200\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Link href=\"/global-menu\">\n              <div className=\"flex items-center text-sm hover:text-green-200 cursor-pointer mb-3\">\n                <Globe className=\"w-4 h-4 mr-2\" />\n                International Recharge\n              </div>\n            </Link>\n            <Link href=\"/global-recharge\">\n              <div className=\"flex items-center text-sm hover:text-green-200 cursor-pointer mb-3\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Quick Global Recharge\n              </div>\n            </Link>\n            <div className=\"flex items-center text-sm hover:text-green-200 cursor-pointer mb-3\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Country Analytics\n            </div>\n            <div className=\"flex items-center text-sm hover:text-green-200 cursor-pointer mb-3\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Global Reports\n            </div>\n            <div className=\"flex items-center text-sm hover:text-green-200 cursor-pointer\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Transaction History\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Employee Management and System Analytics Section */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Employee Tasks */}\n        <Card className=\"bg-gradient-to-r from-purple-600 to-blue-600\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Employee Management</h3>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Link href=\"/activity-management\">\n                <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  User Management\n                </Button>\n              </Link>\n              <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                Fund Management\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Analytics */}\n        <Card className=\"bg-gradient-to-r from-teal-600 to-cyan-600\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">System Analytics</h3>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n              <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                System Reports\n              </Button>\n              <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Audit Logs\n              </Button>\n              <Button className=\"w-full bg-white/20 hover:bg-white/30 text-white border-0\">\n                <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Transactions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Transactions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {safeTransactions.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <FileText className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n              <p>No transactions found</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Transaction ID\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Phone Number\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {safeTransactions.slice(0, 10).map((transaction: any) => (\n                    <tr key={transaction.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        #TXN-{String(transaction.id).padStart(6, \"0\")}\n                      </td>\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                        ${transaction.totalAmount}\n                      </td>\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                        {transaction.phoneNumber}\n                      </td>\n                      <td className=\"px-4 py-3 whitespace-nowrap\">\n                        <Badge\n                          variant={\n                            transaction.status === \"completed\"\n                              ? \"default\"\n                              : transaction.status === \"pending\"\n                              ? \"secondary\"\n                              : \"destructive\"\n                          }\n                        >\n                          {transaction.status}\n                        </Badge>\n                      </td>\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(transaction.createdAt).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17264},"client/src/pages/nexitel/BulkActivation.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FileSpreadsheet, ArrowLeft, AlertCircle, Upload, Download, CheckCircle, XCircle } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst nexitelBulkActivationSchema = z.object({\n  batchName: z.string().min(1, \"Batch name is required\"),\n  nexitelNetwork: z.enum([\"nexitel-purple\", \"nexitel-blue\"], { required_error: \"Network selection is required\" }),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\ntype NexitelBulkActivationRequest = z.infer<typeof nexitelBulkActivationSchema>;\n\ninterface BulkActivationStatus {\n  id: string;\n  batchName: string;\n  totalRecords: number;\n  processedRecords: number;\n  successfulActivations: number;\n  failedActivations: number;\n  status: \"uploading\" | \"processing\" | \"completed\" | \"failed\";\n  errors?: string[];\n}\n\nexport default function NexitelBulkActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [bulkStatus, setBulkStatus] = useState<BulkActivationStatus | null>(null);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<NexitelBulkActivationRequest>({\n    resolver: zodResolver(nexitelBulkActivationSchema),\n    defaultValues: {\n      batchName: \"\",\n      nexitelNetwork: undefined,\n      employeeId: \"\",\n    },\n  });\n\n  const bulkActivationMutation = useMutation({\n    mutationFn: async (data: { formData: NexitelBulkActivationRequest; file: File }) => {\n      const formData = new FormData();\n      formData.append('file', data.file);\n      formData.append('batchName', data.formData.batchName);\n      formData.append('nexitelNetwork', data.formData.nexitelNetwork);\n      formData.append('employeeId', data.formData.employeeId);\n\n      const response = await fetch('/api/nexitel/bulk-activation', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to upload file');\n      }\n\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setBulkStatus(result);\n      toast({\n        title: \"Bulk Activation Started\",\n        description: `Processing ${result.totalRecords} activations. You can monitor progress below.`,\n        variant: \"default\",\n      });\n      form.reset();\n      setSelectedFile(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select a CSV file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const onSubmit = (data: NexitelBulkActivationRequest) => {\n    if (!selectedFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a CSV file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkActivationMutation.mutate({ formData: data, file: selectedFile });\n  };\n\n  const downloadTemplate = () => {\n    const csvContent = `ICCID,First Name,Last Name,Email,Address,State,ZIP Code,Plan Code\n8901260123456789012,John,Doe,john.doe@email.com,123 Main St,CA,90210,NEXITEL_UNLIMITED\n8901260123456789013,Jane,Smith,jane.smith@email.com,456 Oak Ave,NY,10001,NEXITEL_5GB\n8901260123456789014,Bob,Johnson,bob.johnson@email.com,789 Pine St,TX,77001,NEXITEL_UNLIMITED`;\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'nexitel_bulk_activation_template.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getProgressPercentage = () => {\n    if (!bulkStatus || bulkStatus.totalRecords === 0) return 0;\n    return Math.round((bulkStatus.processedRecords / bulkStatus.totalRecords) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleBackNavigation}\n              className=\"hover:bg-white/50\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <FileSpreadsheet className=\"w-8 h-8 text-pink-600 mr-3\" />\n                Nexitel Bulk Activation\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Upload CSV files for multiple Nexitel activations</p>\n            </div>\n          </div>\n          \n          {/* Balance Display */}\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n            <div className=\"text-sm text-gray-500\">Your Balance</div>\n            <div className=\"text-2xl font-bold text-pink-600\">${user?.balance || \"0.00\"}</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Bulk Activation Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Upload className=\"w-5 h-5 text-pink-600 mr-2\" />\n                  Bulk Activation Upload\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Batch Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"batchName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Batch Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Corporate Order Jan 2024\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"nexitelNetwork\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nexitel Network</FormLabel>\n                            <Select onValueChange={field.onChange}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select network\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"nexitel-purple\">Nexitel Purple</SelectItem>\n                                <SelectItem value=\"nexitel-blue\">Nexitel Blue</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* File Upload */}\n                    <div className=\"space-y-4\">\n                      <FormLabel>CSV File Upload</FormLabel>\n                      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                        <FileSpreadsheet className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <div className=\"space-y-2\">\n                          <div className=\"text-sm text-gray-600\">\n                            {selectedFile ? (\n                              <div className=\"flex items-center justify-center space-x-2\">\n                                <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                <span className=\"font-medium\">{selectedFile.name}</span>\n                                <Badge variant=\"secondary\">\n                                  {(selectedFile.size / 1024).toFixed(1)} KB\n                                </Badge>\n                              </div>\n                            ) : (\n                              \"Drag and drop your CSV file here, or click to browse\"\n                            )}\n                          </div>\n                          <input\n                            ref={fileInputRef}\n                            type=\"file\"\n                            accept=\".csv\"\n                            onChange={handleFileChange}\n                            className=\"hidden\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => fileInputRef.current?.click()}\n                          >\n                            <Upload className=\"w-4 h-4 mr-2\" />\n                            {selectedFile ? \"Change File\" : \"Choose File\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Template Download */}\n                    <div className=\"bg-pink-50 border border-pink-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-medium text-pink-900\">Need a template?</h3>\n                          <p className=\"text-sm text-pink-700\">Download our CSV template to get started</p>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={downloadTemplate}\n                          className=\"border-pink-300 text-pink-700 hover:bg-pink-100\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Template\n                        </Button>\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-pink-600 hover:bg-pink-700\"\n                      disabled={bulkActivationMutation.isPending || !selectedFile}\n                    >\n                      {bulkActivationMutation.isPending ? \"Uploading...\" : \"Start Bulk Activation\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* Processing Status */}\n            {bulkStatus && (\n              <Card className=\"bg-white shadow-lg mt-6\">\n                <CardHeader>\n                  <CardTitle>Processing Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-gray-900\">{bulkStatus.totalRecords}</div>\n                        <div className=\"text-sm text-gray-500\">Total Records</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-blue-600\">{bulkStatus.processedRecords}</div>\n                        <div className=\"text-sm text-gray-500\">Processed</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-green-600\">{bulkStatus.successfulActivations}</div>\n                        <div className=\"text-sm text-gray-500\">Successful</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-red-600\">{bulkStatus.failedActivations}</div>\n                        <div className=\"text-sm text-gray-500\">Failed</div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Progress</span>\n                        <span>{getProgressPercentage()}%</span>\n                      </div>\n                      <Progress value={getProgressPercentage()} className=\"h-2\" />\n                    </div>\n\n                    <div className=\"flex items-center justify-center\">\n                      <Badge \n                        variant={bulkStatus.status === 'completed' ? 'default' : 'secondary'}\n                        className={\n                          bulkStatus.status === 'completed' \n                            ? 'bg-green-100 text-green-800' \n                            : bulkStatus.status === 'failed'\n                            ? 'bg-red-100 text-red-800'\n                            : 'bg-blue-100 text-blue-800'\n                        }\n                      >\n                        {bulkStatus.status === 'completed' && <CheckCircle className=\"w-4 h-4 mr-1\" />}\n                        {bulkStatus.status === 'failed' && <XCircle className=\"w-4 h-4 mr-1\" />}\n                        {bulkStatus.status.charAt(0).toUpperCase() + bulkStatus.status.slice(1)}\n                      </Badge>\n                    </div>\n\n                    {bulkStatus.errors && bulkStatus.errors.length > 0 && (\n                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-red-900 mb-2\">Errors</h4>\n                        <div className=\"space-y-1\">\n                          {bulkStatus.errors.map((error, index) => (\n                            <div key={index} className=\"text-sm text-red-700\">\n                              • {error}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Information Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">CSV Format Requirements</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium text-gray-900 mb-1\">Required Columns:</div>\n                    <div className=\"space-y-1 text-gray-600\">\n                      <div>• ICCID (19-22 digits)</div>\n                      <div>• First Name</div>\n                      <div>• Last Name</div>\n                      <div>• Email</div>\n                      <div>• Address</div>\n                      <div>• State</div>\n                      <div>• ZIP Code</div>\n                      <div>• Plan Code</div>\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-3\">\n                    <div className=\"font-medium text-gray-900 mb-1\">Plan Codes:</div>\n                    <div className=\"space-y-1 text-sm text-gray-600\">\n                      <div>• NEXITEL_UNLIMITED</div>\n                      <div>• NEXITEL_5GB</div>\n                      <div>• NEXITEL_10GB</div>\n                      <div>• NEXITEL_BASIC</div>\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-3\">\n                    <div className=\"font-medium text-gray-900 mb-1\">File Limits:</div>\n                    <div className=\"space-y-1 text-sm text-gray-600\">\n                      <div>• Maximum 1000 records per file</div>\n                      <div>• File size limit: 5MB</div>\n                      <div>• CSV format only</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19270},"client/src/pages/nexitel/DataAddons.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Database, ArrowLeft, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst nexitelDataAddonSchema = z.object({\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  iccid: z.string().min(19, \"Valid ICCID is required\"),\n  dataPackage: z.string().min(1, \"Data package selection is required\"),\n  customerEmail: z.string().email(\"Valid email is required\").optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\ntype NexitelDataAddonRequest = z.infer<typeof nexitelDataAddonSchema>;\n\nconst DATA_PACKAGES = [\n  { id: \"1gb\", name: \"1GB Add-on\", price: 15, description: \"1GB additional data\" },\n  { id: \"3gb\", name: \"3GB Add-on\", price: 25, description: \"3GB additional data\" },\n  { id: \"5gb\", name: \"5GB Add-on\", price: 35, description: \"5GB additional data\" },\n  { id: \"10gb\", name: \"10GB Add-on\", price: 50, description: \"10GB additional data\" },\n  { id: \"unlimited\", name: \"Unlimited Add-on\", price: 75, description: \"Unlimited data for 30 days\" },\n];\n\nexport default function NexitelDataAddons() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedPackage, setSelectedPackage] = useState<typeof DATA_PACKAGES[0] | null>(null);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<NexitelDataAddonRequest>({\n    resolver: zodResolver(nexitelDataAddonSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      iccid: \"\",\n      dataPackage: \"\",\n      customerEmail: \"\",\n      employeeId: \"\",\n    },\n  });\n\n  const dataAddonMutation = useMutation({\n    mutationFn: async (data: NexitelDataAddonRequest) => {\n      return apiRequest('/api/nexitel/data-addons', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Data Add-on Successful!\",\n        description: `${selectedPackage?.name} added to ${form.getValues('phoneNumber')}. Confirmation sent via SMS.`,\n        variant: \"default\",\n      });\n      form.reset();\n      setSelectedPackage(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Data Add-on Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePackageChange = (packageId: string) => {\n    const pkg = DATA_PACKAGES.find(p => p.id === packageId);\n    setSelectedPackage(pkg || null);\n    form.setValue('dataPackage', packageId);\n  };\n\n  const onSubmit = (data: NexitelDataAddonRequest) => {\n    dataAddonMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleBackNavigation}\n              className=\"hover:bg-white/50\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <Database className=\"w-8 h-8 text-indigo-600 mr-3\" />\n                Nexitel Data Add-ons\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Purchase additional data packages for Nexitel customers</p>\n            </div>\n          </div>\n          \n          {/* Balance Display */}\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n            <div className=\"text-sm text-gray-500\">Your Balance</div>\n            <div className=\"text-2xl font-bold text-indigo-600\">${user?.balance || \"0.00\"}</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Data Add-on Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Database className=\"w-5 h-5 text-indigo-600 mr-2\" />\n                  Purchase Data Add-on\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Customer Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"phoneNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"(555) 123-4567\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"iccid\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>ICCID</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter ICCID\" \n                                {...field} \n                                className=\"font-mono\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Customer Email (Optional)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"email\"\n                              placeholder=\"customer@example.com\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Data Package Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"dataPackage\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Data Package</FormLabel>\n                          <Select onValueChange={handlePackageChange}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a data package\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {DATA_PACKAGES.map((pkg) => (\n                                <SelectItem key={pkg.id} value={pkg.id}>\n                                  {pkg.name} - ${pkg.price} - {pkg.description}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Package Preview */}\n                    {selectedPackage && (\n                      <div className=\"bg-indigo-50 border border-indigo-200 rounded-lg p-4\">\n                        <h3 className=\"font-semibold text-indigo-900 mb-2\">Selected Package</h3>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-indigo-700\">Package:</span>\n                            <span className=\"font-medium text-indigo-900\">{selectedPackage.name}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-indigo-700\">Cost:</span>\n                            <span className=\"font-bold text-indigo-900\">${selectedPackage.price}</span>\n                          </div>\n                          <div className=\"text-sm text-indigo-600\">{selectedPackage.description}</div>\n                        </div>\n                      </div>\n                    )}\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-indigo-600 hover:bg-indigo-700\"\n                      disabled={dataAddonMutation.isPending}\n                    >\n                      {dataAddonMutation.isPending ? \"Processing...\" : \"Purchase Data Add-on\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Information Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Data Add-on Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Data add-ons are activated immediately upon purchase\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      SMS confirmation sent to customer\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Compatible with both Nexitel Purple and Blue networks\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      30-day validity from purchase date\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Available Packages</h4>\n                  <div className=\"space-y-2\">\n                    {DATA_PACKAGES.map((pkg) => (\n                      <div key={pkg.id} className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">{pkg.name}</span>\n                        <span className=\"font-medium\">${pkg.price}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13940},"client/src/pages/nexitel/PortStatus.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRightLeft, ArrowLeft, AlertCircle, CheckCircle, Clock, XCircle, Search } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst nexitelPortStatusSchema = z.object({\n  searchQuery: z.string().min(1, \"Phone number or port request ID is required\"),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\ntype NexitelPortStatusRequest = z.infer<typeof nexitelPortStatusSchema>;\n\ninterface PortStatus {\n  id: string;\n  phoneNumber: string;\n  fromCarrier: string;\n  requestDate: string;\n  status: \"pending\" | \"in-progress\" | \"completed\" | \"failed\" | \"cancelled\";\n  estimatedCompletion: string;\n  notes?: string;\n  customerName: string;\n  customerEmail: string;\n}\n\nconst STATUS_COLORS = {\n  pending: \"bg-yellow-100 text-yellow-800 border-yellow-300\",\n  \"in-progress\": \"bg-blue-100 text-blue-800 border-blue-300\",\n  completed: \"bg-green-100 text-green-800 border-green-300\",\n  failed: \"bg-red-100 text-red-800 border-red-300\",\n  cancelled: \"bg-gray-100 text-gray-800 border-gray-300\",\n};\n\nconst STATUS_ICONS = {\n  pending: Clock,\n  \"in-progress\": ArrowRightLeft,\n  completed: CheckCircle,\n  failed: XCircle,\n  cancelled: XCircle,\n};\n\nexport default function NexitelPortStatus() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [portStatus, setPortStatus] = useState<PortStatus | null>(null);\n  const [searchPerformed, setSearchPerformed] = useState(false);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<NexitelPortStatusRequest>({\n    resolver: zodResolver(nexitelPortStatusSchema),\n    defaultValues: {\n      searchQuery: \"\",\n      employeeId: \"\",\n    },\n  });\n\n  const statusMutation = useMutation({\n    mutationFn: async (data: NexitelPortStatusRequest) => {\n      return apiRequest('/api/nexitel/port-status', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (result) => {\n      setPortStatus(result);\n      setSearchPerformed(true);\n      if (result) {\n        toast({\n          title: \"Port Status Found\",\n          description: `Found port request for ${result.phoneNumber}`,\n          variant: \"default\",\n        });\n      } else {\n        toast({\n          title: \"No Results\",\n          description: \"No port request found for the provided information\",\n          variant: \"default\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      setPortStatus(null);\n      setSearchPerformed(true);\n      toast({\n        title: \"Search Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: NexitelPortStatusRequest) => {\n    statusMutation.mutate(data);\n  };\n\n  const getStatusIcon = (status: string) => {\n    const Icon = STATUS_ICONS[status as keyof typeof STATUS_ICONS] || Clock;\n    return <Icon className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-teal-50 via-green-50 to-blue-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleBackNavigation}\n              className=\"hover:bg-white/50\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <ArrowRightLeft className=\"w-8 h-8 text-teal-600 mr-3\" />\n                Nexitel Port-In Status\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Check and manage number porting requests for Nexitel</p>\n            </div>\n          </div>\n          \n          {/* Balance Display */}\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n            <div className=\"text-sm text-gray-500\">Your Balance</div>\n            <div className=\"text-2xl font-bold text-teal-600\">${user?.balance || \"0.00\"}</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Search Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Search className=\"w-5 h-5 text-teal-600 mr-2\" />\n                  Search Port Request\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Search Field */}\n                    <FormField\n                      control={form.control}\n                      name=\"searchQuery\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number or Port Request ID</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter phone number or port request ID\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                      disabled={statusMutation.isPending}\n                    >\n                      {statusMutation.isPending ? \"Searching...\" : \"Search Port Status\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* Port Status Results */}\n            {searchPerformed && (\n              <Card className=\"bg-white shadow-lg mt-6\">\n                <CardHeader>\n                  <CardTitle>Port Status Results</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {portStatus ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Phone Number</label>\n                          <div className=\"text-lg font-semibold\">{portStatus.phoneNumber}</div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Status</label>\n                          <div className=\"flex items-center mt-1\">\n                            <Badge className={STATUS_COLORS[portStatus.status]}>\n                              {getStatusIcon(portStatus.status)}\n                              <span className=\"ml-1 capitalize\">{portStatus.status.replace('-', ' ')}</span>\n                            </Badge>\n                          </div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Customer Name</label>\n                          <div className=\"text-lg\">{portStatus.customerName}</div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">From Carrier</label>\n                          <div className=\"text-lg\">{portStatus.fromCarrier}</div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Request Date</label>\n                          <div className=\"text-lg\">{new Date(portStatus.requestDate).toLocaleDateString()}</div>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Estimated Completion</label>\n                          <div className=\"text-lg\">{new Date(portStatus.estimatedCompletion).toLocaleDateString()}</div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Customer Email</label>\n                        <div className=\"text-lg\">{portStatus.customerEmail}</div>\n                      </div>\n\n                      {portStatus.notes && (\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-500\">Notes</label>\n                          <div className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-md mt-1\">\n                            {portStatus.notes}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <XCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Port Request Found</h3>\n                      <p className=\"text-gray-600\">\n                        No port request was found for the provided phone number or request ID.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Information Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Port-In Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Search by phone number or port request ID\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Real-time status updates\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Estimated completion dates provided\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Customer notification history\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Port Status Types</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-300\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        Pending\n                      </Badge>\n                      <span className=\"text-sm text-gray-600\">Awaiting processing</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className=\"bg-blue-100 text-blue-800 border-blue-300\">\n                        <ArrowRightLeft className=\"w-3 h-3 mr-1\" />\n                        In Progress\n                      </Badge>\n                      <span className=\"text-sm text-gray-600\">Being processed</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className=\"bg-green-100 text-green-800 border-green-300\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Completed\n                      </Badge>\n                      <span className=\"text-sm text-gray-600\">Successfully ported</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Typical Timeline</h4>\n                  <div className=\"text-sm text-gray-600\">\n                    • Wireless ports: 2-4 hours\n                    • Landline ports: 3-5 business days\n                    • Complex ports: 7-10 business days\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15217},"client/src/pages/nexitel/SimSwap.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RefreshCw, ArrowLeft, AlertCircle, CheckCircle, CreditCard } from \"lucide-react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst nexitelSimSwapSchema = z.object({\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  oldIccid: z.string().min(19, \"Valid old ICCID is required\"),\n  newIccid: z.string().min(19, \"Valid new ICCID is required\"),\n  reason: z.enum([\"damaged\", \"lost\", \"stolen\", \"defective\"], { required_error: \"Reason is required\" }),\n  customerEmail: z.string().email(\"Valid email is required\").optional(),\n  notes: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n});\n\ntype NexitelSimSwapRequest = z.infer<typeof nexitelSimSwapSchema>;\n\nconst SWAP_REASONS = [\n  { value: \"damaged\", label: \"SIM Card Damaged\", description: \"Physical damage to SIM card\" },\n  { value: \"lost\", label: \"SIM Card Lost\", description: \"Customer lost their SIM card\" },\n  { value: \"stolen\", label: \"SIM Card Stolen\", description: \"SIM card was stolen\" },\n  { value: \"defective\", label: \"SIM Card Defective\", description: \"SIM card not working properly\" },\n];\n\nexport default function NexitelSimSwap() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedReason, setSelectedReason] = useState<typeof SWAP_REASONS[0] | null>(null);\n\n  const handleBackNavigation = () => {\n    if (user?.role === \"retailer\") {\n      window.location.href = \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      window.location.href = \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      window.location.href = \"/admin/dashboard\";\n    } else {\n      window.location.href = \"/\";\n    }\n  };\n\n  const form = useForm<NexitelSimSwapRequest>({\n    resolver: zodResolver(nexitelSimSwapSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      oldIccid: \"\",\n      newIccid: \"\",\n      reason: undefined,\n      customerEmail: \"\",\n      notes: \"\",\n      employeeId: \"\",\n    },\n  });\n\n  const simSwapMutation = useMutation({\n    mutationFn: async (data: NexitelSimSwapRequest) => {\n      return apiRequest('/api/nexitel/sim-swap', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"SIM Swap Successful!\",\n        description: `SIM swap completed for ${form.getValues('phoneNumber')}. Service transferred to new SIM.`,\n        variant: \"default\",\n      });\n      form.reset();\n      setSelectedReason(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"SIM Swap Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReasonChange = (reason: string) => {\n    const selectedReason = SWAP_REASONS.find(r => r.value === reason);\n    setSelectedReason(selectedReason || null);\n    form.setValue('reason', reason as any);\n  };\n\n  const onSubmit = (data: NexitelSimSwapRequest) => {\n    simSwapMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleBackNavigation}\n              className=\"hover:bg-white/50\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <RefreshCw className=\"w-8 h-8 text-orange-600 mr-3\" />\n                Nexitel SIM Swap\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Replace damaged or lost SIM cards for Nexitel customers</p>\n            </div>\n          </div>\n          \n          {/* Balance Display */}\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border\">\n            <div className=\"text-sm text-gray-500\">Your Balance</div>\n            <div className=\"text-2xl font-bold text-orange-600\">${user?.balance || \"0.00\"}</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* SIM Swap Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"w-5 h-5 text-orange-600 mr-2\" />\n                  SIM Swap Request\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Employee Verification Required */}\n                    <div className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <h3 className=\"text-sm font-semibold text-red-800 mb-3 flex items-center\">\n                        <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n                        Employee Verification Required\n                      </h3>\n                      <FormField\n                        control={form.control}\n                        name=\"employeeId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-xs\">Employee ID *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your employee ID\" \n                                {...field} \n                                className=\"font-mono h-8\"\n                                size={20}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Customer Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"phoneNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"(555) 123-4567\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Email (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\"\n                                placeholder=\"customer@example.com\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* SIM Card Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"oldIccid\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Old ICCID</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Current SIM ICCID\" \n                                {...field} \n                                className=\"font-mono\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"newIccid\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>New ICCID</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"New SIM ICCID\" \n                                {...field} \n                                className=\"font-mono\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Swap Reason */}\n                    <FormField\n                      control={form.control}\n                      name=\"reason\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Reason for SIM Swap</FormLabel>\n                          <Select onValueChange={handleReasonChange}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select reason for swap\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {SWAP_REASONS.map((reason) => (\n                                <SelectItem key={reason.value} value={reason.value}>\n                                  {reason.label} - {reason.description}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notes (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Additional notes about the SIM swap...\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Reason Preview */}\n                    {selectedReason && (\n                      <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                        <h3 className=\"font-semibold text-orange-900 mb-2\">Swap Reason</h3>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-orange-700\">Reason:</span>\n                            <span className=\"font-medium text-orange-900\">{selectedReason.label}</span>\n                          </div>\n                          <div className=\"text-sm text-orange-600\">{selectedReason.description}</div>\n                        </div>\n                      </div>\n                    )}\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                      disabled={simSwapMutation.isPending}\n                    >\n                      {simSwapMutation.isPending ? \"Processing...\" : \"Process SIM Swap\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Information Sidebar */}\n          <div>\n            <Card className=\"bg-white shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">SIM Swap Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Service transferred immediately to new SIM\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Old SIM will be deactivated automatically\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Phone number and plan remain unchanged\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      Confirmation SMS sent to customer\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Requirements</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm text-gray-600\">\n                      • Valid phone number and old ICCID\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      • New SIM card ICCID\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      • Reason for replacement\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      • Employee ID verification\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <Badge variant=\"outline\" className=\"text-orange-600 border-orange-300\">\n                    No Additional Cost\n                  </Badge>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    SIM swap service is free for existing customers\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15930},"client/src/pages/retailer/BulkActivation.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Upload, FileText, Download, AlertCircle, CheckCircle, X, Clock, Users, Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function BulkActivation() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n  const [progress, setProgress] = useState(0);\n  const [currentRow, setCurrentRow] = useState(0);\n  const [totalRows, setTotalRows] = useState(0);\n  const [processingStats, setProcessingStats] = useState({\n    successful: 0,\n    failed: 0,\n    total: 0\n  });\n\n  if (!user || user.role !== \"retailer\") {\n    return <div>Access denied</div>;\n  }\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"text/csv\" && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a CSV file only.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setUploadedFile(file);\n      setResults([]);\n    }\n  };\n\n  const processBulkActivation = async () => {\n    if (!uploadedFile) return;\n\n    setIsProcessing(true);\n    try {\n      // Read and parse CSV file\n      const text = await uploadedFile.text();\n      const lines = text.split('\\n').filter(line => line.trim());\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      // Validate CSV format\n      const requiredHeaders = ['iccid', 'sim_type', 'plan', 'customer_name', 'phone_number'];\n      const optionalHeaders = ['email', 'address', 'carrier', 'notes'];\n      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\n      \n      if (missingHeaders.length > 0) {\n        toast({\n          title: \"Invalid CSV Format\",\n          description: `Missing required columns: ${missingHeaders.join(', ')}`,\n          variant: \"destructive\",\n        });\n        setIsProcessing(false);\n        return;\n      }\n\n      // Process each row with progress tracking\n      const activationResults = [];\n      const total = lines.length - 1;\n      setTotalRows(total);\n      setProcessingStats({ successful: 0, failed: 0, total });\n      \n      for (let i = 1; i < lines.length; i++) {\n        setCurrentRow(i);\n        setProgress((i / total) * 100);\n        const values = lines[i].split(',').map(v => v.trim());\n        const row: any = {};\n        headers.forEach((header, index) => {\n          row[header] = values[index];\n        });\n\n        // Validate required fields\n        const validationErrors = [];\n        if (!row.iccid || row.iccid.length !== 20) {\n          validationErrors.push('Invalid ICCID format');\n        }\n        if (!row.customer_name) {\n          validationErrors.push('Customer name required');\n        }\n        if (!row.phone_number) {\n          validationErrors.push('Phone number required');\n        }\n        if (!row.plan) {\n          validationErrors.push('Plan required');\n        }\n\n        // Simulate activation process with validation\n        const hasValidationErrors = validationErrors.length > 0;\n        const success = !hasValidationErrors && Math.random() > 0.05; // 95% success rate for valid data\n        \n        const result = {\n          row: i,\n          iccid: row.iccid,\n          customer_name: row.customer_name,\n          phone_number: row.phone_number,\n          plan: row.plan,\n          sim_type: row.sim_type,\n          email: row.email || 'N/A',\n          address: row.address || 'N/A',\n          carrier: row.carrier || 'Nexitel',\n          status: success ? 'success' : 'failed',\n          message: hasValidationErrors ? validationErrors.join(', ') : \n                   success ? 'Activation successful - SIM activated and ready' : \n                   'Activation failed - Network error, please retry',\n          timestamp: new Date().toISOString()\n        };\n        \n        activationResults.push(result);\n        \n        // Update stats\n        setProcessingStats(prev => ({\n          ...prev,\n          successful: prev.successful + (success ? 1 : 0),\n          failed: prev.failed + (success ? 0 : 1)\n        }));\n        \n        // Add small delay to show progress (remove in production)\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      setResults(activationResults);\n      setProgress(100);\n      \n      const successCount = activationResults.filter(r => r.status === 'success').length;\n      const failCount = activationResults.filter(r => r.status === 'failed').length;\n      \n      toast({\n        title: \"Bulk Activation Complete\",\n        description: `Processed ${activationResults.length} activations: ${successCount} successful, ${failCount} failed`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Processing Error\",\n        description: \"Failed to process the CSV file\",\n        variant: \"destructive\",\n      });\n    }\n    setIsProcessing(false);\n    setProgress(0);\n    setCurrentRow(0);\n  };\n\n  const downloadTemplate = () => {\n    const csvContent = \"iccid,sim_type,plan,customer_name,phone_number,email,address,carrier,notes\\n\" +\n      \"89148000012345678901,Physical,Unlimited Plan,John Doe,+1-555-0123,john@example.com,123 Main St,Nexitel,Premium customer\\n\" +\n      \"89148000012345678902,eSIM,Basic Plan,Jane Smith,+1-555-0124,jane@example.com,456 Oak Ave,Nexitel,Business account\\n\" +\n      \"89148000012345678903,Physical,Data Only Plan,Bob Johnson,+1-555-0125,bob@example.com,789 Pine Rd,Nexitel,IoT device\";\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'bulk_activation_template.csv';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  const downloadResults = () => {\n    if (results.length === 0) return;\n    \n    const timestamp = new Date().toISOString().split('T')[0];\n    const csvContent = \"row,iccid,customer_name,phone_number,plan,sim_type,email,address,carrier,status,message,processed_date\\n\" +\n      results.map(r => `${r.row},\"${r.iccid}\",\"${r.customer_name}\",\"${r.phone_number}\",\"${r.plan}\",\"${r.sim_type}\",\"${r.email}\",\"${r.address}\",\"${r.carrier}\",\"${r.status}\",\"${r.message}\",\"${timestamp}\"`).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = `bulk_activation_results_${timestamp}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                type=\"button\"\n                onClick={() => window.location.href = '/retailer/dashboard'}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Bulk Activation</h1>\n                <p className=\"text-sm text-gray-600\">Upload CSV file to activate multiple SIMs</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Instructions */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <FileText className=\"w-5 h-5 mr-2\" />\n              CSV File Format Instructions\n            </CardTitle>\n            <CardDescription>\n              Follow these guidelines to prepare your bulk activation file\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Required Columns:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n                  <li><strong>iccid</strong> - SIM card ICCID (20 digits)</li>\n                  <li><strong>sim_type</strong> - Physical or eSIM</li>\n                  <li><strong>plan</strong> - Service plan name</li>\n                  <li><strong>customer_name</strong> - Full customer name</li>\n                  <li><strong>phone_number</strong> - Customer phone number</li>\n                  <li><strong>email</strong> - Customer email (optional)</li>\n                  <li><strong>address</strong> - Customer address (optional)</li>\n                  <li><strong>carrier</strong> - Network carrier (optional, defaults to Nexitel)</li>\n                  <li><strong>notes</strong> - Additional notes (optional)</li>\n                </ul>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button onClick={downloadTemplate} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Template\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* File Upload */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Upload CSV File</CardTitle>\n            <CardDescription>\n              Select your prepared CSV file for bulk activation\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div\n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-purple-400 transition-colors cursor-pointer\"\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <div className=\"text-lg font-medium text-gray-900 mb-2\">\n                  {uploadedFile ? uploadedFile.name : \"Choose CSV file\"}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Click to browse or drag and drop your CSV file here\n                </div>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                />\n              </div>\n\n              {uploadedFile && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between bg-green-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                      <div>\n                        <p className=\"font-medium text-green-900\">{uploadedFile.name}</p>\n                        <p className=\"text-sm text-green-600\">\n                          {uploadedFile.size > 0 ? `${Math.round(uploadedFile.size / 1024)} KB` : ''} • File ready for processing\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        onClick={processBulkActivation}\n                        disabled={isProcessing}\n                        className=\"bg-purple-600 hover:bg-purple-700\"\n                      >\n                        {isProcessing ? (\n                          <div className=\"flex items-center\">\n                            <Zap className=\"w-4 h-4 mr-2 animate-pulse\" />\n                            Processing...\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center\">\n                            <Zap className=\"w-4 h-4 mr-2\" />\n                            Start Activation\n                          </div>\n                        )}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => {\n                          setUploadedFile(null);\n                          setResults([]);\n                          setProgress(0);\n                          setCurrentRow(0);\n                        }}\n                        disabled={isProcessing}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Progress Bar */}\n                  {isProcessing && (\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-blue-900\">\n                          Processing activations...\n                        </span>\n                        <span className=\"text-sm text-blue-600\">\n                          {currentRow} of {totalRows}\n                        </span>\n                      </div>\n                      <Progress value={progress} className=\"mb-2\" />\n                      <div className=\"flex items-center justify-between text-xs text-blue-600\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center\">\n                            <CheckCircle className=\"w-3 h-3 mr-1 text-green-600\" />\n                            {processingStats.successful} successful\n                          </div>\n                          <div className=\"flex items-center\">\n                            <AlertCircle className=\"w-3 h-3 mr-1 text-red-600\" />\n                            {processingStats.failed} failed\n                          </div>\n                        </div>\n                        <div>{Math.round(progress)}% complete</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results */}\n        {results.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    Activation Results\n                    <Badge variant=\"outline\" className=\"ml-2\">\n                      {results.length} total\n                    </Badge>\n                  </CardTitle>\n                  <CardDescription className=\"flex flex-wrap items-center gap-4 mt-2\">\n                    <div className=\"flex items-center gap-1\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-green-600 font-medium\">\n                        {results.filter(r => r.status === 'success').length} successful\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <AlertCircle className=\"w-4 h-4 text-red-600\" />\n                      <span className=\"text-red-600 font-medium\">\n                        {results.filter(r => r.status === 'failed').length} failed\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-gray-500 text-sm\">\n                        Completed at {new Date().toLocaleTimeString()}\n                      </span>\n                    </div>\n                  </CardDescription>\n                </div>\n                <Button onClick={downloadResults} variant=\"outline\" className=\"shrink-0\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Results\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {results.map((result, index) => (\n                  <div\n                    key={index}\n                    className={`flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 rounded-lg gap-2 ${\n                      result.status === 'success' ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n                    }`}\n                  >\n                    <div className=\"flex items-center min-w-0 flex-1\">\n                      {result.status === 'success' ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mr-3 shrink-0\" />\n                      ) : (\n                        <AlertCircle className=\"w-5 h-5 text-red-600 mr-3 shrink-0\" />\n                      )}\n                      <div className=\"min-w-0 flex-1\">\n                        <div className=\"flex flex-wrap items-center gap-2 mb-1\">\n                          <p className={`font-medium ${\n                            result.status === 'success' ? 'text-green-900' : 'text-red-900'\n                          }`}>\n                            {result.customer_name}\n                          </p>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {result.plan}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {result.sim_type}\n                          </Badge>\n                        </div>\n                        <div className=\"flex flex-wrap gap-1 text-xs text-gray-500\">\n                          <span className=\"break-all\">{result.iccid}</span>\n                          <span>•</span>\n                          <span>{result.phone_number}</span>\n                          <span>•</span>\n                          <span>{result.carrier}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right shrink-0 w-full sm:w-auto\">\n                      <p className={`text-sm font-medium ${\n                        result.status === 'success' ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {result.message}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":19493},"client/src/pages/retailer/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport {\n  Phone,\n  Smartphone,\n  Globe,\n  Zap,\n  TrendingUp,\n  FileText,\n  CreditCard,\n  DollarSign,\n  Plus,\n  Users,\n  Crown\n} from \"lucide-react\";\n\nexport default function RetailerDashboard() {\n  const { user } = useAuth();\n  const [permissionsLoading, setPermissionsLoading] = useState(true);\n  const [walletPermissions, setWalletPermissions] = useState(null);\n  const [retailerPermissions, setRetailerPermissions] = useState(null);\n  const [attPermissions, setAttPermissions] = useState(null);\n\n  // Fetch all permissions when component mounts\n  useEffect(() => {\n    if (!user?.id) return;\n\n    const fetchAllPermissions = async () => {\n      setPermissionsLoading(true);\n      console.log('🚀 Starting permission fetch for user:', user.id);\n\n      try {\n        // Fetch wallet permissions\n        const walletRes = await fetch(`/api/wallet/permissions/${user.id}`, {\n          credentials: 'include'\n        });\n        if (walletRes.ok) {\n          const walletData = await walletRes.json();\n          console.log('✓ Wallet permissions loaded:', walletData);\n          setWalletPermissions(walletData);\n        }\n\n        // Fetch retailer permissions\n        const retailerRes = await fetch(`/api/retailer-permissions/${user.id}`, {\n          credentials: 'include'\n        });\n        if (retailerRes.ok) {\n          const retailerData = await retailerRes.json();\n          console.log('✓ Retailer permissions loaded:', retailerData);\n          setRetailerPermissions(retailerData);\n        } else {\n          console.error('Retailer permissions failed:', retailerRes.status, await retailerRes.text());\n        }\n\n        // Fetch AT&T permissions\n        const attRes = await fetch(`/api/att/permissions/${user.id}`, {\n          credentials: 'include'\n        });\n        if (attRes.ok) {\n          const attData = await attRes.json();\n          console.log('✓ AT&T permissions loaded:', attData);\n          setAttPermissions(attData);\n        } else {\n          console.error('AT&T permissions failed:', attRes.status, await attRes.text());\n        }\n\n      } catch (error) {\n        console.error('Permission fetch error:', error);\n      } finally {\n        setPermissionsLoading(false);\n      }\n    };\n\n    fetchAllPermissions();\n  }, [user?.id]);\n\n  // Combine permissions for easier access\n  const permissions = {\n    ...(walletPermissions || {}),\n    ...(retailerPermissions || {})\n  };\n\n  // Check if retailer has specific service permissions\n  const hasNexitelAccess = (permissions as any)?.nexitelActivationAccess || (permissions as any)?.simSwapAccess || (permissions as any)?.portInAccess || false;\n  const hasUSARechargeAccess = (permissions as any)?.usaRechargeAccess || false;\n  const hasGlobalRechargeAccess = (permissions as any)?.globalRechargeAccess || false;\n  const hasVoipAccess = (permissions as any)?.voipServiceAccess || false;\n  const hasAttAccess = (attPermissions as any)?.canActivate || (attPermissions as any)?.canRecharge || (attPermissions as any)?.canSimSwap || (attPermissions as any)?.canSellDataAddons || (attPermissions as any)?.canPortIn || (attPermissions as any)?.canEnableWifiCalling || false;\n\n  // Debug permission states\n  console.log('🔍 Permission states:', {\n    user: user?.id,\n    permissionsLoading,\n    walletPermissions: !!walletPermissions,\n    retailerPermissions: !!retailerPermissions,\n    attPermissions: !!attPermissions,\n    hasAttAccess\n  });\n\n  const { data: userTransactions } = useQuery({\n    queryKey: [\"/api/transactions/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">\n                Retailer Portal\n              </h1>\n              <p className=\"text-sm sm:text-base text-gray-600\">Welcome back, {user?.username}! Manage your services and customers</p>\n            </div>\n            <div className=\"text-left sm:text-right min-w-0 flex-shrink-0\">\n              <div className=\"text-sm text-gray-500\">Portal Balance</div>\n              <div className=\"flex items-center justify-start sm:justify-end gap-3\">\n                <div className=\"text-2xl sm:text-3xl font-bold text-green-600\">${user?.balance || \"0.00\"}</div>\n                <Link href=\"/retailer/wallet\">\n                  <Button \n                    size=\"sm\" \n                    className=\"bg-blue-600 hover:bg-blue-700 text-white min-h-[36px]\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Funds\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Retailer Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Today's Revenue</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    $0.00\n                  </p>\n                </div>\n                <div className=\"bg-green-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <DollarSign className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Total Transactions</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    {(userTransactions as any)?.length || 0}\n                  </p>\n                </div>\n                <div className=\"bg-blue-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Active Services</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    {[hasNexitelAccess, hasUSARechargeAccess, hasGlobalRechargeAccess, hasVoipAccess, hasAttAccess].filter(Boolean).length}\n                  </p>\n                </div>\n                <div className=\"bg-purple-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <Smartphone className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-600 truncate\">Current Balance</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-gray-900\">\n                    ${user?.balance || \"0.00\"}\n                  </p>\n                </div>\n                <div className=\"bg-orange-100 p-2 sm:p-3 rounded-full flex-shrink-0\">\n                  <CreditCard className=\"w-5 h-5 sm:w-6 sm:h-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Service Groups */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4 mb-8 items-stretch\">\n          \n          {/* Loading state */}\n          {permissionsLoading && (\n            <Card className=\"col-span-full bg-white shadow-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2\"></div>\n                <p className=\"text-gray-600\">Loading your services...</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* No permissions message */}\n          {!permissionsLoading && !hasNexitelAccess && !hasUSARechargeAccess && !hasGlobalRechargeAccess && !hasVoipAccess && !hasAttAccess && (\n            <Card className=\"col-span-full bg-yellow-50 border-yellow-200 shadow-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"mb-4\">\n                  <div className=\"bg-yellow-100 p-3 rounded-full inline-block\">\n                    <Crown className=\"w-6 h-6 text-yellow-600\" />\n                  </div>\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Access Pending</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Your account is being set up. Please contact your administrator to enable service access.\n                </p>\n                <div className=\"text-sm text-gray-500\">\n                  <p>Services available upon approval:</p>\n                  <ul className=\"mt-2 space-y-1\">\n                    <li>• Nexitel Services (Activation, Recharge, SIM Swap)</li>\n                    <li>• USA Carriers (Domestic Recharge)</li>  \n                    <li>• Global Recharge (International Top-up)</li>\n                    <li>• VoIP Services (NexiPhone Activation)</li>\n                    <li>• AT&T Services (Activation, Recharge, Data Add-ons)</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Nexitel Services Group */}\n          {!permissionsLoading && hasNexitelAccess && (\n          <Card className=\"bg-gradient-to-br from-blue-50 to-green-50 border-blue-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Smartphone className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-xl font-bold text-blue-900\">Nexitel</CardTitle>\n              <CardDescription className=\"text-blue-700\">Complete wireless service management</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/nexitel-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Smartphone className=\"w-4 h-4 mr-2\" />\n                  New Activation\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Recharge\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-data-addons\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Data Add-ons\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-sim-swap\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  SIM Swap\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-port-status\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Port-In Status\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-activation-report\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Reports\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* NexiPhone Services Group */}\n          {!permissionsLoading && hasVoipAccess && (\n          <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-purple-900\">NexiPhone</CardTitle>\n              <CardDescription className=\"text-purple-700\">VoIP and calling services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/voip-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  VoIP Services\n                </Button>\n              </Link>\n              <Link href=\"/nexiphone-apps\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Mobile Apps\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100 text-sm py-2\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* USA Carriers Services Group */}\n          {!permissionsLoading && hasUSARechargeAccess && (\n          <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-blue-900\">USA Carriers</CardTitle>\n              <CardDescription className=\"text-blue-700\">Domestic US mobile carriers & services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/usa-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  USA Recharge\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100 text-sm py-2\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Reports\n              </Button>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* AT&T Services Group */}\n          {!permissionsLoading && hasAttAccess && (\n          <Card className=\"bg-gradient-to-br from-red-50 to-orange-50 border-red-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Smartphone className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-red-900\">AT&T</CardTitle>\n              <CardDescription className=\"text-red-700\">Complete AT&T wireless service management</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/att-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Smartphone className=\"w-4 h-4 mr-2\" />\n                  New Activation\n                </Button>\n              </Link>\n              <Link href=\"/att-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Recharge\n                </Button>\n              </Link>\n              <Link href=\"/att-data-addons\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Data Add-ons\n                </Button>\n              </Link>\n              <Link href=\"/att-port-in\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  Port-In Status\n                </Button>\n              </Link>\n              <Link href=\"/att-sim-swap\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  SIM Swap\n                </Button>\n              </Link>\n              <Link href=\"/att-reports\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-800 hover:bg-red-100 text-sm py-2\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Reports\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* Global Recharge Services Group */}\n          {!permissionsLoading && hasGlobalRechargeAccess && (\n          <Card className=\"bg-gradient-to-br from-green-50 to-teal-50 border-green-200 hover:shadow-xl transition-all duration-300 h-full flex flex-col\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-green-900\">Global Recharge</CardTitle>\n              <CardDescription className=\"text-green-700\">International mobile top-up services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2 flex-1\">\n              <Link href=\"/global-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  International Recharge\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100 text-sm py-2\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Reports\n              </Button>\n            </CardContent>\n          </Card>\n          )}\n        </div>\n\n        {/* Retailer Management Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Quick Actions */}\n          <Card className=\"bg-white shadow-sm\">\n            <CardHeader className=\"border-b border-gray-200\">\n              <CardTitle className=\"text-lg font-semibold text-gray-900\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3\">\n                <Link href=\"/retailer/transactions\">\n                  <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-sm py-3\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Transaction History\n                  </Button>\n                </Link>\n                <Link href=\"/retailer/wallet\">\n                  <Button className=\"w-full bg-green-600 hover:bg-green-700 text-sm py-3\">\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    Wallet Funding\n                  </Button>\n                </Link>\n                <Link href=\"/retailer/reports\">\n                  <Button className=\"w-full bg-purple-600 hover:bg-purple-700 text-sm py-3\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    Daily Reports\n                  </Button>\n                </Link>\n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700 text-sm py-3\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Customer Support\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card className=\"bg-white shadow-sm\">\n            <CardHeader className=\"border-b border-gray-200\">\n              <CardTitle className=\"text-lg font-semibold text-gray-900\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4 sm:p-6\">\n              {userTransactions && (userTransactions as any).length > 0 ? (\n                <div className=\"space-y-3\">\n                  {(userTransactions as any).slice(0, 5).map((transaction: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                        <div>\n                          <p className=\"font-medium\">{transaction.country} - {transaction.carrier}</p>\n                          <p className=\"text-gray-500\">{transaction.phoneNumber}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">${transaction.amount}</p>\n                        <p className=\"text-gray-500\">{new Date(transaction.createdAt).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <TrendingUp className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No recent transactions</p>\n                  <p className=\"text-sm\">Start processing recharges to see activity here</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24462},"client/src/pages/retailer/GlobalMenu.tsx":{"content":"import { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Globe, CreditCard, FileText, DollarSign } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function GlobalMenu() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  \n  // Fetch fresh user data to get updated balance\n  const { data: freshUser } = useQuery({\n    queryKey: [`/api/users/${user?.id}`],\n    enabled: !!user?.id,\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Use fresh user data if available, otherwise fall back to auth user\n  const currentUser = freshUser || user;\n\n  const handleBackToDashboard = () => {\n    // Force a full page navigation to ensure authentication persists\n    window.location.href = \"/retailer/dashboard\";\n  };\n\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-2\"></div>\n        <p className=\"text-gray-600\">Loading...</p>\n      </div>\n    </div>;\n  }\n\n  if (!isAuthenticated || !user || user.role !== \"retailer\") {\n    return <div>Access denied. Please log in again.</div>;\n  }\n\n  const services = [\n    {\n      title: \"Mobile Recharge\",\n      description: \"International mobile phone top-up services worldwide\",\n      icon: CreditCard,\n      href: \"/nexitel-recharge\",\n      color: \"green\"\n    },\n    {\n      title: \"Transaction History\",\n      description: \"View your global recharge transaction history and reports\",\n      icon: FileText,\n      href: \"/retailer/transactions\",\n      color: \"blue\"\n    }\n  ];\n\n  const getColorClasses = (color: string) => {\n    const colors: any = {\n      green: \"border-green-100 hover:border-green-200 hover:bg-green-50\",\n      blue: \"border-blue-100 hover:border-blue-200 hover:bg-blue-50\"\n    };\n    return colors[color] || colors.green;\n  };\n\n  const getIconColorClasses = (color: string) => {\n    const colors: any = {\n      green: \"bg-green-100 text-green-600\",\n      blue: \"bg-blue-100 text-blue-600\"\n    };\n    return colors[color] || colors.green;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                type=\"button\"\n                onClick={handleBackToDashboard}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Globe className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Global Recharge</h1>\n                  <p className=\"text-sm text-gray-600\">International mobile phone top-up services</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-right\">\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                    Account Balance\n                  </div>\n                  <div className=\"text-lg font-semibold text-green-600\">${(currentUser as any)?.balance || \"0.00\"}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Services Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          {services.map((service, index) => {\n            const Icon = service.icon;\n            return (\n              <Card \n                key={index}\n                className={`hover:shadow-lg transition-all duration-200 cursor-pointer h-full ${getColorClasses(service.color)}`}\n                onClick={() => window.location.href = service.href}\n              >\n                <CardHeader className=\"text-center pb-6\">\n                  <div className={`w-16 h-16 rounded-lg flex items-center justify-center mx-auto mb-4 ${getIconColorClasses(service.color)}`}>\n                    <Icon className=\"w-8 h-8\" />\n                  </div>\n                  <CardTitle className=\"text-xl\">{service.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0 pb-8\">\n                  <CardDescription className=\"text-center\">\n                    {service.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Feature Highlights */}\n        <div className=\"mt-12 bg-white rounded-xl shadow-sm p-6 border\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Global Recharge Features</h3>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <Globe className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h4 className=\"font-medium text-gray-900\">Worldwide Coverage</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">Support for 6 regions and 100+ countries</p>\n            </div>\n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <CreditCard className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h4 className=\"font-medium text-gray-900\">Instant Processing</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">Real-time mobile top-up processing</p>\n            </div>\n            <div className=\"text-center p-4\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <FileText className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h4 className=\"font-medium text-gray-900\">Detailed Reports</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">Complete transaction history and analytics</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6948},"client/src/pages/retailer/NexitelMenu.tsx":{"content":"import { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Smartphone, CreditCard, FileText, Users, RefreshCw, Router, Upload, Wifi } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function NexitelMenu() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const handleBackToDashboard = () => {\n    // Force a full page navigation to ensure authentication persists\n    window.location.href = \"/retailer/dashboard\";\n  };\n\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2\"></div>\n        <p className=\"text-gray-600\">Loading...</p>\n      </div>\n    </div>;\n  }\n\n  if (!isAuthenticated || !user || user.role !== \"retailer\") {\n    return <div>Access denied. Please log in again.</div>;\n  }\n\n  const services = [\n    {\n      title: \"New Activation\",\n      description: \"Activate new Nexitel services for customers\",\n      icon: Users,\n      href: \"/nexitel-activation\",\n      color: \"blue\"\n    },\n    {\n      title: \"Recharge\",\n      description: \"Top-up Nexitel Purple and Blue services\",\n      icon: CreditCard,\n      href: \"/nexitel-recharge\",\n      color: \"green\"\n    },\n    {\n      title: \"Recharge Report\",\n      description: \"View recharge transaction history and analytics\",\n      icon: FileText,\n      href: \"/nexitel-recharge-report\",\n      color: \"purple\"\n    },\n    {\n      title: \"Activation Report\",\n      description: \"Track activation records and customer data\",\n      icon: FileText,\n      href: \"/nexitel-activation-report\",\n      color: \"indigo\"\n    },\n    {\n      title: \"SIM Swap\",\n      description: \"Replace damaged or lost SIM cards\",\n      icon: RefreshCw,\n      href: \"/nexitel-sim-swap\",\n      color: \"orange\"\n    },\n    {\n      title: \"Port-In Status\",\n      description: \"Track number porting requests and progress\",\n      icon: Router,\n      href: \"/nexitel-port-status\",\n      color: \"teal\"\n    },\n    {\n      title: \"Bulk Activation\",\n      description: \"Upload CSV file for Nexitel Blue/Purple batch activations\",\n      icon: Upload,\n      href: \"/nexitel-bulk-activation\",\n      color: \"pink\"\n    },\n    {\n      title: \"WiFi Calling Enable\",\n      description: \"Enable WiFi calling services for Nexitel customers with emergency address\",\n      icon: Wifi,\n      href: \"/nexitel-wifi-calling\",\n      color: \"cyan\"\n    }\n  ];\n\n  const getColorClasses = (color: string) => {\n    const colors: any = {\n      blue: \"border-blue-100 hover:border-blue-200 hover:bg-blue-50\",\n      green: \"border-green-100 hover:border-green-200 hover:bg-green-50\",\n      purple: \"border-purple-100 hover:border-purple-200 hover:bg-purple-50\",\n      indigo: \"border-indigo-100 hover:border-indigo-200 hover:bg-indigo-50\",\n      orange: \"border-orange-100 hover:border-orange-200 hover:bg-orange-50\",\n      teal: \"border-teal-100 hover:border-teal-200 hover:bg-teal-50\",\n      pink: \"border-pink-100 hover:border-pink-200 hover:bg-pink-50\",\n      cyan: \"border-cyan-100 hover:border-cyan-200 hover:bg-cyan-50\"\n    };\n    return colors[color] || colors.blue;\n  };\n\n  const getIconColorClasses = (color: string) => {\n    const colors: any = {\n      blue: \"bg-blue-100 text-blue-600\",\n      green: \"bg-green-100 text-green-600\",\n      purple: \"bg-purple-100 text-purple-600\",\n      indigo: \"bg-indigo-100 text-indigo-600\",\n      orange: \"bg-orange-100 text-orange-600\",\n      teal: \"bg-teal-100 text-teal-600\",\n      pink: \"bg-pink-100 text-pink-600\",\n      cyan: \"bg-cyan-100 text-cyan-600\"\n    };\n    return colors[color] || colors.blue;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                type=\"button\"\n                onClick={handleBackToDashboard}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Smartphone className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Nexitel Activation</h1>\n                  <p className=\"text-sm text-gray-600\">Complete wireless service management</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Services Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {services.map((service, index) => {\n            const Icon = service.icon;\n            return (\n              <Link key={index} href={service.href}>\n                <Card className={`hover:shadow-md transition-all duration-200 cursor-pointer ${getColorClasses(service.color)}`}>\n                  <CardHeader className=\"text-center pb-4\">\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-3 ${getIconColorClasses(service.color)}`}>\n                      <Icon className=\"w-6 h-6\" />\n                    </div>\n                    <CardTitle className=\"text-lg\">{service.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <CardDescription className=\"text-center text-sm\">\n                      {service.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6342},"client/src/pages/retailer/RetailerDashboard.tsx":{"content":"import { useAuth } from \"@/components/AuthProvider\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\nimport { \n  Store, \n  DollarSign, \n  CreditCard, \n  Users, \n  Activity,\n  LogOut,\n  Smartphone,\n  TrendingUp,\n  Clock,\n  CheckCircle,\n  ChevronRight,\n  Globe,\n  Phone,\n  Zap,\n  ScanLine,\n  RefreshCw,\n  FileText,\n  Shield,\n  Wifi\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { CommissionDisplay } from \"@/components/CommissionDisplay\";\nimport nexitelLogo from \"@assets/resize_1755316599807.jpg\";\n\nexport default function RetailerDashboard() {\n  const { user, logout, isAuthenticated, isLoading } = useAuth();\n  const [permissions, setPermissions] = useState<any>(null);\n  const [permissionsLoading, setPermissionsLoading] = useState(true);\n  \n  // Fetch fresh user data to get updated balance\n  const { data: freshUser } = useQuery({\n    queryKey: [`/api/users/${user?.id}`],\n    enabled: !!user?.id,\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Use fresh user data if available, otherwise fall back to auth user\n  const currentUser = freshUser || user;\n\n  // Fetch retailer permissions\n  useEffect(() => {\n    console.log('RetailerDashboard useEffect triggered:', { user, userId: user?.id, userRole: user?.role });\n    if (user?.id) {\n      console.log('Fetching permissions for user:', user.id);\n      setPermissionsLoading(true);\n      \n      apiRequest(`/api/wallet/permissions/${user.id}`)\n        .then((response) => {\n          console.log('Permissions response:', response);\n          setPermissions(response);\n          setPermissionsLoading(false);\n        })\n        .catch((error) => {\n          console.error('Error fetching permissions:', error);\n          setPermissions(null);\n          setPermissionsLoading(false);\n        });\n    } else {\n      console.log('No user ID found, skipping permissions fetch');\n      setPermissionsLoading(false);\n    }\n  }, [user?.id]);\n\n  // Check if retailer has specific service permissions\n  const hasNexitelAccess = permissions !== null ? \n    (permissions?.nexitelActivationAccess || false) : \n    false;\n  const hasVoipAccess = permissions !== null ? \n    (permissions?.voipServiceAccess || false) : \n    false;\n  const hasGlobalRechargeAccess = permissions !== null ? \n    (permissions?.globalRechargeAccess || false) : \n    false;\n\n  // Individual service permissions within Nexitel\n  const hasSimSwapAccess = permissions?.simSwapAccess || false;\n  const hasPortInAccess = permissions?.portInAccess || false;\n\n  // Debug logging\n  console.log('RetailerDashboard render:', { user, permissions, permissionsLoading, hasNexitelAccess, hasVoipAccess, hasGlobalRechargeAccess });\n\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2\"></div>\n        <p className=\"text-gray-600\">Loading dashboard...</p>\n      </div>\n    </div>;\n  }\n\n  if (!isAuthenticated || !user || user.role !== \"retailer\") {\n    return <div>Access denied</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center py-4 gap-4\">\n            <div className=\"flex items-center\">\n              <Store className=\"w-6 h-6 sm:w-8 sm:h-8 text-purple-600 mr-3\" />\n              <div>\n                <h1 className=\"text-lg sm:text-xl font-semibold text-gray-900\">Retailer Portal</h1>\n                <p className=\"text-sm text-gray-500\">Welcome back, {(currentUser as any)?.username || user?.username}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4 w-full sm:w-auto\">\n              <Badge variant=\"outline\" className=\"text-purple-600 border-purple-200 hidden sm:flex\">\n                <Store className=\"w-3 h-3 mr-1\" />\n                Retailer\n              </Badge>\n              <Button variant=\"outline\" size=\"sm\" onClick={logout} className=\"ml-auto sm:ml-0\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Commission Display */}\n        <CommissionDisplay />\n        \n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Account Balance</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">${(currentUser as any)?.balance || user?.balance || \"0.00\"}</div>\n              <p className=\"text-xs text-muted-foreground\">Available for transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Today's Sales</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">$247.50</div>\n              <p className=\"text-xs text-muted-foreground\">+12 from yesterday</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Transactions</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">23</div>\n              <p className=\"text-xs text-muted-foreground\">Completed today</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Loading state */}\n        {permissionsLoading && (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-600\">Loading permissions...</p>\n          </div>\n        )}\n\n        {/* No permissions message */}\n        {!permissionsLoading && !hasNexitelAccess && !hasVoipAccess && !hasGlobalRechargeAccess && (\n          <Card className=\"bg-yellow-50 border-yellow-200 mb-8\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-4\">\n                <div className=\"bg-yellow-100 p-3 rounded-full inline-block\">\n                  <Store className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Access Pending</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Your account is being set up. Please contact your administrator to enable service access.\n              </p>\n              <div className=\"text-sm text-gray-500\">\n                <p>Services available upon approval:</p>\n                <ul className=\"mt-2 space-y-1\">\n                  <li>• Nexitel Services (Activation, Recharge, SIM Swap)</li>\n                  <li>• NexiPhone Services (VoIP, WiFi Calling)</li>  \n                  <li>• Global Recharge (International Top-up)</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Service Groups */}\n        {!permissionsLoading && (hasNexitelAccess || hasVoipAccess || hasGlobalRechargeAccess) && (\n        <div className={`grid grid-cols-1 gap-6 mb-8 ${\n          [hasNexitelAccess, hasVoipAccess, hasGlobalRechargeAccess].filter(Boolean).length > 2 \n            ? 'lg:grid-cols-3' \n            : [hasNexitelAccess, hasVoipAccess, hasGlobalRechargeAccess].filter(Boolean).length > 1\n            ? 'lg:grid-cols-2'\n            : 'lg:grid-cols-1 max-w-md mx-auto'\n        }`}>\n          \n          {/* Nexitel Services Group */}\n          {hasNexitelAccess && (\n          <Card className=\"bg-gradient-to-br from-blue-50 to-green-50 border-blue-200 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"flex justify-center mb-4\">\n                <img \n                  src={nexitelLogo} \n                  alt=\"Nexitel Logo\" \n                  className=\"w-16 h-16 object-contain\"\n                />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-blue-900\">Nexitel</CardTitle>\n              <CardDescription className=\"text-blue-700\">Complete wireless service management</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/nexitel-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <Smartphone className=\"w-4 h-4 mr-3\" />\n                  New Activation\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-recharge\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <Zap className=\"w-4 h-4 mr-3\" />\n                  Recharge\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-activation-report\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <FileText className=\"w-4 h-4 mr-3\" />\n                  Activation Report\n                </Button>\n              </Link>\n              <Link href=\"/nexitel-recharge-report\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <Activity className=\"w-4 h-4 mr-3\" />\n                  Recharge Report\n                </Button>\n              </Link>\n              {hasSimSwapAccess && (\n              <Link href=\"/nexitel-sim-swap\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <RefreshCw className=\"w-4 h-4 mr-3\" />\n                  SIM Swap\n                </Button>\n              </Link>\n              )}\n              {hasPortInAccess && (\n              <Link href=\"/nexitel-port-status\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-blue-800 hover:bg-blue-100\">\n                  <Shield className=\"w-4 h-4 mr-3\" />\n                  Port-In Status\n                </Button>\n              </Link>\n              )}\n            </CardContent>\n          </Card>\n          )}\n\n          {/* NexiPhone Services Group */}\n          {hasVoipAccess && (\n          <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-purple-900\">NexiPhone</CardTitle>\n              <CardDescription className=\"text-purple-700\">VoIP and calling services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/voip-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100\">\n                  <Phone className=\"w-4 h-4 mr-3\" />\n                  VoIP Activation\n                </Button>\n              </Link>\n              <Link href=\"/voip-bulk-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100\">\n                  <Users className=\"w-4 h-4 mr-3\" />\n                  Bulk VoIP Activation\n                </Button>\n              </Link>\n              <Link href=\"/wifi-calling-activation\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100\">\n                  <Wifi className=\"w-4 h-4 mr-3\" />\n                  WiFi Calling Setup\n                </Button>\n              </Link>\n              <Link href=\"/nexiphone-apps\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-purple-800 hover:bg-purple-100\">\n                  <Smartphone className=\"w-4 h-4 mr-3\" />\n                  NexiPhone Apps\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* Global Recharge Services Group */}\n          {hasGlobalRechargeAccess && (\n          <Card className=\"bg-gradient-to-br from-green-50 to-teal-50 border-green-200 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-xl font-bold text-green-900\">Global Recharge</CardTitle>\n              <CardDescription className=\"text-green-700\">International mobile top-up services</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/retailer/global-menu\">\n                <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100\">\n                  <Globe className=\"w-4 h-4 mr-3\" />\n                  International Recharge\n                </Button>\n              </Link>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100\">\n                <TrendingUp className=\"w-4 h-4 mr-3\" />\n                Country Analytics\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100\">\n                <FileText className=\"w-4 h-4 mr-3\" />\n                Global Reports\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-green-800 hover:bg-green-100\">\n                <CheckCircle className=\"w-4 h-4 mr-3\" />\n                Transaction History\n              </Button>\n            </CardContent>\n          </Card>\n          )}\n        </div>\n        )}\n\n        {/* Legacy Service Buttons (keeping for compatibility) */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8 opacity-0 hidden\">\n          {/* Nexitel Activation Button */}\n          <Link href=\"/retailer/nexitel-menu\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-purple-100 hover:shadow-xl hover:scale-105 transition-all duration-200 cursor-pointer\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Smartphone className=\"w-8 h-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Nexitel Services</h3>\n                <p className=\"text-gray-600 mb-4\">Complete wireless service management</p>\n                <div className=\"text-sm text-purple-600 font-medium\">\n                  8 Services Available\n                </div>\n              </div>\n            </div>\n          </Link>\n\n          {/* VoIP Services Button */}\n          <Link href=\"/voip-menu\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-orange-100 hover:shadow-xl hover:scale-105 transition-all duration-200 cursor-pointer\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">VoIP Services</h3>\n                <p className=\"text-gray-600 mb-4\">Business phone systems</p>\n                <div className=\"text-sm text-orange-600 font-medium\">\n                  Activation & Bulk Orders\n                </div>\n              </div>\n            </div>\n          </Link>\n\n          {/* Global Recharge Button */}\n          <Link href=\"/retailer/global-menu\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-green-100 hover:shadow-xl hover:scale-105 transition-all duration-200 cursor-pointer\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Globe className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Global Recharge</h3>\n                <p className=\"text-gray-600 mb-4\">International mobile phone top-up</p>\n                <div className=\"text-sm text-green-600 font-medium\">\n                  2 Services Available\n                </div>\n              </div>\n            </div>\n          </Link>\n        </div>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2\" />\n              Recent Activity\n            </CardTitle>\n            <CardDescription>Your latest transactions and activities</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                  <div>\n                    <p className=\"font-medium\">Nexitel Recharge</p>\n                    <p className=\"text-sm text-gray-500\">+1-555-0123 • Nexitel Purple $25</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium\">$27.50</p>\n                  <p className=\"text-sm text-gray-500\">2 hours ago</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-blue-600 mr-3\" />\n                  <div>\n                    <p className=\"font-medium\">Global Recharge</p>\n                    <p className=\"text-sm text-gray-500\">+44-20-7946-0958 • EE UK $10</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium\">$11.50</p>\n                  <p className=\"text-sm text-gray-500\">5 hours ago</p>\n                </div>\n              </div>\n\n              <div className=\"text-center py-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.location.href = '/retailer/transactions'}\n                >\n                  View All Transactions\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":20300},"client/src/pages/retailer/RetailerLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Store, ArrowRight, ArrowLeft, Shield } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport nexitelLogo from \"@assets/logo_1752374863163.jpg\";\n\nexport default function RetailerLogin() {\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      const response = await apiRequest(\"/api/auth/login\", { method: \"POST\", body: data });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.user.role !== \"retailer\") {\n        toast({\n          title: \"Access Denied\",\n          description: \"This portal is for retailers only. Please use the appropriate portal for your role.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      login(data.user);\n      toast({\n        title: \"Welcome to Retailer Portal\",\n        description: `Access granted for ${data.user.username}!`,\n      });\n      // Redirect to retailer dashboard\n      setLocation(\"/retailer/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid retailer credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    loginMutation.mutate(data);\n  };\n\n  // Demo retailer for quick testing\n  const handleDemoLogin = () => {\n    form.setValue(\"username\", \"retailer1\");\n    form.setValue(\"password\", \"retailer123\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"mb-4\">\n            <img \n              src={nexitelLogo} \n              alt=\"Nexitel Logo\" \n              className=\"w-20 h-20 mx-auto object-contain\"\n            />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-500 bg-clip-text text-transparent\">\n            Retailer Portal\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Manage your business operations and customer services</p>\n        </div>\n\n        {/* Security Notice */}\n        <Card className=\"mb-6 border-purple-200 bg-purple-50/50\">\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-center text-purple-700 text-sm\">\n              <Shield className=\"w-4 h-4 mr-2 flex-shrink-0\" />\n              <div>\n                <p className=\"font-medium\">Secure Retailer Access</p>\n                <p className=\"text-xs text-purple-600 mt-1\">\n                  Use credentials provided by your administrator\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Demo Access Card */}\n        <Card className=\"mb-6 border-blue-200 bg-blue-50/50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-blue-800 text-sm flex items-center\">\n              <Store className=\"w-4 h-4 mr-2\" />\n              Demo Access\n            </CardTitle>\n            <CardDescription className=\"text-xs text-blue-600\">\n              Click to auto-fill demo retailer credentials\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"outline\"\n              className=\"w-full text-blue-700 border-blue-300 hover:bg-blue-100\"\n              onClick={handleDemoLogin}\n            >\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Demo Retailer</div>\n                <div className=\"text-xs opacity-75\">retailer1</div>\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Login Form */}\n        <Card className=\"shadow-lg border-purple-100\">\n          <CardHeader className=\"bg-gradient-to-r from-purple-50 to-blue-50\">\n            <CardTitle className=\"flex items-center text-purple-800\">\n              <Store className=\"w-5 h-5 mr-2\" />\n              Retailer Login\n            </CardTitle>\n            <CardDescription>\n              Enter your retailer credentials provided by administration\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Retailer Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your retailer username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Access Retailer Portal\"}\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </form>\n            </Form>\n\n            {/* Forgot Password Link for Retailers */}\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/forgot-password\">\n                <Button variant=\"link\" className=\"text-sm text-muted-foreground hover:text-primary\">\n                  Forgot username or password?\n                </Button>\n              </Link>\n            </div>\n\n            {/* Back to main portal link */}\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"link\" className=\"text-sm text-muted-foreground hover:text-primary\">\n                  <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                  Back to Main Portal\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Support Info */}\n        <div className=\"mt-6 text-center text-sm text-gray-500\">\n          <p>Need help with your retailer account?</p>\n          <p className=\"text-xs mt-1\">Contact your administrator or support@nexitel.com</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7882},"client/src/pages/retailer/RetailerTransactions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  ArrowLeft, \n  Search, \n  Filter, \n  Download, \n  CheckCircle, \n  Clock, \n  XCircle,\n  DollarSign,\n  Calendar,\n  Smartphone\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n// import { format } from \"date-fns\";\n\nexport default function RetailerTransactions() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [serviceFilter, setServiceFilter] = useState(\"all\");\n\n  const { data: transactions, isLoading, error } = useQuery({\n    queryKey: [`/api/transactions/user/${user?.id}`],\n    enabled: !!user?.id,\n  });\n\n  console.log(\"Transaction query:\", { transactions, isLoading, error, userId: user?.id });\n\n  if (!user || user.role !== \"retailer\") {\n    return <div>Access denied</div>;\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading transactions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 mb-4\">Error loading transactions</div>\n          <p className=\"text-gray-600\">{error.toString()}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const safeTransactions = Array.isArray(transactions) ? transactions : [];\n  const filteredTransactions = safeTransactions.filter((transaction: any) => {\n    const matchesSearch = searchTerm === \"\" || \n                         transaction.phoneNumber.includes(searchTerm) || \n                         transaction.carrier.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.country.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || transaction.status === statusFilter;\n    // Remove service filter for now since we don't have transaction type\n    // const matchesService = serviceFilter === \"all\" || (transaction.type === serviceFilter);\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n  \n  console.log(\"Filtered transactions:\", filteredTransactions);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case \"failed\":\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"failed\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getServiceIcon = (type: string) => {\n    // Since we don't have transaction type in our current data structure,\n    // we'll use a generic icon\n    return <DollarSign className=\"w-4 h-4 text-green-600\" />;\n  };\n\n  const totalAmount = filteredTransactions.reduce((sum: number, transaction: any) => \n    sum + parseFloat(transaction.totalAmount), 0\n  );\n\n  const completedTransactions = filteredTransactions.filter((t: any) => t.status === \"completed\");\n  const completedAmount = completedTransactions.reduce((sum: number, transaction: any) => \n    sum + parseFloat(transaction.totalAmount), 0\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                onClick={() => window.location.href = '/retailer/dashboard'}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Transaction History</h1>\n                <p className=\"text-sm text-gray-500\">View and manage your transaction records</p>\n              </div>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center\">\n                <div className=\"text-2xl font-bold\">{filteredTransactions.length}</div>\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {completedTransactions.length} completed\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Volume</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">${totalAmount.toFixed(2)}</div>\n              <p className=\"text-sm text-gray-500\">All transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Completed Revenue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">${completedAmount.toFixed(2)}</div>\n              <p className=\"text-sm text-gray-500\">Successfully processed</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Filter className=\"w-5 h-5 mr-2\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Search</label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search phone, carrier, or country...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Status</label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Service</label>\n                <Select value={serviceFilter} onValueChange={setServiceFilter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All services\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Services</SelectItem>\n                    <SelectItem value=\"recharge\">Mobile Recharge</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transaction List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Recent Transactions ({filteredTransactions.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredTransactions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-gray-400 mb-4\">\n                  <DollarSign className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No transactions found</h3>\n                <p className=\"text-gray-500\">\n                  {searchTerm || statusFilter !== \"all\" || serviceFilter !== \"all\"\n                    ? \"Try adjusting your filters\"\n                    : \"Start processing transactions to see them here\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredTransactions.map((transaction: any) => (\n                  <div\n                    key={transaction.id}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      {getServiceIcon(\"recharge\")}\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\">{transaction.phoneNumber}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {transaction.carrier}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                          <span>{transaction.country}</span>\n                          <span>•</span>\n                          <span>${transaction.amount}</span>\n                          <span>•</span>\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {new Date(transaction.createdAt).toLocaleDateString('en-US', { \n                              month: 'short', \n                              day: 'numeric', \n                              year: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <div className=\"font-medium\">${transaction.totalAmount}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          Fee: ${transaction.serviceFee}\n                        </div>\n                      </div>\n                      <Badge className={getStatusColor(transaction.status)}>\n                        <div className=\"flex items-center space-x-1\">\n                          {getStatusIcon(transaction.status)}\n                          <span className=\"capitalize\">{transaction.status}</span>\n                        </div>\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":12742},"client/src/pages/retailer/TransactionTest.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/components/AuthProvider\";\n\nexport default function TransactionTest() {\n  const { user } = useAuth();\n\n  const { data: transactions, isLoading, error } = useQuery({\n    queryKey: [\"/api/transactions/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">Transaction Test</h1>\n      \n      <div className=\"mb-4\">\n        <p><strong>User ID:</strong> {user?.id}</p>\n        <p><strong>Loading:</strong> {isLoading ? 'Yes' : 'No'}</p>\n        <p><strong>Error:</strong> {error ? JSON.stringify(error) : 'None'}</p>\n      </div>\n\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl font-semibold mb-2\">Raw Transaction Data:</h2>\n        <pre className=\"bg-gray-100 p-4 rounded overflow-auto\">\n          {JSON.stringify(transactions, null, 2)}\n        </pre>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-semibold mb-2\">Transaction Count:</h2>\n        <p>{Array.isArray(transactions) ? transactions.length : 0} transactions found</p>\n      </div>\n    </div>\n  );\n}","size_bytes":1137},"client/src/pages/retailer/WiFiEnable.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft, Upload, FileText, Download, AlertCircle, CheckCircle, X, Wifi } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function WiFiEnable() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n\n  if (!user || ![\"admin\", \"employee\", \"retailer\"].includes(user.role)) {\n    return <div>Access denied</div>;\n  }\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"text/csv\" && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a CSV file only.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setUploadedFile(file);\n      setResults([]);\n    }\n  };\n\n  const processWiFiEnable = async () => {\n    if (!uploadedFile) return;\n\n    setIsProcessing(true);\n    try {\n      // Read and parse CSV file\n      const text = await uploadedFile.text();\n      const lines = text.split('\\n').filter(line => line.trim());\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      // Validate CSV format\n      const requiredHeaders = ['iccid', 'phone_number', 'wifi_plan'];\n      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\n      \n      if (missingHeaders.length > 0) {\n        toast({\n          title: \"Invalid CSV Format\",\n          description: `Missing required columns: ${missingHeaders.join(', ')}`,\n          variant: \"destructive\",\n        });\n        setIsProcessing(false);\n        return;\n      }\n\n      // Process each row\n      const enableResults = [];\n      for (let i = 1; i < lines.length; i++) {\n        const values = lines[i].split(',').map(v => v.trim());\n        const row: any = {};\n        headers.forEach((header, index) => {\n          row[header] = values[index];\n        });\n\n        // Simulate WiFi enable process\n        const success = Math.random() > 0.05; // 95 success rate for demo\n        enableResults.push({\n          row: i,\n          iccid: row.iccid,\n          phone_number: row.phone_number,\n          wifi_plan: row.wifi_plan,\n          status: success ? 'success' : 'failed',\n          message: success ? 'WiFi enabled successfully' : 'Network configuration failed'\n        });\n      }\n\n      setResults(enableResults);\n      toast({\n        title: \"WiFi Enable Complete\",\n        description: `Processed ${enableResults.length} WiFi configurations`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Processing Error\",\n        description: \"Failed to process the CSV file\",\n        variant: \"destructive\",\n      });\n    }\n    setIsProcessing(false);\n  };\n\n  const downloadTemplate = () => {\n    const csvContent = \"iccid,phone_number,wifi_plan,customer_name\\n\" +\n      \"89148000012345678901,+1-555-0123,Premium WiFi,John Doe\\n\" +\n      \"89148000012345678902,+1-555-0124,Basic WiFi,Jane Smith\";\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'wifi_enable_template.csv';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  const downloadResults = () => {\n    if (results.length === 0) return;\n    \n    const csvContent = \"row,iccid,phone_number,wifi_plan,status,message\\n\" +\n      results.map(r => `${r.row},${r.iccid},${r.phone_number},${r.wifi_plan},${r.status},${r.message}`).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'wifi_enable_results.csv';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"mr-4\" \n                type=\"button\"\n                onClick={() => window.location.href = '/retailer/dashboard'}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">WiFi Enable Upload</h1>\n                <p className=\"text-sm text-gray-600\">Enable WiFi services for multiple devices</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Instructions */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Wifi className=\"w-5 h-5 mr-2\" />\n              WiFi Enable File Format Instructions\n            </CardTitle>\n            <CardDescription>\n              Upload a CSV file to enable WiFi services for multiple customers\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Required Columns:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n                  <li><strong>iccid</strong> - SIM card ICCID (20 digits)</li>\n                  <li><strong>phone_number</strong> - Device phone number</li>\n                  <li><strong>wifi_plan</strong> - WiFi service plan (Basic WiFi, Premium WiFi, etc.)</li>\n                  <li><strong>customer_name</strong> - Customer name (optional)</li>\n                </ul>\n              </div>\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"flex items-start\">\n                  <AlertCircle className=\"w-5 h-5 text-blue-600 mr-2 mt-0.5\" />\n                  <div className=\"text-sm text-blue-800\">\n                    <p className=\"font-medium mb-1\">Important:</p>\n                    <p>WiFi services will be enabled on existing active Nexitel lines. Ensure all ICCIDs correspond to active subscriptions.</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button onClick={downloadTemplate} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Template\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* File Upload */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Upload WiFi Enable File</CardTitle>\n            <CardDescription>\n              Select your prepared CSV file to enable WiFi services\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div\n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-purple-400 transition-colors cursor-pointer\"\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <div className=\"text-lg font-medium text-gray-900 mb-2\">\n                  {uploadedFile ? uploadedFile.name : \"Choose CSV file\"}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Click to browse or drag and drop your CSV file here\n                </div>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                />\n              </div>\n\n              {uploadedFile && (\n                <div className=\"flex items-center justify-between bg-green-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                    <div>\n                      <p className=\"font-medium text-green-900\">{uploadedFile.name}</p>\n                      <p className=\"text-sm text-green-600\">File ready for processing</p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={processWiFiEnable}\n                      disabled={isProcessing}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                    >\n                      {isProcessing ? \"Processing...\" : \"Enable WiFi\"}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setUploadedFile(null)}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results */}\n        {results.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>WiFi Enable Results</CardTitle>\n                  <CardDescription>\n                    {results.filter(r => r.status === 'success').length} successful, {results.filter(r => r.status === 'failed').length} failed\n                  </CardDescription>\n                </div>\n                <Button onClick={downloadResults} variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Results\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {results.map((result, index) => (\n                  <div\n                    key={index}\n                    className={`flex items-center justify-between p-3 rounded-lg ${\n                      result.status === 'success' ? 'bg-green-50' : 'bg-red-50'\n                    }`}\n                  >\n                    <div className=\"flex items-center\">\n                      {result.status === 'success' ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-600 mr-3\" />\n                      ) : (\n                        <AlertCircle className=\"w-5 h-5 text-red-600 mr-3\" />\n                      )}\n                      <div>\n                        <p className={`font-medium ${\n                          result.status === 'success' ? 'text-green-900' : 'text-red-900'\n                        }`}>\n                          {result.phone_number}\n                        </p>\n                        <p className={`text-sm ${\n                          result.status === 'success' ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                          {result.iccid} • {result.wifi_plan}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className={`text-sm ${\n                        result.status === 'success' ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {result.message}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":12470},"client/src/pages/USARecharge.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/components/AuthProvider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DollarSign, Phone, CreditCard, Activity, CheckCircle, Clock, AlertCircle, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { CommissionDisplay } from \"@/components/CommissionDisplay\";\nimport { USA_CARRIERS, getCarrierAmounts } from \"@shared/usa-carriers\";\n\nconst usaRechargeSchema = z.object({\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  carrier: z.string().min(1, \"Please select a carrier\"),\n  amount: z.number().min(5, \"Minimum recharge amount is $5\"),\n  customerName: z.string().optional(),\n  customerEmail: z.string().email().optional().or(z.literal(\"\")),\n});\n\ntype USARechargeRequest = z.infer<typeof usaRechargeSchema>;\n\nexport default function USARecharge() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCarrier, setSelectedCarrier] = useState<string>(\"\");\n  const [selectedAmount, setSelectedAmount] = useState<number>(0);\n  const [recentTransactions, setRecentTransactions] = useState<any[]>([]);\n\n  // Get back URL based on user role\n  const getBackUrl = () => {\n    if (user?.role === \"retailer\") {\n      return \"/retailer/dashboard\";\n    } else if (user?.role === \"employee\") {\n      return \"/employee/dashboard\";\n    } else if (user?.role === \"admin\") {\n      return \"/admin\";\n    }\n    return \"/\";\n  };\n\n  const form = useForm<USARechargeRequest>({\n    resolver: zodResolver(usaRechargeSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n      carrier: \"\",\n      amount: 0,\n      customerName: \"\",\n      customerEmail: \"\",\n    },\n  });\n\n  // Watch form values for dynamic updates\n  const watchedCarrier = form.watch(\"carrier\");\n  const availableAmounts = getCarrierAmounts(watchedCarrier);\n\n  // Fetch user's current balance\n  const { data: currentUser } = useQuery({\n    queryKey: [`/api/users/${user?.id}`],\n    enabled: !!user?.id,\n  });\n\n  // Fetch recent transactions for this user\n  const { data: transactions = [] } = useQuery({\n    queryKey: [\"/api/transactions/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const rechargeTransactionMutation = useMutation({\n    mutationFn: async (data: USARechargeRequest & { userId: number }) => {\n      const response = await apiRequest(\"/api/usa-recharge\", { \n        method: \"POST\", \n        body: data \n      });\n      return response;\n    },\n    onSuccess: (response) => {\n      // Reset form\n      form.reset();\n      setSelectedCarrier(\"\");\n      setSelectedAmount(0);\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${user?.id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/transactions/user\", user?.id] });\n      \n      toast({\n        title: \"Recharge Successful\",\n        description: `USA carrier recharge processed successfully. Transaction ID: ${response.transactionId || 'N/A'}`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"USA recharge error:\", error);\n      toast({\n        title: \"Recharge Failed\",\n        description: error.message || \"Failed to process USA carrier recharge\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: USARechargeRequest) => {\n    if (!user?.id) {\n      toast({\n        title: \"Error\",\n        description: \"User not authenticated\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedCarrierData = USA_CARRIERS.find(c => c.code === data.carrier);\n    if (!selectedCarrierData) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a valid carrier\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    rechargeTransactionMutation.mutate({\n      ...data,\n      userId: user.id,\n    });\n  };\n\n  const currentBalance = parseFloat((currentUser as any)?.balance || user?.balance || \"0\");\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center\">\n              <Link href={getBackUrl()}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <div className=\"flex items-center\">\n                <Phone className=\"w-6 h-6 text-blue-600 mr-3\" />\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">USA Carriers</h1>\n                  <p className=\"text-sm text-gray-500\">Domestic US mobile carrier recharge services</p>\n                </div>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200\">\n              Balance: ${currentBalance.toFixed(2)}\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Commission Display - Only for retailers */}\n        {user?.role === \"retailer\" && <CommissionDisplay />}\n        \n        {/* Recharge Form */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"w-5 h-5 mr-2 text-blue-600\" />\n                  USA Carrier Recharge\n                </CardTitle>\n                <CardDescription>\n                  Recharge domestic US mobile carriers including T-Mobile, AT&T, Verizon and more\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Phone Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter USA phone number (e.g., 5551234567)\"\n                              {...field}\n                              className=\"text-lg\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Carrier Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"carrier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Carrier</FormLabel>\n                          <FormControl>\n                            <Select \n                              value={field.value} \n                              onValueChange={(value) => {\n                                field.onChange(value);\n                                setSelectedCarrier(value);\n                                form.setValue(\"amount\", 0);\n                                setSelectedAmount(0);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a USA carrier\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {USA_CARRIERS.map((carrier) => (\n                                  <SelectItem key={carrier.code} value={carrier.code}>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className={`w-3 h-3 rounded-full ${carrier.color}`}></div>\n                                      <span>{carrier.name}</span>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Amount Selection */}\n                    {selectedCarrier && availableAmounts.length > 0 && (\n                      <FormField\n                        control={form.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Recharge Amount</FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n                                  {availableAmounts.map((amount) => (\n                                    <Button\n                                      key={amount}\n                                      type=\"button\"\n                                      variant={selectedAmount === amount ? \"default\" : \"outline\"}\n                                      className=\"h-12\"\n                                      onClick={() => {\n                                        setSelectedAmount(amount);\n                                        field.onChange(amount);\n                                      }}\n                                    >\n                                      ${amount}\n                                    </Button>\n                                  ))}\n                                </div>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"Or enter custom amount\"\n                                  min=\"5\"\n                                  max=\"500\"\n                                  onChange={(e) => {\n                                    const amount = parseFloat(e.target.value) || 0;\n                                    setSelectedAmount(amount);\n                                    field.onChange(amount);\n                                  }}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    {/* Customer Information - Optional */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Name (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter customer name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Email (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\" \n                                placeholder=\"Enter customer email\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Submit Button */}\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      size=\"lg\"\n                      disabled={rechargeTransactionMutation.isPending || !selectedCarrier || !selectedAmount}\n                    >\n                      {rechargeTransactionMutation.isPending ? (\n                        <div className=\"flex items-center\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Processing...\n                        </div>\n                      ) : (\n                        <>\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Process Recharge - ${selectedAmount}\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Selected Carrier Info */}\n            {selectedCarrier && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Selected Carrier</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {(() => {\n                    const carrier = USA_CARRIERS.find(c => c.code === selectedCarrier);\n                    return carrier ? (\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-8 h-8 rounded-full ${carrier.color} flex items-center justify-center`}>\n                          <Phone className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{carrier.name}</p>\n                          <p className=\"text-sm text-gray-500\">\n                            ${Math.min(...carrier.amounts)} - ${Math.max(...carrier.amounts)}\n                          </p>\n                        </div>\n                      </div>\n                    ) : null;\n                  })()}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Transactions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center\">\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  Recent Transactions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {transactions.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {transactions.slice(0, 5).map((transaction: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between text-sm\">\n                        <div>\n                          <p className=\"font-medium\">{transaction.carrier || 'Unknown'}</p>\n                          <p className=\"text-gray-500\">{transaction.phoneNumber}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">${transaction.amount}</p>\n                          <Badge \n                            variant={transaction.status === 'completed' ? 'default' : 'secondary'}\n                            className=\"text-xs\"\n                          >\n                            {transaction.status || 'pending'}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500\">No recent transactions</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":16843},"shared/usa-carriers.ts":{"content":"// Shared USA Carrier data with authentic carrier information\nexport const USA_CARRIERS = [\n  { \n    name: \"T-Mobile\", \n    code: \"tmobile\",\n    color: \"bg-pink-500\",\n    textColor: \"text-white\",\n    amounts: [5, 10, 15, 25, 30, 40, 50, 75, 100]\n  },\n  { \n    name: \"AT&T\", \n    code: \"att\",\n    color: \"bg-blue-600\",\n    textColor: \"text-white\",\n    amounts: [10, 15, 25, 30, 40, 50, 60, 75, 100]\n  },\n  { \n    name: \"Verizon\", \n    code: \"verizon\",\n    color: \"bg-red-600\",\n    textColor: \"text-white\",\n    amounts: [15, 20, 25, 30, 40, 50, 75, 100, 150]\n  },\n  { \n    name: \"Surf USA\", \n    code: \"surfusa\",\n    color: \"bg-cyan-500\",\n    textColor: \"text-white\",\n    amounts: [10, 20, 30, 50, 100]\n  },\n  { \n    name: \"Boom Mobile\", \n    code: \"boom\",\n    color: \"bg-orange-500\",\n    textColor: \"text-white\",\n    amounts: [10, 20, 30, 40, 50]\n  },\n  { \n    name: \"Ultra Mobile\", \n    code: \"ultra\",\n    color: \"bg-purple-600\",\n    textColor: \"text-white\",\n    amounts: [19, 29, 39, 49, 59]\n  },\n  { \n    name: \"Lycamobile\", \n    code: \"lyca\",\n    color: \"bg-green-600\",\n    textColor: \"text-white\",\n    amounts: [10, 19, 29, 35, 50]\n  },\n  { \n    name: \"H2O Wireless\", \n    code: \"h2o\",\n    color: \"bg-blue-400\",\n    textColor: \"text-white\",\n    amounts: [10, 20, 30, 40, 50, 60]\n  },\n  { \n    name: \"Gen Mobile\", \n    code: \"gen\",\n    color: \"bg-indigo-500\",\n    textColor: \"text-white\",\n    amounts: [10, 25, 35, 50, 75]\n  },\n  { \n    name: \"Boss Revolution\", \n    code: \"boss\",\n    color: \"bg-yellow-600\",\n    textColor: \"text-white\",\n    amounts: [5, 10, 20, 30, 50, 100]\n  },\n  { \n    name: \"Mint Mobile\", \n    code: \"mint\",\n    color: \"bg-green-500\",\n    textColor: \"text-white\",\n    amounts: [15, 25, 35, 45]\n  },\n  { \n    name: \"Cricket Wireless\", \n    code: \"cricket\",\n    color: \"bg-green-700\",\n    textColor: \"text-white\",\n    amounts: [15, 25, 35, 45, 55]\n  }\n] as const;\n\nexport type USACarrier = typeof USA_CARRIERS[number];\n\nexport function getCarrierByCode(code: string): USACarrier | undefined {\n  return USA_CARRIERS.find(carrier => carrier.code === code);\n}\n\nexport function getCarrierAmounts(code: string): readonly number[] {\n  const carrier = getCarrierByCode(code);\n  return carrier ? carrier.amounts : [];\n}","size_bytes":2234},"client/src/pages/admin/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, BarChart3 } from \"lucide-react\";\n\nexport default function Reports() {\n  const { toast } = useToast();\n  const [reportDate, setReportDate] = useState(new Date().toISOString().split('T')[0]);\n  const [reportMonth, setReportMonth] = useState(new Date().toISOString().slice(0, 7));\n\n  const downloadDailyReport = async (format: 'csv' | 'json') => {\n    try {\n      // Implement daily report download logic\n      toast({\n        title: \"Success\",\n        description: `Daily report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download daily report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadMonthlyReport = async (format: 'csv' | 'json') => {\n    try {\n      // Implement monthly report download logic\n      toast({\n        title: \"Success\",\n        description: `Monthly report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download monthly report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadWalletReport = async (period: 'daily' | 'monthly', format: 'csv' | 'json') => {\n    try {\n      // Implement wallet report download logic\n      toast({\n        title: \"Success\",\n        description: `${period.charAt(0).toUpperCase() + period.slice(1)} wallet report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download wallet report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadRetailerReport = async (period: 'daily' | 'monthly', format: 'csv' | 'json') => {\n    try {\n      // Implement retailer report download logic\n      toast({\n        title: \"Success\",\n        description: `${period.charAt(0).toUpperCase() + period.slice(1)} retailer report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download retailer report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadRetailerProfileReport = async (format: 'csv' | 'json') => {\n    try {\n      // Implement retailer profile report download logic\n      toast({\n        title: \"Success\",\n        description: `Retailer profile report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download retailer profile report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadMonthlyRechargeReport = async (format: 'csv' | 'json') => {\n    try {\n      // API call to download monthly recharge report\n      const response = await fetch(`/api/reports/monthly-recharge?month=${reportMonth}&format=${format}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate report');\n      }\n\n      if (format === 'csv') {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `monthly-recharge-report-${reportMonth}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        const data = await response.json();\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `monthly-recharge-report-${reportMonth}.json`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n\n      toast({\n        title: \"Success\",\n        description: `Monthly recharge report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download monthly recharge report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-6 py-8 max-w-7xl\">\n        {/* Header - Centered */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <BarChart3 className=\"w-10 h-10 text-blue-600\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">\n              Download Reports\n            </h1>\n          </div>\n          <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n            Generate and download comprehensive reports for all carriers and transactions\n          </p>\n        </div>\n\n        {/* Reports Grid - Clean Organized Layout */}\n        <div className=\"space-y-12 bg-white rounded-xl shadow-sm p-8\">\n          \n          {/* Section 1: Core System Reports */}\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Core System Reports</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n              {/* Daily Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-blue-600\" />\n                    Daily Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <input\n                    type=\"date\"\n                    value={reportDate}\n                    onChange={(e) => setReportDate(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                    max={new Date().toISOString().split('T')[0]}\n                  />\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadDailyReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      CSV\n                    </Button>\n                    <Button onClick={() => downloadDailyReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      JSON\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-green-600\" />\n                    Monthly Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <input\n                    type=\"month\"\n                    value={reportMonth}\n                    onChange={(e) => setReportMonth(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-green-500 cursor-pointer\"\n                    max={new Date().toISOString().slice(0, 7)}\n                    style={{ colorScheme: 'light' }}\n                    placeholder=\"Select month\"\n                    title=\"Click to open calendar\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={reportMonth ? `${reportMonth}-01 to ${reportMonth}-${new Date(parseInt(reportMonth.split('-')[0]), parseInt(reportMonth.split('-')[1]), 0).getDate().toString().padStart(2, '0')}` : ''}\n                    readOnly\n                    className=\"w-full px-2 py-1 border border-gray-200 rounded text-xs bg-gray-50 text-gray-700\"\n                    placeholder=\"Date range will appear here\"\n                  />\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadMonthlyReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      CSV\n                    </Button>\n                    <Button onClick={() => downloadMonthlyReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      JSON\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Section 2: Financial Reports */}\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Financial Reports</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n              {/* Wallet Transaction Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-purple-600\" />\n                    Wallet Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <div className=\"space-y-1\">\n                    <input\n                      type=\"date\"\n                      value={reportDate}\n                      onChange={(e) => setReportDate(e.target.value)}\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500\"\n                      max={new Date().toISOString().split('T')[0]}\n                    />\n                    <input\n                      type=\"month\"\n                      value={reportMonth}\n                      onChange={(e) => setReportMonth(e.target.value)}\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500 cursor-pointer\"\n                      max={new Date().toISOString().slice(0, 7)}\n                      style={{ colorScheme: 'light' }}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadWalletReport('daily', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-CSV</Button>\n                    <Button onClick={() => downloadWalletReport('daily', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-JSON</Button>\n                    <Button onClick={() => downloadWalletReport('monthly', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-CSV</Button>\n                    <Button onClick={() => downloadWalletReport('monthly', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-JSON</Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Recharge Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-indigo-600\" />\n                    Recharge Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <input\n                    type=\"month\"\n                    value={reportMonth}\n                    onChange={(e) => setReportMonth(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-indigo-500 cursor-pointer\"\n                    max={new Date().toISOString().slice(0, 7)}\n                    style={{ colorScheme: 'light' }}\n                  />\n                  <input\n                    type=\"text\"\n                    value={reportMonth ? `${reportMonth}-01 to ${reportMonth}-${new Date(parseInt(reportMonth.split('-')[0]), parseInt(reportMonth.split('-')[1]), 0).getDate().toString().padStart(2, '0')}` : ''}\n                    readOnly\n                    className=\"w-full px-2 py-1 border border-gray-200 rounded text-xs bg-gray-50 text-gray-700\"\n                    placeholder=\"Date range will appear here\"\n                  />\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadMonthlyRechargeReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      CSV\n                    </Button>\n                    <Button onClick={() => downloadMonthlyRechargeReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      JSON\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Section 3: Retailer Reports */}\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Retailer Reports</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n              {/* Retailer Activation Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-orange-600\" />\n                    Activation Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <div className=\"space-y-1\">\n                    <input\n                      type=\"date\"\n                      value={reportDate}\n                      onChange={(e) => setReportDate(e.target.value)}\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-orange-500\"\n                      max={new Date().toISOString().split('T')[0]}\n                    />\n                    <input\n                      type=\"month\"\n                      value={reportMonth}\n                      onChange={(e) => setReportMonth(e.target.value)}\n                      className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-orange-500 cursor-pointer\"\n                      max={new Date().toISOString().slice(0, 7)}\n                      style={{ colorScheme: 'light' }}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadRetailerReport('daily', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-CSV</Button>\n                    <Button onClick={() => downloadRetailerReport('daily', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-JSON</Button>\n                    <Button onClick={() => downloadRetailerReport('monthly', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-CSV</Button>\n                    <Button onClick={() => downloadRetailerReport('monthly', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-JSON</Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Retailer Profile Reports */}\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"flex items-center gap-1 text-sm\">\n                    <FileText className=\"w-4 h-4 text-teal-600\" />\n                    Profile Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2 pt-0\">\n                  <div className=\"text-xs text-gray-600\">\n                    Complete retailer directory with contact info and balances.\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    <Button onClick={() => downloadRetailerProfileReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      CSV\n                    </Button>\n                    <Button onClick={() => downloadRetailerProfileReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                      JSON\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Report Information Section */}\n          <Card className=\"mt-8\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Report Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <div>\n                  <h4 className=\"text-xs font-semibold text-gray-900 mb-2\">Supported Carriers</h4>\n                  <ul className=\"space-y-1 text-xs text-gray-600\">\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-blue-500\"></div>\n                      Nexitel Blue\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-purple-500\"></div>\n                      Nexitel Purple\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-orange-500\"></div>\n                      AT&T Services\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-green-500\"></div>\n                      Global Recharge\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-red-500\"></div>\n                      USA Carriers\n                    </li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"text-xs font-semibold text-gray-900 mb-2\">File Formats</h4>\n                  <ul className=\"space-y-1 text-xs text-gray-600\">\n                    <li className=\"flex items-center gap-1\">\n                      <FileText className=\"w-3 h-3 text-blue-600\" />\n                      CSV - Spreadsheet format\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <FileText className=\"w-3 h-3 text-green-600\" />\n                      JSON - API data format\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18895},"client/src/pages/admin/Reports_broken.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileText, Calendar, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [reportDate, setReportDate] = useState(new Date().toISOString().split('T')[0]);\n  const [reportMonth, setReportMonth] = useState(new Date().toISOString().slice(0, 7));\n  const { toast } = useToast();\n\n  // Download daily report functions\n  const downloadDailyReport = async (format: 'json' | 'csv') => {\n    try {\n      const endpoint = format === 'csv' \n        ? `/api/reports/daily/${reportDate}/csv`\n        : `/api/reports/daily/${reportDate}`;\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `daily-report-${reportDate}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Daily report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download daily report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Download monthly report functions\n  const downloadMonthlyReport = async (format: 'json' | 'csv') => {\n    try {\n      const [year, month] = reportMonth.split('-');\n      const endpoint = format === 'csv' \n        ? `/api/reports/monthly/${year}/${month}/csv`\n        : `/api/reports/monthly/${year}/${month}`;\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `monthly-report-${year}-${month}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Monthly report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download monthly report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Download wallet transaction report functions\n  const downloadWalletReport = async (period: 'daily' | 'monthly', format: 'json' | 'csv') => {\n    try {\n      let endpoint = '';\n      let filename = '';\n      \n      if (period === 'daily') {\n        endpoint = format === 'csv' \n          ? `/api/reports/wallet/daily/${reportDate}/csv`\n          : `/api/reports/wallet/daily/${reportDate}`;\n        filename = `wallet-transactions-${reportDate}.${format}`;\n      } else {\n        const [year, month] = reportMonth.split('-');\n        endpoint = format === 'csv' \n          ? `/api/reports/wallet/monthly/${year}/${month}/csv`\n          : `/api/reports/wallet/monthly/${year}/${month}`;\n        filename = `wallet-transactions-${year}-${month}.${format}`;\n      }\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download wallet report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Wallet ${period} report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to download wallet ${period} report`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Download retailer activation report functions\n  const downloadRetailerReport = async (period: 'daily' | 'monthly', format: 'json' | 'csv') => {\n    try {\n      let endpoint = '';\n      let filename = '';\n      \n      if (period === 'daily') {\n        endpoint = format === 'csv' \n          ? `/api/reports/retailer/daily/${reportDate}/csv`\n          : `/api/reports/retailer/daily/${reportDate}`;\n        filename = `retailer-activations-${reportDate}.${format}`;\n      } else {\n        const [year, month] = reportMonth.split('-');\n        endpoint = format === 'csv' \n          ? `/api/reports/retailer/monthly/${year}/${month}/csv`\n          : `/api/reports/retailer/monthly/${year}/${month}`;\n        filename = `retailer-activations-${year}-${month}.${format}`;\n      }\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download retailer report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Retailer ${period} report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to download retailer ${period} report`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Download retailer profile report function\n  const downloadRetailerProfileReport = async (format: 'json' | 'csv') => {\n    try {\n      const endpoint = format === 'csv' \n        ? '/api/reports/retailer/profiles/csv'\n        : '/api/reports/retailer/profiles';\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download retailer profile report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `retailer-profiles-${new Date().toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Retailer profile report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download retailer profile report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Download monthly recharge report function\n  const downloadMonthlyRechargeReport = async (format: 'json' | 'csv') => {\n    try {\n      const [year, month] = reportMonth.split('-');\n      const endpoint = format === 'csv' \n        ? `/api/reports/recharge/monthly/${year}/${month}/csv`\n        : `/api/reports/recharge/monthly/${year}/${month}`;\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to download monthly recharge report');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `monthly-recharge-report-${year}-${month}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `Monthly recharge report downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download monthly recharge report\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-6 py-8 max-w-7xl\">\n        {/* Header - Centered */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <BarChart3 className=\"w-10 h-10 text-blue-600\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">\n              Download Reports\n            </h1>\n          </div>\n          <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n            Generate and download comprehensive reports for all carriers and transactions\n          </p>\n        </div>\n\n        {/* Reports Grid - Clean Organized Layout */}\n        <div className=\"space-y-12 bg-white rounded-xl shadow-sm p-8\">\n        \n        {/* Section 1: Core System Reports */}\n        <div>\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Core System Reports</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n            {/* Daily Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-blue-600\" />\n                  Daily Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <input\n                  type=\"date\"\n                  value={reportDate}\n                  onChange={(e) => setReportDate(e.target.value)}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                  max={new Date().toISOString().split('T')[0]}\n                />\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadDailyReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    CSV\n                  </Button>\n                  <Button onClick={() => downloadDailyReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    JSON\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Monthly Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-green-600\" />\n                  Monthly Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <input\n                  type=\"month\"\n                  value={reportMonth}\n                  onChange={(e) => setReportMonth(e.target.value)}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-green-500\"\n                  max={new Date().toISOString().slice(0, 7)}\n                />\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadMonthlyReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    CSV\n                  </Button>\n                  <Button onClick={() => downloadMonthlyReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    JSON\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Section 2: Financial Reports */}\n        <div>\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Financial Reports</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n            {/* Wallet Transaction Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-purple-600\" />\n                  Wallet Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <div className=\"space-y-1\">\n                  <input\n                    type=\"date\"\n                    value={reportDate}\n                    onChange={(e) => setReportDate(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500\"\n                    max={new Date().toISOString().split('T')[0]}\n                  />\n                  <input\n                    type=\"month\"\n                    value={reportMonth}\n                    onChange={(e) => setReportMonth(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500\"\n                    max={new Date().toISOString().slice(0, 7)}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadWalletReport('daily', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-CSV</Button>\n                  <Button onClick={() => downloadWalletReport('daily', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-JSON</Button>\n                  <Button onClick={() => downloadWalletReport('monthly', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-CSV</Button>\n                  <Button onClick={() => downloadWalletReport('monthly', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-JSON</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Monthly Recharge Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-indigo-600\" />\n                  Recharge Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <input\n                  type=\"month\"\n                  value={reportMonth}\n                  onChange={(e) => setReportMonth(e.target.value)}\n                  className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-indigo-500\"\n                  max={new Date().toISOString().slice(0, 7)}\n                />\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadMonthlyRechargeReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    CSV\n                  </Button>\n                  <Button onClick={() => downloadMonthlyRechargeReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    JSON\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Section 3: Retailer Reports */}\n        <div>\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-3 border-b pb-2\">Retailer Reports</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\">\n            {/* Retailer Activation Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-orange-600\" />\n                  Activation Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <div className=\"space-y-1\">\n                  <input\n                    type=\"date\"\n                    value={reportDate}\n                    onChange={(e) => setReportDate(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-orange-500\"\n                    max={new Date().toISOString().split('T')[0]}\n                  />\n                  <input\n                    type=\"month\"\n                    value={reportMonth}\n                    onChange={(e) => setReportMonth(e.target.value)}\n                    className=\"w-full px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:ring-1 focus:ring-orange-500\"\n                    max={new Date().toISOString().slice(0, 7)}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadRetailerReport('daily', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-CSV</Button>\n                  <Button onClick={() => downloadRetailerReport('daily', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">D-JSON</Button>\n                  <Button onClick={() => downloadRetailerReport('monthly', 'csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-CSV</Button>\n                  <Button onClick={() => downloadRetailerReport('monthly', 'json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-6 p-1\">M-JSON</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Retailer Profile Reports */}\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center gap-1 text-sm\">\n                  <FileText className=\"w-4 h-4 text-teal-600\" />\n                  Profile Reports\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 pt-0\">\n                <div className=\"text-xs text-gray-600\">\n                  Complete retailer directory with contact info and balances.\n                </div>\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <Button onClick={() => downloadRetailerProfileReport('csv')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    CSV\n                  </Button>\n                  <Button onClick={() => downloadRetailerProfileReport('json')} size=\"sm\" variant=\"outline\" className=\"text-xs h-7\">\n                    JSON\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n          {/* Report Information Section */}\n          <Card className=\"mt-8\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Report Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <div>\n                  <h4 className=\"text-xs font-semibold text-gray-900 mb-2\">Supported Carriers</h4>\n                  <ul className=\"space-y-1 text-xs text-gray-600\">\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-blue-500\"></div>\n                      Nexitel Blue\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-purple-500\"></div>\n                      Nexitel Purple\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-orange-500\"></div>\n                      AT&T Services\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-green-500\"></div>\n                      Global Recharge\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 rounded bg-red-500\"></div>\n                      USA Carriers\n                    </li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"text-xs font-semibold text-gray-900 mb-2\">File Formats</h4>\n                  <ul className=\"space-y-1 text-xs text-gray-600\">\n                    <li className=\"flex items-center gap-1\">\n                      <FileText className=\"w-3 h-3 text-blue-600\" />\n                      CSV - Spreadsheet format\n                    </li>\n                    <li className=\"flex items-center gap-1\">\n                      <FileText className=\"w-3 h-3 text-green-600\" />\n                      JSON - API data format\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20967}},"version":1}